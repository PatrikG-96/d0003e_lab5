
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000226e  00002302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000226e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  0080011c  0080011c  0000231e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000231e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00002390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034b2  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001291  00000000  00000000  00005ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018fe  00000000  00000000  00006d63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d34  00000000  00000000  00008664  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a42  00000000  00000000  00009398  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000370a  00000000  00000000  00009dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0000d4e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__vector_1>
       8:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__vector_2>
       c:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__vector_3>
      10:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <__vector_4>
      14:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <__vector_9>
      28:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__vector_10>
      2c:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__vector_11>
      30:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__vector_12>
      34:	0c 94 95 08 	jmp	0x112a	; 0x112a <__vector_13>
      38:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__vector_14>
      3c:	0c 94 6d 09 	jmp	0x12da	; 0x12da <__vector_15>
      40:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__vector_16>
      44:	0c 94 45 0a 	jmp	0x148a	; 0x148a <__vector_17>
      48:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__vector_18>
      4c:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__vector_19>
      50:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__vector_20>
      54:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__vector_21>
      58:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ee e6       	ldi	r30, 0x6E	; 110
      70:	f2 e2       	ldi	r31, 0x22	; 34
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ac 31       	cpi	r26, 0x1C	; 28
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ac e1       	ldi	r26, 0x1C	; 28
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	af 36       	cpi	r26, 0x6F	; 111
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 0b 04 	call	0x816	; 0x816 <main>
      92:	0c 94 35 11 	jmp	0x226a	; 0x226a <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <empty_bridge>:
	}
	
}


void empty_bridge(Controller *self, int arg0) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	fc 01       	movw	r30, r24
	// If bridge is empty
	if(self->current_cars == 0) {
      a8:	86 85       	ldd	r24, Z+14	; 0x0e
      aa:	97 85       	ldd	r25, Z+15	; 0x0f
      ac:	89 2b       	or	r24, r25
      ae:	d1 f4       	brne	.+52     	; 0xe4 <empty_bridge+0x4a>
		
		// If queue in opposite direction isn't empty
		if(self->queues[!self->curr_dir] > 0) {
      b0:	21 e0       	ldi	r18, 0x01	; 1
      b2:	81 89       	ldd	r24, Z+17	; 0x11
      b4:	81 11       	cpse	r24, r1
      b6:	2e c0       	rjmp	.+92     	; 0x114 <empty_bridge+0x7a>
      b8:	82 2f       	mov	r24, r18
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	dc 01       	movw	r26, r24
      be:	14 96       	adiw	r26, 0x04	; 4
      c0:	aa 0f       	add	r26, r26
      c2:	bb 1f       	adc	r27, r27
      c4:	ae 0f       	add	r26, r30
      c6:	bf 1f       	adc	r27, r31
      c8:	4d 91       	ld	r20, X+
      ca:	5c 91       	ld	r21, X
      cc:	14 16       	cp	r1, r20
      ce:	15 06       	cpc	r1, r21
      d0:	4c f4       	brge	.+18     	; 0xe4 <empty_bridge+0x4a>
			self->curr_dir = !self->curr_dir;			// Swap direction
      d2:	21 8b       	std	Z+17, r18	; 0x11
			self->lights[self->curr_dir] = GREEN;		// Turn on light
      d4:	df 01       	movw	r26, r30
      d6:	a8 0f       	add	r26, r24
      d8:	b9 1f       	adc	r27, r25
      da:	21 e0       	ldi	r18, 0x01	; 1
      dc:	1c 96       	adiw	r26, 0x0c	; 12
      de:	2c 93       	st	X, r18
			self->cars_allowed = MAX_CARS_ON_BRIDGE;		// Reset starvation counter
      e0:	85 e0       	ldi	r24, 0x05	; 5
      e2:	80 8b       	std	Z+16, r24	; 0x10
		}
		
	}
	SEND(MSEC(NEXT_CAR_TIME), MSEC(NEXT_CAR_TIME+50), self, manage_lights, 0);
      e4:	c1 2c       	mov	r12, r1
      e6:	d1 2c       	mov	r13, r1
      e8:	87 eb       	ldi	r24, 0xB7	; 183
      ea:	e8 2e       	mov	r14, r24
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	f8 2e       	mov	r15, r24
      f0:	8f 01       	movw	r16, r30
      f2:	2c e2       	ldi	r18, 0x2C	; 44
      f4:	30 e8       	ldi	r19, 0x80	; 128
      f6:	40 e0       	ldi	r20, 0x00	; 0
      f8:	50 e0       	ldi	r21, 0x00	; 0
      fa:	62 e1       	ldi	r22, 0x12	; 18
      fc:	7a e7       	ldi	r23, 0x7A	; 122
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <async>
}
     106:	1f 91       	pop	r17
     108:	0f 91       	pop	r16
     10a:	ff 90       	pop	r15
     10c:	ef 90       	pop	r14
     10e:	df 90       	pop	r13
     110:	cf 90       	pop	r12
     112:	08 95       	ret
void empty_bridge(Controller *self, int arg0) {
	// If bridge is empty
	if(self->current_cars == 0) {
		
		// If queue in opposite direction isn't empty
		if(self->queues[!self->curr_dir] > 0) {
     114:	20 e0       	ldi	r18, 0x00	; 0
     116:	d0 cf       	rjmp	.-96     	; 0xb8 <empty_bridge+0x1e>

00000118 <exit_bridge>:
	//AFTER(MSEC(CAR_PASSING_TIME), self, exit_bridge, 0);
	//manage_lights(self, 0);
}


void exit_bridge(Controller *self, int arg0) {
     118:	cf 92       	push	r12
     11a:	df 92       	push	r13
     11c:	ef 92       	push	r14
     11e:	ff 92       	push	r15
     120:	0f 93       	push	r16
     122:	1f 93       	push	r17
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	ec 01       	movw	r28, r24
	self->current_cars--;	// a car has left the bridge
     12a:	ce 84       	ldd	r12, Y+14	; 0x0e
     12c:	df 84       	ldd	r13, Y+15	; 0x0f
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	c8 1a       	sub	r12, r24
     132:	d1 08       	sbc	r13, r1
     134:	df 86       	std	Y+15, r13	; 0x0f
     136:	ce 86       	std	Y+14, r12	; 0x0e

	ASYNC(self->gui, update_current, self->current_cars);
     138:	0c 81       	ldd	r16, Y+4	; 0x04
     13a:	1d 81       	ldd	r17, Y+5	; 0x05
     13c:	81 e9       	ldi	r24, 0x91	; 145
     13e:	e8 2e       	mov	r14, r24
     140:	82 e0       	ldi	r24, 0x02	; 2
     142:	f8 2e       	mov	r15, r24
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	a9 01       	movw	r20, r18
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	70 e0       	ldi	r23, 0x00	; 0
     14e:	cb 01       	movw	r24, r22
     150:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <async>
	if (self->current_cars == 0) {
     154:	8e 85       	ldd	r24, Y+14	; 0x0e
     156:	9f 85       	ldd	r25, Y+15	; 0x0f
     158:	89 2b       	or	r24, r25
     15a:	49 f0       	breq	.+18     	; 0x16e <exit_bridge+0x56>
		empty_bridge(self, 0);
	}
}
     15c:	df 91       	pop	r29
     15e:	cf 91       	pop	r28
     160:	1f 91       	pop	r17
     162:	0f 91       	pop	r16
     164:	ff 90       	pop	r15
     166:	ef 90       	pop	r14
     168:	df 90       	pop	r13
     16a:	cf 90       	pop	r12
     16c:	08 95       	ret
void exit_bridge(Controller *self, int arg0) {
	self->current_cars--;	// a car has left the bridge

	ASYNC(self->gui, update_current, self->current_cars);
	if (self->current_cars == 0) {
		empty_bridge(self, 0);
     16e:	60 e0       	ldi	r22, 0x00	; 0
     170:	70 e0       	ldi	r23, 0x00	; 0
     172:	ce 01       	movw	r24, r28
	}
}
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	1f 91       	pop	r17
     17a:	0f 91       	pop	r16
     17c:	ff 90       	pop	r15
     17e:	ef 90       	pop	r14
     180:	df 90       	pop	r13
     182:	cf 90       	pop	r12
void exit_bridge(Controller *self, int arg0) {
	self->current_cars--;	// a car has left the bridge

	ASYNC(self->gui, update_current, self->current_cars);
	if (self->current_cars == 0) {
		empty_bridge(self, 0);
     184:	0c 94 4d 00 	jmp	0x9a	; 0x9a <empty_bridge>

00000188 <entry_north>:
	
}



void entry_north(Controller *self, int arg0) {
     188:	cf 92       	push	r12
     18a:	df 92       	push	r13
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	ec 01       	movw	r28, r24
	
	self->queues[NORTH]--;	// dequeue car
     19a:	88 85       	ldd	r24, Y+8	; 0x08
     19c:	99 85       	ldd	r25, Y+9	; 0x09
     19e:	01 97       	sbiw	r24, 0x01	; 1
     1a0:	99 87       	std	Y+9, r25	; 0x09
     1a2:	88 87       	std	Y+8, r24	; 0x08
	self->cars_allowed--;	// decrement starvation counter
     1a4:	88 89       	ldd	r24, Y+16	; 0x10
     1a6:	81 50       	subi	r24, 0x01	; 1
     1a8:	88 8b       	std	Y+16, r24	; 0x10
	self->current_cars++;	// new car on bridge
     1aa:	ce 84       	ldd	r12, Y+14	; 0x0e
     1ac:	df 84       	ldd	r13, Y+15	; 0x0f
     1ae:	8f ef       	ldi	r24, 0xFF	; 255
     1b0:	c8 1a       	sub	r12, r24
     1b2:	d8 0a       	sbc	r13, r24
     1b4:	df 86       	std	Y+15, r13	; 0x0f
     1b6:	ce 86       	std	Y+14, r12	; 0x0e
	// Update relevant parts of the gui
	ASYNC(self->gui, update_current, self->current_cars);
     1b8:	0c 81       	ldd	r16, Y+4	; 0x04
     1ba:	1d 81       	ldd	r17, Y+5	; 0x05
     1bc:	81 e9       	ldi	r24, 0x91	; 145
     1be:	e8 2e       	mov	r14, r24
     1c0:	82 e0       	ldi	r24, 0x02	; 2
     1c2:	f8 2e       	mov	r15, r24
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	a9 01       	movw	r20, r18
     1ca:	60 e0       	ldi	r22, 0x00	; 0
     1cc:	70 e0       	ldi	r23, 0x00	; 0
     1ce:	cb 01       	movw	r24, r22
     1d0:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <async>
	ASYNC(self->gui, update_north, self->queues[NORTH]);
     1d4:	c8 84       	ldd	r12, Y+8	; 0x08
     1d6:	d9 84       	ldd	r13, Y+9	; 0x09
     1d8:	0c 81       	ldd	r16, Y+4	; 0x04
     1da:	1d 81       	ldd	r17, Y+5	; 0x05
     1dc:	99 e8       	ldi	r25, 0x89	; 137
     1de:	e9 2e       	mov	r14, r25
     1e0:	92 e0       	ldi	r25, 0x02	; 2
     1e2:	f9 2e       	mov	r15, r25
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	a9 01       	movw	r20, r18
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	cb 01       	movw	r24, r22
     1f0:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <async>
	
	// After a set amount of time, 
	SEND(MSEC(NEXT_CAR_TIME), MSEC(NEXT_CAR_TIME+TIMING_WINDOW), self, manage_lights, 0);
     1f4:	c1 2c       	mov	r12, r1
     1f6:	d1 2c       	mov	r13, r1
     1f8:	27 eb       	ldi	r18, 0xB7	; 183
     1fa:	e2 2e       	mov	r14, r18
     1fc:	21 e0       	ldi	r18, 0x01	; 1
     1fe:	f2 2e       	mov	r15, r18
     200:	8e 01       	movw	r16, r28
     202:	2c e2       	ldi	r18, 0x2C	; 44
     204:	30 e8       	ldi	r19, 0x80	; 128
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	62 e1       	ldi	r22, 0x12	; 18
     20c:	7a e7       	ldi	r23, 0x7A	; 122
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <async>
	SEND(MSEC(CAR_PASSING_TIME), MSEC(CAR_PASSING_TIME+TIMING_WINDOW), self, exit_bridge, 0);
     216:	3c e8       	ldi	r19, 0x8C	; 140
     218:	e3 2e       	mov	r14, r19
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	f3 2e       	mov	r15, r19
     21e:	24 e7       	ldi	r18, 0x74	; 116
     220:	38 e6       	ldi	r19, 0x68	; 104
     222:	42 e0       	ldi	r20, 0x02	; 2
     224:	50 e0       	ldi	r21, 0x00	; 0
     226:	6a e5       	ldi	r22, 0x5A	; 90
     228:	72 e6       	ldi	r23, 0x62	; 98
     22a:	82 e0       	ldi	r24, 0x02	; 2
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <async>
	//AFTER(MSEC(CAR_PASSING_TIME), self, exit_bridge, 0);
	//manage_lights(self, 0);
}
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	1f 91       	pop	r17
     238:	0f 91       	pop	r16
     23a:	ff 90       	pop	r15
     23c:	ef 90       	pop	r14
     23e:	df 90       	pop	r13
     240:	cf 90       	pop	r12
     242:	08 95       	ret

00000244 <entry_south>:


void entry_south(Controller *self, int arg0) {
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	ec 01       	movw	r28, r24
	
	self->queues[SOUTH]--;	
     256:	8a 85       	ldd	r24, Y+10	; 0x0a
     258:	9b 85       	ldd	r25, Y+11	; 0x0b
     25a:	01 97       	sbiw	r24, 0x01	; 1
     25c:	9b 87       	std	Y+11, r25	; 0x0b
     25e:	8a 87       	std	Y+10, r24	; 0x0a
	self->cars_allowed--;
     260:	88 89       	ldd	r24, Y+16	; 0x10
     262:	81 50       	subi	r24, 0x01	; 1
     264:	88 8b       	std	Y+16, r24	; 0x10
	self->current_cars++;
     266:	ce 84       	ldd	r12, Y+14	; 0x0e
     268:	df 84       	ldd	r13, Y+15	; 0x0f
     26a:	8f ef       	ldi	r24, 0xFF	; 255
     26c:	c8 1a       	sub	r12, r24
     26e:	d8 0a       	sbc	r13, r24
     270:	df 86       	std	Y+15, r13	; 0x0f
     272:	ce 86       	std	Y+14, r12	; 0x0e
	ASYNC(self->gui, update_current, self->current_cars);
     274:	0c 81       	ldd	r16, Y+4	; 0x04
     276:	1d 81       	ldd	r17, Y+5	; 0x05
     278:	81 e9       	ldi	r24, 0x91	; 145
     27a:	e8 2e       	mov	r14, r24
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	f8 2e       	mov	r15, r24
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	a9 01       	movw	r20, r18
     286:	60 e0       	ldi	r22, 0x00	; 0
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	cb 01       	movw	r24, r22
     28c:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <async>
	ASYNC(self->gui, update_south, self->queues[SOUTH]);
     290:	ca 84       	ldd	r12, Y+10	; 0x0a
     292:	db 84       	ldd	r13, Y+11	; 0x0b
     294:	0c 81       	ldd	r16, Y+4	; 0x04
     296:	1d 81       	ldd	r17, Y+5	; 0x05
     298:	99 e9       	ldi	r25, 0x99	; 153
     29a:	e9 2e       	mov	r14, r25
     29c:	92 e0       	ldi	r25, 0x02	; 2
     29e:	f9 2e       	mov	r15, r25
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	a9 01       	movw	r20, r18
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	cb 01       	movw	r24, r22
     2ac:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <async>
	
	SEND(MSEC(NEXT_CAR_TIME), MSEC(NEXT_CAR_TIME+TIMING_WINDOW), self, manage_lights, 0);
     2b0:	c1 2c       	mov	r12, r1
     2b2:	d1 2c       	mov	r13, r1
     2b4:	27 eb       	ldi	r18, 0xB7	; 183
     2b6:	e2 2e       	mov	r14, r18
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	f2 2e       	mov	r15, r18
     2bc:	8e 01       	movw	r16, r28
     2be:	2c e2       	ldi	r18, 0x2C	; 44
     2c0:	30 e8       	ldi	r19, 0x80	; 128
     2c2:	40 e0       	ldi	r20, 0x00	; 0
     2c4:	50 e0       	ldi	r21, 0x00	; 0
     2c6:	62 e1       	ldi	r22, 0x12	; 18
     2c8:	7a e7       	ldi	r23, 0x7A	; 122
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <async>
	SEND(MSEC(CAR_PASSING_TIME), MSEC(CAR_PASSING_TIME+TIMING_WINDOW), self, exit_bridge, 0);
     2d2:	3c e8       	ldi	r19, 0x8C	; 140
     2d4:	e3 2e       	mov	r14, r19
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	f3 2e       	mov	r15, r19
     2da:	24 e7       	ldi	r18, 0x74	; 116
     2dc:	38 e6       	ldi	r19, 0x68	; 104
     2de:	42 e0       	ldi	r20, 0x02	; 2
     2e0:	50 e0       	ldi	r21, 0x00	; 0
     2e2:	6a e5       	ldi	r22, 0x5A	; 90
     2e4:	72 e6       	ldi	r23, 0x62	; 98
     2e6:	82 e0       	ldi	r24, 0x02	; 2
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <async>
	//AFTER(MSEC(CAR_PASSING_TIME), self, exit_bridge, 0);
	//manage_lights(self, 0);
}
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	1f 91       	pop	r17
     2f4:	0f 91       	pop	r16
     2f6:	ff 90       	pop	r15
     2f8:	ef 90       	pop	r14
     2fa:	df 90       	pop	r13
     2fc:	cf 90       	pop	r12
     2fe:	08 95       	ret

00000300 <send_lightstatus>:
	if (self->current_cars == 0) {
		empty_bridge(self, 0);
	}
}

void send_lightstatus(Controller *self, int arg0) {
     300:	cf 92       	push	r12
     302:	df 92       	push	r13
     304:	ef 92       	push	r14
     306:	ff 92       	push	r15
     308:	0f 93       	push	r16
     30a:	1f 93       	push	r17
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	ec 01       	movw	r28, r24
		
		// Form output according to standard given
		if (self->lights[NORTH] == GREEN) {
     312:	8c 85       	ldd	r24, Y+12	; 0x0c
     314:	81 30       	cpi	r24, 0x01	; 1
     316:	11 f1       	breq	.+68     	; 0x35c <send_lightstatus+0x5c>
			self->output |= (1<<NORTH_GREEN);
		}
		else {
			self->output |= (1<<NORTH_RED);
     318:	8b 89       	ldd	r24, Y+19	; 0x13
     31a:	82 60       	ori	r24, 0x02	; 2
     31c:	8b 8b       	std	Y+19, r24	; 0x13
		}
		if (self->lights[SOUTH] == GREEN) {
     31e:	9d 85       	ldd	r25, Y+13	; 0x0d
     320:	91 30       	cpi	r25, 0x01	; 1
     322:	11 f1       	breq	.+68     	; 0x368 <send_lightstatus+0x68>
			self->output |= (1<<SOUTH_GREEN);
		}
		else {
			self->output |= (1<<SOUTH_RED);
     324:	88 60       	ori	r24, 0x08	; 8
     326:	8b 8b       	std	Y+19, r24	; 0x13
		}
		
		// Send output to serial writer and write to port
		ASYNC(self->writer, usart_write, self->output);
     328:	c8 2e       	mov	r12, r24
     32a:	d1 2c       	mov	r13, r1
     32c:	0e 81       	ldd	r16, Y+6	; 0x06
     32e:	1f 81       	ldd	r17, Y+7	; 0x07
     330:	86 e5       	ldi	r24, 0x56	; 86
     332:	e8 2e       	mov	r14, r24
     334:	84 e0       	ldi	r24, 0x04	; 4
     336:	f8 2e       	mov	r15, r24
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	a9 01       	movw	r20, r18
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	cb 01       	movw	r24, r22
     344:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <async>
		self->output = 0;	// reset output
     348:	1b 8a       	std	Y+19, r1	; 0x13
}
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	ff 90       	pop	r15
     354:	ef 90       	pop	r14
     356:	df 90       	pop	r13
     358:	cf 90       	pop	r12
     35a:	08 95       	ret

void send_lightstatus(Controller *self, int arg0) {
		
		// Form output according to standard given
		if (self->lights[NORTH] == GREEN) {
			self->output |= (1<<NORTH_GREEN);
     35c:	8b 89       	ldd	r24, Y+19	; 0x13
     35e:	81 60       	ori	r24, 0x01	; 1
     360:	8b 8b       	std	Y+19, r24	; 0x13
		}
		else {
			self->output |= (1<<NORTH_RED);
		}
		if (self->lights[SOUTH] == GREEN) {
     362:	9d 85       	ldd	r25, Y+13	; 0x0d
     364:	91 30       	cpi	r25, 0x01	; 1
     366:	f1 f6       	brne	.-68     	; 0x324 <send_lightstatus+0x24>
			self->output |= (1<<SOUTH_GREEN);
     368:	84 60       	ori	r24, 0x04	; 4
     36a:	8b 8b       	std	Y+19, r24	; 0x13
     36c:	dd cf       	rjmp	.-70     	; 0x328 <send_lightstatus+0x28>

0000036e <manage_lights>:
	/***********************/
	/* Empty current queue */
	/***********************/
	
	// If current queue is empty
	if (self->queues[self->curr_dir] == 0) {
     36e:	fc 01       	movw	r30, r24
     370:	61 89       	ldd	r22, Z+17	; 0x11
     372:	46 2f       	mov	r20, r22
     374:	50 e0       	ldi	r21, 0x00	; 0
     376:	fa 01       	movw	r30, r20
     378:	34 96       	adiw	r30, 0x04	; 4
     37a:	ee 0f       	add	r30, r30
     37c:	ff 1f       	adc	r31, r31
     37e:	e8 0f       	add	r30, r24
     380:	f9 1f       	adc	r31, r25
     382:	20 81       	ld	r18, Z
     384:	31 81       	ldd	r19, Z+1	; 0x01
     386:	23 2b       	or	r18, r19
     388:	99 f4       	brne	.+38     	; 0x3b0 <manage_lights+0x42>
		
		// If the other queue isn't empty
		if(self->queues[!self->curr_dir] > 0) {
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	61 11       	cpse	r22, r1
     390:	2b c0       	rjmp	.+86     	; 0x3e8 <manage_lights+0x7a>
     392:	f9 01       	movw	r30, r18
     394:	34 96       	adiw	r30, 0x04	; 4
     396:	ee 0f       	add	r30, r30
     398:	ff 1f       	adc	r31, r31
     39a:	e8 0f       	add	r30, r24
     39c:	f9 1f       	adc	r31, r25
     39e:	20 81       	ld	r18, Z
     3a0:	31 81       	ldd	r19, Z+1	; 0x01
			self->lights[self->curr_dir] = RED;		// Simply to avoid 	
     3a2:	fc 01       	movw	r30, r24
	
	// If current queue is empty
	if (self->queues[self->curr_dir] == 0) {
		
		// If the other queue isn't empty
		if(self->queues[!self->curr_dir] > 0) {
     3a4:	12 16       	cp	r1, r18
     3a6:	13 06       	cpc	r1, r19
     3a8:	14 f5       	brge	.+68     	; 0x3ee <manage_lights+0x80>
			self->lights[self->curr_dir] = RED;		// Simply to avoid 	
     3aa:	e4 0f       	add	r30, r20
     3ac:	f5 1f       	adc	r31, r21
     3ae:	14 86       	std	Z+12, r1	; 0x0c
	/********************/
	/* Starvation logic */
	/********************/
	
	// If we have allowed the maximum cars allowed to avoid starvation
	if(self->cars_allowed == 0) {
     3b0:	fc 01       	movw	r30, r24
     3b2:	20 89       	ldd	r18, Z+16	; 0x10
     3b4:	21 11       	cpse	r18, r1
     3b6:	14 c0       	rjmp	.+40     	; 0x3e0 <manage_lights+0x72>
		
		// If queue from opposite direction is empty
		if(self->queues[!self->curr_dir] == 0) {
     3b8:	21 e0       	ldi	r18, 0x01	; 1
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	66 23       	and	r22, r22
     3be:	11 f0       	breq	.+4      	; 0x3c4 <manage_lights+0x56>
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	f9 01       	movw	r30, r18
     3c6:	34 96       	adiw	r30, 0x04	; 4
     3c8:	ee 0f       	add	r30, r30
     3ca:	ff 1f       	adc	r31, r31
     3cc:	e8 0f       	add	r30, r24
     3ce:	f9 1f       	adc	r31, r25
     3d0:	20 81       	ld	r18, Z
     3d2:	31 81       	ldd	r19, Z+1	; 0x01
     3d4:	23 2b       	or	r18, r19
     3d6:	c1 f0       	breq	.+48     	; 0x408 <__DATA_REGION_LENGTH__+0x8>
			self->cars_allowed ++;						// Allow another car from this direction
		}
		// If queue from opposite direction is not empty
		else {
			self->lights[self->curr_dir] = RED;			// Set this light to red
     3d8:	fc 01       	movw	r30, r24
     3da:	e4 0f       	add	r30, r20
     3dc:	f5 1f       	adc	r31, r21
     3de:	14 86       	std	Z+12, r1	; 0x0c
		}
	}	
		
	send_lightstatus(self, 0);
     3e0:	60 e0       	ldi	r22, 0x00	; 0
     3e2:	70 e0       	ldi	r23, 0x00	; 0
     3e4:	0c 94 80 01 	jmp	0x300	; 0x300 <send_lightstatus>
	
	// If current queue is empty
	if (self->queues[self->curr_dir] == 0) {
		
		// If the other queue isn't empty
		if(self->queues[!self->curr_dir] > 0) {
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	d2 cf       	rjmp	.-92     	; 0x392 <manage_lights+0x24>
			self->lights[self->curr_dir] = RED;		// Simply to avoid 	
		}
		
		
		//If queue in opposite direction is empty and no cars are on the bridge
		if(self->queues[!self->curr_dir] == 0 && self->current_cars == 0) {
     3ee:	23 2b       	or	r18, r19
     3f0:	91 f4       	brne	.+36     	; 0x416 <__DATA_REGION_LENGTH__+0x16>
     3f2:	26 85       	ldd	r18, Z+14	; 0x0e
     3f4:	37 85       	ldd	r19, Z+15	; 0x0f
     3f6:	23 2b       	or	r18, r19
     3f8:	19 f4       	brne	.+6      	; 0x400 <__DATA_REGION_LENGTH__>
			self->lights[NORTH] = RED;
     3fa:	14 86       	std	Z+12, r1	; 0x0c
			self->lights[SOUTH] = RED;
     3fc:	15 86       	std	Z+13, r1	; 0x0d
			self->active = false;				// deactivate
     3fe:	12 8a       	std	Z+18, r1	; 0x12
	/********************/
	/* Starvation logic */
	/********************/
	
	// If we have allowed the maximum cars allowed to avoid starvation
	if(self->cars_allowed == 0) {
     400:	fc 01       	movw	r30, r24
     402:	20 89       	ldd	r18, Z+16	; 0x10
     404:	21 11       	cpse	r18, r1
     406:	ec cf       	rjmp	.-40     	; 0x3e0 <manage_lights+0x72>
		
		// If queue from opposite direction is empty
		if(self->queues[!self->curr_dir] == 0) {
			self->cars_allowed ++;						// Allow another car from this direction
     408:	21 e0       	ldi	r18, 0x01	; 1
     40a:	fc 01       	movw	r30, r24
     40c:	20 8b       	std	Z+16, r18	; 0x10
		else {
			self->lights[self->curr_dir] = RED;			// Set this light to red
		}
	}	
		
	send_lightstatus(self, 0);
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	0c 94 80 01 	jmp	0x300	; 0x300 <send_lightstatus>
	/********************/
	/* Starvation logic */
	/********************/
	
	// If we have allowed the maximum cars allowed to avoid starvation
	if(self->cars_allowed == 0) {
     416:	20 89       	ldd	r18, Z+16	; 0x10
     418:	22 23       	and	r18, r18
     41a:	f1 f2       	breq	.-68     	; 0x3d8 <manage_lights+0x6a>
     41c:	e1 cf       	rjmp	.-62     	; 0x3e0 <manage_lights+0x72>

0000041e <enqueue_north>:
 *  Author: shirt
 */ 

#include "Controller.h"

void enqueue_north(Controller *self, int arg0) {
     41e:	cf 92       	push	r12
     420:	df 92       	push	r13
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	ec 01       	movw	r28, r24

	self->queues[NORTH]++;	// car is added to north queue
     430:	c8 84       	ldd	r12, Y+8	; 0x08
     432:	d9 84       	ldd	r13, Y+9	; 0x09
     434:	8f ef       	ldi	r24, 0xFF	; 255
     436:	c8 1a       	sub	r12, r24
     438:	d8 0a       	sbc	r13, r24
     43a:	d9 86       	std	Y+9, r13	; 0x09
     43c:	c8 86       	std	Y+8, r12	; 0x08
	ASYNC(self->gui, update_north, self->queues[NORTH]);
     43e:	0c 81       	ldd	r16, Y+4	; 0x04
     440:	1d 81       	ldd	r17, Y+5	; 0x05
     442:	89 e8       	ldi	r24, 0x89	; 137
     444:	e8 2e       	mov	r14, r24
     446:	82 e0       	ldi	r24, 0x02	; 2
     448:	f8 2e       	mov	r15, r24
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	a9 01       	movw	r20, r18
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	cb 01       	movw	r24, r22
     456:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <async>
	// If controller isn't active, both lights are red and bridge is empty, start it up again
	if(!self->active) {
     45a:	8a 89       	ldd	r24, Y+18	; 0x12
     45c:	88 23       	and	r24, r24
     45e:	49 f0       	breq	.+18     	; 0x472 <enqueue_north+0x54>
		self->cars_allowed = MAX_CARS_ON_BRIDGE;
		self->curr_dir = NORTH;
		manage_lights(self, 0);
	}
	
}
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	1f 91       	pop	r17
     466:	0f 91       	pop	r16
     468:	ff 90       	pop	r15
     46a:	ef 90       	pop	r14
     46c:	df 90       	pop	r13
     46e:	cf 90       	pop	r12
     470:	08 95       	ret

	self->queues[NORTH]++;	// car is added to north queue
	ASYNC(self->gui, update_north, self->queues[NORTH]);
	// If controller isn't active, both lights are red and bridge is empty, start it up again
	if(!self->active) {
		self->active = true;
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	8a 8b       	std	Y+18, r24	; 0x12
		self->lights[NORTH] = GREEN;
     476:	8c 87       	std	Y+12, r24	; 0x0c
		self->cars_allowed = MAX_CARS_ON_BRIDGE;
     478:	85 e0       	ldi	r24, 0x05	; 5
     47a:	88 8b       	std	Y+16, r24	; 0x10
		self->curr_dir = NORTH;
     47c:	19 8a       	std	Y+17, r1	; 0x11
		manage_lights(self, 0);
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	ce 01       	movw	r24, r28
	}
	
}
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	ff 90       	pop	r15
     48e:	ef 90       	pop	r14
     490:	df 90       	pop	r13
     492:	cf 90       	pop	r12
	if(!self->active) {
		self->active = true;
		self->lights[NORTH] = GREEN;
		self->cars_allowed = MAX_CARS_ON_BRIDGE;
		self->curr_dir = NORTH;
		manage_lights(self, 0);
     494:	0c 94 b7 01 	jmp	0x36e	; 0x36e <manage_lights>

00000498 <enqueue_south>:
	}
	
}

void enqueue_south(Controller *self, int arg0) {
     498:	cf 92       	push	r12
     49a:	df 92       	push	r13
     49c:	ef 92       	push	r14
     49e:	ff 92       	push	r15
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	ec 01       	movw	r28, r24

	self->queues[SOUTH]++;
     4aa:	ca 84       	ldd	r12, Y+10	; 0x0a
     4ac:	db 84       	ldd	r13, Y+11	; 0x0b
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	c8 1a       	sub	r12, r24
     4b2:	d8 0a       	sbc	r13, r24
     4b4:	db 86       	std	Y+11, r13	; 0x0b
     4b6:	ca 86       	std	Y+10, r12	; 0x0a
	ASYNC(self->gui, update_south, self->queues[SOUTH]);
     4b8:	0c 81       	ldd	r16, Y+4	; 0x04
     4ba:	1d 81       	ldd	r17, Y+5	; 0x05
     4bc:	89 e9       	ldi	r24, 0x99	; 153
     4be:	e8 2e       	mov	r14, r24
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	f8 2e       	mov	r15, r24
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	a9 01       	movw	r20, r18
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	cb 01       	movw	r24, r22
     4d0:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <async>
	if(!self->active) {
     4d4:	8a 89       	ldd	r24, Y+18	; 0x12
     4d6:	88 23       	and	r24, r24
     4d8:	49 f0       	breq	.+18     	; 0x4ec <enqueue_south+0x54>
		self->cars_allowed = MAX_CARS_ON_BRIDGE;
		self->curr_dir = SOUTH;
		manage_lights(self, 0);
	}
	
}
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	0f 91       	pop	r16
     4e2:	ff 90       	pop	r15
     4e4:	ef 90       	pop	r14
     4e6:	df 90       	pop	r13
     4e8:	cf 90       	pop	r12
     4ea:	08 95       	ret
void enqueue_south(Controller *self, int arg0) {

	self->queues[SOUTH]++;
	ASYNC(self->gui, update_south, self->queues[SOUTH]);
	if(!self->active) {
		self->active = true;
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	8a 8b       	std	Y+18, r24	; 0x12
		self->lights[SOUTH] = GREEN;
     4f0:	8d 87       	std	Y+13, r24	; 0x0d
		self->cars_allowed = MAX_CARS_ON_BRIDGE;
     4f2:	95 e0       	ldi	r25, 0x05	; 5
     4f4:	98 8b       	std	Y+16, r25	; 0x10
		self->curr_dir = SOUTH;
     4f6:	89 8b       	std	Y+17, r24	; 0x11
		manage_lights(self, 0);
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	ce 01       	movw	r24, r28
	}
	
}
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	ff 90       	pop	r15
     508:	ef 90       	pop	r14
     50a:	df 90       	pop	r13
     50c:	cf 90       	pop	r12
	if(!self->active) {
		self->active = true;
		self->lights[SOUTH] = GREEN;
		self->cars_allowed = MAX_CARS_ON_BRIDGE;
		self->curr_dir = SOUTH;
		manage_lights(self, 0);
     50e:	0c 94 b7 01 	jmp	0x36e	; 0x36e <manage_lights>

00000512 <update_north>:

#include "GUI.h"

/* Print north queue at positions 0 and 1 */
void update_north(GUI *self, int arg0) {
	printAt(arg0, 0);
     512:	07 2e       	mov	r0, r23
     514:	00 0c       	add	r0, r0
     516:	88 0b       	sbc	r24, r24
     518:	99 0b       	sbc	r25, r25
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	0c 94 cf 03 	jmp	0x79e	; 0x79e <printAt>

00000522 <update_current>:
}

/* Print current bridge cars at position 2 and 3 */
void update_current(GUI *self, int arg0) {	
	printAt(arg0, 2);
     522:	07 2e       	mov	r0, r23
     524:	00 0c       	add	r0, r0
     526:	88 0b       	sbc	r24, r24
     528:	99 0b       	sbc	r25, r25
     52a:	42 e0       	ldi	r20, 0x02	; 2
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	0c 94 cf 03 	jmp	0x79e	; 0x79e <printAt>

00000532 <update_south>:
}

/* Print south queue at positions 4 and 5*/
void update_south(GUI *self, int arg0) {
	printAt(arg0, 4);
     532:	07 2e       	mov	r0, r23
     534:	00 0c       	add	r0, r0
     536:	88 0b       	sbc	r24, r24
     538:	99 0b       	sbc	r25, r25
     53a:	44 e0       	ldi	r20, 0x04	; 4
     53c:	50 e0       	ldi	r21, 0x00	; 0
     53e:	0c 94 cf 03 	jmp	0x79e	; 0x79e <printAt>

00000542 <start_gui>:
}

// Makes sure something is printed before any reaction has taken place
void start_gui(GUI *self, int arg0) {
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	ec 01       	movw	r28, r24
	if (!self->initialized) {
     548:	8c 81       	ldd	r24, Y+4	; 0x04
     54a:	81 11       	cpse	r24, r1
     54c:	04 c0       	rjmp	.+8      	; 0x556 <start_gui+0x14>
		initLCD();
     54e:	0e 94 be 03 	call	0x77c	; 0x77c <initLCD>
		self->initialized = 1;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	8c 83       	std	Y+4, r24	; 0x04
	}
	printAt(0, 0);
     556:	40 e0       	ldi	r20, 0x00	; 0
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	cb 01       	movw	r24, r22
     560:	0e 94 cf 03 	call	0x79e	; 0x79e <printAt>
	printAt(0, 2);
     564:	42 e0       	ldi	r20, 0x02	; 2
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	cb 01       	movw	r24, r22
     56e:	0e 94 cf 03 	call	0x79e	; 0x79e <printAt>
	printAt(0, 4);
     572:	44 e0       	ldi	r20, 0x04	; 4
     574:	50 e0       	ldi	r21, 0x00	; 0
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	70 e0       	ldi	r23, 0x00	; 0
     57a:	cb 01       	movw	r24, r22
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
		initLCD();
		self->initialized = 1;
	}
	printAt(0, 0);
	printAt(0, 2);
	printAt(0, 4);
     580:	0c 94 cf 03 	jmp	0x79e	; 0x79e <printAt>

00000584 <parse_interrupt>:

#include "InterruptHandler.h"

void parse_interrupt(InterruptHandler *self, int arg0) {
     584:	af 92       	push	r10
     586:	bf 92       	push	r11
     588:	cf 92       	push	r12
     58a:	df 92       	push	r13
     58c:	ef 92       	push	r14
     58e:	ff 92       	push	r15
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	5c 01       	movw	r10, r24
	
	
	/* Reads from USART port and interprets input according to standards in lab specs*/
	while ( !(UCSR0A & (1 << RXC0)) );
     598:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
     59c:	87 ff       	sbrs	r24, 7
     59e:	fc cf       	rjmp	.-8      	; 0x598 <parse_interrupt+0x14>
	uint8_t data = UDR0;
     5a0:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
	
	if ((data >> NORTH_ARRIVAL_BIT ) & 1) {
     5a4:	c0 fd       	sbrc	r28, 0
     5a6:	45 c0       	rjmp	.+138    	; 0x632 <parse_interrupt+0xae>
		ASYNC(self->controller, enqueue_north, 0);
	}
	if ((data >> NORTH_ENTRY_BIT ) & 1) {
     5a8:	c1 fd       	sbrc	r28, 1
     5aa:	31 c0       	rjmp	.+98     	; 0x60e <parse_interrupt+0x8a>
		ASYNC(self->controller, entry_north, 0);
	}
	if ((data >> SOUTH_ARRIVAL_BIT ) & 1) {
     5ac:	c2 fd       	sbrc	r28, 2
     5ae:	1d c0       	rjmp	.+58     	; 0x5ea <parse_interrupt+0x66>
		ASYNC(self->controller, enqueue_south, 0);
	}
	if ((data >> SOUTH_ENTRY_BIT) & 1) {
     5b0:	c3 ff       	sbrs	r28, 3
     5b2:	11 c0       	rjmp	.+34     	; 0x5d6 <parse_interrupt+0x52>
		ASYNC(self->controller, entry_south, 0);
     5b4:	f5 01       	movw	r30, r10
     5b6:	04 81       	ldd	r16, Z+4	; 0x04
     5b8:	15 81       	ldd	r17, Z+5	; 0x05
     5ba:	c1 2c       	mov	r12, r1
     5bc:	d1 2c       	mov	r13, r1
     5be:	82 e2       	ldi	r24, 0x22	; 34
     5c0:	e8 2e       	mov	r14, r24
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	f8 2e       	mov	r15, r24
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	a9 01       	movw	r20, r18
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	cb 01       	movw	r24, r22
     5d2:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <async>
	}

	
}
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	df 90       	pop	r13
     5e2:	cf 90       	pop	r12
     5e4:	bf 90       	pop	r11
     5e6:	af 90       	pop	r10
     5e8:	08 95       	ret
	}
	if ((data >> NORTH_ENTRY_BIT ) & 1) {
		ASYNC(self->controller, entry_north, 0);
	}
	if ((data >> SOUTH_ARRIVAL_BIT ) & 1) {
		ASYNC(self->controller, enqueue_south, 0);
     5ea:	f5 01       	movw	r30, r10
     5ec:	04 81       	ldd	r16, Z+4	; 0x04
     5ee:	15 81       	ldd	r17, Z+5	; 0x05
     5f0:	c1 2c       	mov	r12, r1
     5f2:	d1 2c       	mov	r13, r1
     5f4:	9c e4       	ldi	r25, 0x4C	; 76
     5f6:	e9 2e       	mov	r14, r25
     5f8:	92 e0       	ldi	r25, 0x02	; 2
     5fa:	f9 2e       	mov	r15, r25
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	a9 01       	movw	r20, r18
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	cb 01       	movw	r24, r22
     608:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <async>
     60c:	d1 cf       	rjmp	.-94     	; 0x5b0 <parse_interrupt+0x2c>
	
	if ((data >> NORTH_ARRIVAL_BIT ) & 1) {
		ASYNC(self->controller, enqueue_north, 0);
	}
	if ((data >> NORTH_ENTRY_BIT ) & 1) {
		ASYNC(self->controller, entry_north, 0);
     60e:	f5 01       	movw	r30, r10
     610:	04 81       	ldd	r16, Z+4	; 0x04
     612:	15 81       	ldd	r17, Z+5	; 0x05
     614:	c1 2c       	mov	r12, r1
     616:	d1 2c       	mov	r13, r1
     618:	24 ec       	ldi	r18, 0xC4	; 196
     61a:	e2 2e       	mov	r14, r18
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	f2 2e       	mov	r15, r18
     620:	20 e0       	ldi	r18, 0x00	; 0
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	a9 01       	movw	r20, r18
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	cb 01       	movw	r24, r22
     62c:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <async>
     630:	bd cf       	rjmp	.-134    	; 0x5ac <parse_interrupt+0x28>
	/* Reads from USART port and interprets input according to standards in lab specs*/
	while ( !(UCSR0A & (1 << RXC0)) );
	uint8_t data = UDR0;
	
	if ((data >> NORTH_ARRIVAL_BIT ) & 1) {
		ASYNC(self->controller, enqueue_north, 0);
     632:	f5 01       	movw	r30, r10
     634:	04 81       	ldd	r16, Z+4	; 0x04
     636:	15 81       	ldd	r17, Z+5	; 0x05
     638:	c1 2c       	mov	r12, r1
     63a:	d1 2c       	mov	r13, r1
     63c:	3f e0       	ldi	r19, 0x0F	; 15
     63e:	e3 2e       	mov	r14, r19
     640:	32 e0       	ldi	r19, 0x02	; 2
     642:	f3 2e       	mov	r15, r19
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	a9 01       	movw	r20, r18
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	cb 01       	movw	r24, r22
     650:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <async>
     654:	a9 cf       	rjmp	.-174    	; 0x5a8 <parse_interrupt+0x24>

00000656 <init>:
	}

	
}

void init(InterruptHandler *self, int arg0) {
     656:	cf 92       	push	r12
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
	
	// Initialize USART
	unsigned int ubrr = MYUBRR;
	
	UBRR0H = ubrr>>8;
     662:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
	UBRR0L = ubrr;
     666:	23 e3       	ldi	r18, 0x33	; 51
     668:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     66c:	28 e9       	ldi	r18, 0x98	; 152
     66e:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
	UCSR0C = (1<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00);
     672:	2e e0       	ldi	r18, 0x0E	; 14
     674:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fc0c2>
	
	ASYNC(self->controller->gui, start_gui, 0); // init the gui
     678:	dc 01       	movw	r26, r24
     67a:	14 96       	adiw	r26, 0x04	; 4
     67c:	ed 91       	ld	r30, X+
     67e:	fc 91       	ld	r31, X
     680:	15 97       	sbiw	r26, 0x05	; 5
     682:	04 81       	ldd	r16, Z+4	; 0x04
     684:	15 81       	ldd	r17, Z+5	; 0x05
     686:	c1 2c       	mov	r12, r1
     688:	d1 2c       	mov	r13, r1
     68a:	81 ea       	ldi	r24, 0xA1	; 161
     68c:	e8 2e       	mov	r14, r24
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	f8 2e       	mov	r15, r24
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	a9 01       	movw	r20, r18
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	cb 01       	movw	r24, r22
     69e:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <async>
     6a2:	1f 91       	pop	r17
     6a4:	0f 91       	pop	r16
     6a6:	ff 90       	pop	r15
     6a8:	ef 90       	pop	r14
     6aa:	df 90       	pop	r13
     6ac:	cf 90       	pop	r12
     6ae:	08 95       	ret

000006b0 <writeChar.part.0>:
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	ab 01       	movw	r20, r22
     6b6:	41 70       	andi	r20, 0x01	; 1
     6b8:	50 78       	andi	r21, 0x80	; 128
     6ba:	57 fd       	sbrc	r21, 7
     6bc:	54 c0       	rjmp	.+168    	; 0x766 <writeChar.part.0+0xb6>
     6be:	77 fd       	sbrc	r23, 7
     6c0:	5a c0       	rjmp	.+180    	; 0x776 <writeChar.part.0+0xc6>
     6c2:	75 95       	asr	r23
     6c4:	67 95       	ror	r22
     6c6:	fb 01       	movw	r30, r22
     6c8:	e4 51       	subi	r30, 0x14	; 20
     6ca:	ff 4f       	sbci	r31, 0xFF	; 255
     6cc:	28 2f       	mov	r18, r24
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	20 53       	subi	r18, 0x30	; 48
     6d2:	31 09       	sbc	r19, r1
     6d4:	2a 30       	cpi	r18, 0x0A	; 10
     6d6:	31 05       	cpc	r19, r1
     6d8:	08 f0       	brcs	.+2      	; 0x6dc <writeChar.part.0+0x2c>
     6da:	42 c0       	rjmp	.+132    	; 0x760 <writeChar.part.0+0xb0>
     6dc:	80 53       	subi	r24, 0x30	; 48
     6de:	a8 2f       	mov	r26, r24
     6e0:	b0 e0       	ldi	r27, 0x00	; 0
     6e2:	aa 0f       	add	r26, r26
     6e4:	bb 1f       	adc	r27, r27
     6e6:	a8 5f       	subi	r26, 0xF8	; 248
     6e8:	be 4f       	sbci	r27, 0xFE	; 254
     6ea:	0d 90       	ld	r0, X+
     6ec:	bc 91       	ld	r27, X
     6ee:	a0 2d       	mov	r26, r0
     6f0:	44 0f       	add	r20, r20
     6f2:	55 1f       	adc	r21, r21
     6f4:	44 0f       	add	r20, r20
     6f6:	55 1f       	adc	r21, r21
     6f8:	8f e0       	ldi	r24, 0x0F	; 15
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	04 2e       	mov	r0, r20
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <writeChar.part.0+0x52>
     700:	88 0f       	add	r24, r24
     702:	0a 94       	dec	r0
     704:	ea f7       	brpl	.-6      	; 0x700 <writeChar.part.0+0x50>
     706:	d8 2f       	mov	r29, r24
     708:	c8 2f       	mov	r28, r24
     70a:	c0 95       	com	r28
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	86 e0       	ldi	r24, 0x06	; 6
     712:	9a 2f       	mov	r25, r26
     714:	9f 70       	andi	r25, 0x0F	; 15
     716:	30 81       	ld	r19, Z
     718:	23 2f       	mov	r18, r19
     71a:	04 2e       	mov	r0, r20
     71c:	01 c0       	rjmp	.+2      	; 0x720 <writeChar.part.0+0x70>
     71e:	22 0f       	add	r18, r18
     720:	0a 94       	dec	r0
     722:	ea f7       	brpl	.-6      	; 0x71e <writeChar.part.0+0x6e>
     724:	82 23       	and	r24, r18
     726:	89 2b       	or	r24, r25
     728:	04 2e       	mov	r0, r20
     72a:	01 c0       	rjmp	.+2      	; 0x72e <writeChar.part.0+0x7e>
     72c:	88 0f       	add	r24, r24
     72e:	0a 94       	dec	r0
     730:	ea f7       	brpl	.-6      	; 0x72c <writeChar.part.0+0x7c>
     732:	8d 23       	and	r24, r29
     734:	90 81       	ld	r25, Z
     736:	9c 23       	and	r25, r28
     738:	90 83       	st	Z, r25
     73a:	90 81       	ld	r25, Z
     73c:	89 2b       	or	r24, r25
     73e:	80 83       	st	Z, r24
     740:	b2 95       	swap	r27
     742:	a2 95       	swap	r26
     744:	af 70       	andi	r26, 0x0F	; 15
     746:	ab 27       	eor	r26, r27
     748:	bf 70       	andi	r27, 0x0F	; 15
     74a:	ab 27       	eor	r26, r27
     74c:	35 96       	adiw	r30, 0x05	; 5
     74e:	6f 5f       	subi	r22, 0xFF	; 255
     750:	7f 4f       	sbci	r23, 0xFF	; 255
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	64 30       	cpi	r22, 0x04	; 4
     756:	71 05       	cpc	r23, r1
     758:	e1 f6       	brne	.-72     	; 0x712 <writeChar.part.0+0x62>
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret
     760:	a0 e0       	ldi	r26, 0x00	; 0
     762:	b0 e0       	ldi	r27, 0x00	; 0
     764:	c5 cf       	rjmp	.-118    	; 0x6f0 <writeChar.part.0+0x40>
     766:	41 50       	subi	r20, 0x01	; 1
     768:	51 09       	sbc	r21, r1
     76a:	4e 6f       	ori	r20, 0xFE	; 254
     76c:	5f 6f       	ori	r21, 0xFF	; 255
     76e:	4f 5f       	subi	r20, 0xFF	; 255
     770:	5f 4f       	sbci	r21, 0xFF	; 255
     772:	77 ff       	sbrs	r23, 7
     774:	a6 cf       	rjmp	.-180    	; 0x6c2 <writeChar.part.0+0x12>
     776:	6f 5f       	subi	r22, 0xFF	; 255
     778:	7f 4f       	sbci	r23, 0xFF	; 255
     77a:	a3 cf       	rjmp	.-186    	; 0x6c2 <writeChar.part.0+0x12>

0000077c <initLCD>:
     77c:	e1 e6       	ldi	r30, 0x61	; 97
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	80 e8       	ldi	r24, 0x80	; 128
     782:	80 83       	st	Z, r24
     784:	10 82       	st	Z, r1
     786:	87 eb       	ldi	r24, 0xB7	; 183
     788:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
     78c:	87 e0       	ldi	r24, 0x07	; 7
     78e:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
     792:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     796:	80 ec       	ldi	r24, 0xC0	; 192
     798:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     79c:	08 95       	ret

0000079e <printAt>:
     79e:	cf 92       	push	r12
     7a0:	df 92       	push	r13
     7a2:	ef 92       	push	r14
     7a4:	ff 92       	push	r15
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	6b 01       	movw	r12, r22
     7ac:	7c 01       	movw	r14, r24
     7ae:	ea 01       	movw	r28, r20
     7b0:	46 30       	cpi	r20, 0x06	; 6
     7b2:	51 05       	cpc	r21, r1
     7b4:	f4 f0       	brlt	.+60     	; 0x7f2 <printAt+0x54>
     7b6:	21 96       	adiw	r28, 0x01	; 1
     7b8:	c6 30       	cpi	r28, 0x06	; 6
     7ba:	d1 05       	cpc	r29, r1
     7bc:	3c f0       	brlt	.+14     	; 0x7cc <printAt+0x2e>
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	08 95       	ret
     7cc:	c7 01       	movw	r24, r14
     7ce:	b6 01       	movw	r22, r12
     7d0:	2a e0       	ldi	r18, 0x0A	; 10
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	0e 94 b3 10 	call	0x2166	; 0x2166 <__divmodsi4>
     7dc:	86 2f       	mov	r24, r22
     7de:	be 01       	movw	r22, r28
     7e0:	80 5d       	subi	r24, 0xD0	; 208
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	df 90       	pop	r13
     7ec:	cf 90       	pop	r12
     7ee:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <writeChar.part.0>
     7f2:	24 e6       	ldi	r18, 0x64	; 100
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	0e 94 b3 10 	call	0x2166	; 0x2166 <__divmodsi4>
     7fe:	2a e0       	ldi	r18, 0x0A	; 10
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	40 e0       	ldi	r20, 0x00	; 0
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	0e 94 b3 10 	call	0x2166	; 0x2166 <__divmodsi4>
     80a:	be 01       	movw	r22, r28
     80c:	80 e3       	ldi	r24, 0x30	; 48
     80e:	82 0f       	add	r24, r18
     810:	0e 94 58 03 	call	0x6b0	; 0x6b0 <writeChar.part.0>
     814:	d0 cf       	rjmp	.-96     	; 0x7b6 <printAt+0x18>

00000816 <main>:
#include "InterruptHandler.h"
#include "GUI.h"
#include "SerialWriter.h"

int main(void)
{
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
     81e:	a4 97       	sbiw	r28, 0x24	; 36
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	f8 94       	cli
     824:	de bf       	out	0x3e, r29	; 62
     826:	0f be       	out	0x3f, r0	; 63
     828:	cd bf       	out	0x3d, r28	; 61
	//return 0;
	SerialWriter wr = initSerialWriter();
     82a:	19 a2       	std	Y+33, r1	; 0x21
     82c:	18 a2       	std	Y+32, r1	; 0x20
     82e:	1b a2       	std	Y+35, r1	; 0x23
     830:	1a a2       	std	Y+34, r1	; 0x22
     832:	1c a2       	std	Y+36, r1	; 0x24
	GUI gui = initGUI();
     834:	1c 8e       	std	Y+28, r1	; 0x1c
     836:	1b 8e       	std	Y+27, r1	; 0x1b
     838:	1e 8e       	std	Y+30, r1	; 0x1e
     83a:	1d 8e       	std	Y+29, r1	; 0x1d
     83c:	1f 8e       	std	Y+31, r1	; 0x1f
	Controller c = initController(&gui, &wr);
     83e:	1a 82       	std	Y+2, r1	; 0x02
     840:	19 82       	std	Y+1, r1	; 0x01
     842:	1c 82       	std	Y+4, r1	; 0x04
     844:	1b 82       	std	Y+3, r1	; 0x03
     846:	ce 01       	movw	r24, r28
     848:	4b 96       	adiw	r24, 0x1b	; 27
     84a:	9e 83       	std	Y+6, r25	; 0x06
     84c:	8d 83       	std	Y+5, r24	; 0x05
     84e:	05 96       	adiw	r24, 0x05	; 5
     850:	98 87       	std	Y+8, r25	; 0x08
     852:	8f 83       	std	Y+7, r24	; 0x07
     854:	1a 86       	std	Y+10, r1	; 0x0a
     856:	19 86       	std	Y+9, r1	; 0x09
     858:	1c 86       	std	Y+12, r1	; 0x0c
     85a:	1b 86       	std	Y+11, r1	; 0x0b
     85c:	1d 86       	std	Y+13, r1	; 0x0d
     85e:	1e 86       	std	Y+14, r1	; 0x0e
     860:	18 8a       	std	Y+16, r1	; 0x10
     862:	1f 86       	std	Y+15, r1	; 0x0f
     864:	85 e0       	ldi	r24, 0x05	; 5
     866:	89 8b       	std	Y+17, r24	; 0x11
     868:	1a 8a       	std	Y+18, r1	; 0x12
     86a:	1b 8a       	std	Y+19, r1	; 0x13
     86c:	1c 8a       	std	Y+20, r1	; 0x14
    InterruptHandler i = initInterruptHandler(&c);
     86e:	1e 8a       	std	Y+22, r1	; 0x16
     870:	1d 8a       	std	Y+21, r1	; 0x15
     872:	18 8e       	std	Y+24, r1	; 0x18
     874:	1f 8a       	std	Y+23, r1	; 0x17
     876:	ce 01       	movw	r24, r28
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	9a 8f       	std	Y+26, r25	; 0x1a
     87c:	89 8f       	std	Y+25, r24	; 0x19
    INSTALL(&i, parse_interrupt, IRQ_USART0_RX);
     87e:	48 e0       	ldi	r20, 0x08	; 8
     880:	62 ec       	ldi	r22, 0xC2	; 194
     882:	72 e0       	ldi	r23, 0x02	; 2
     884:	44 96       	adiw	r24, 0x14	; 20
     886:	0e 94 7d 10 	call	0x20fa	; 0x20fa <install>
    return TINYTIMBER(&i, init, 0);
     88a:	40 e0       	ldi	r20, 0x00	; 0
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	6b e2       	ldi	r22, 0x2B	; 43
     890:	73 e0       	ldi	r23, 0x03	; 3
     892:	ce 01       	movw	r24, r28
     894:	45 96       	adiw	r24, 0x15	; 21
     896:	0e 94 97 10 	call	0x212e	; 0x212e <tinytimber>
}
     89a:	a4 96       	adiw	r28, 0x24	; 36
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	de bf       	out	0x3e, r29	; 62
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	cd bf       	out	0x3d, r28	; 61
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <usart_write>:

#include "SerialWriter.h"

void usart_write(SerialWriter *self, int arg0) {
	self->output = arg0;
     8ac:	fc 01       	movw	r30, r24
     8ae:	64 83       	std	Z+4, r22	; 0x04
	while ( !(UCSR0A & ( 1<< UDRE0)) );  
     8b0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
     8b4:	85 ff       	sbrs	r24, 5
     8b6:	fc cf       	rjmp	.-8      	; 0x8b0 <usart_write+0x4>
	UDR0 = self->output;
     8b8:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
     8bc:	08 95       	ret

000008be <initialize>:
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <initialize+0x6>
     8c4:	00 d0       	rcall	.+0      	; 0x8c6 <initialize+0x8>
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	8f e0       	ldi	r24, 0x0F	; 15
     8cc:	92 e0       	ldi	r25, 0x02	; 2
     8ce:	2f ee       	ldi	r18, 0xEF	; 239
     8d0:	32 e0       	ldi	r19, 0x02	; 2
     8d2:	fc 01       	movw	r30, r24
     8d4:	70 97       	sbiw	r30, 0x10	; 16
     8d6:	91 83       	std	Z+1, r25	; 0x01
     8d8:	80 83       	st	Z, r24
     8da:	40 96       	adiw	r24, 0x10	; 16
     8dc:	82 17       	cp	r24, r18
     8de:	93 07       	cpc	r25, r19
     8e0:	c1 f7       	brne	.-16     	; 0x8d2 <initialize+0x14>
     8e2:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <messages+0xe1>
     8e6:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <messages+0xe0>
     8ea:	ea e4       	ldi	r30, 0x4A	; 74
     8ec:	f1 e0       	ldi	r31, 0x01	; 1
     8ee:	87 e6       	ldi	r24, 0x67	; 103
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	91 83       	std	Z+1, r25	; 0x01
     8f4:	80 83       	st	Z, r24
     8f6:	84 e8       	ldi	r24, 0x84	; 132
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	96 8f       	std	Z+30, r25	; 0x1e
     8fc:	85 8f       	std	Z+29, r24	; 0x1d
     8fe:	a1 ea       	ldi	r26, 0xA1	; 161
     900:	b1 e0       	ldi	r27, 0x01	; 1
     902:	b3 af       	std	Z+59, r27	; 0x3b
     904:	a2 af       	std	Z+58, r26	; 0x3a
     906:	1d 92       	st	X+, r1
     908:	1c 92       	st	X, r1
     90a:	fa 83       	std	Y+2, r31	; 0x02
     90c:	e9 83       	std	Y+1, r30	; 0x01
     90e:	eb e4       	ldi	r30, 0x4B	; 75
     910:	f3 e0       	ldi	r31, 0x03	; 3
     912:	fc 83       	std	Y+4, r31	; 0x04
     914:	eb 83       	std	Y+3, r30	; 0x03
     916:	89 81       	ldd	r24, Y+1	; 0x01
     918:	9a 81       	ldd	r25, Y+2	; 0x02
     91a:	06 96       	adiw	r24, 0x06	; 6
     91c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <setjmp>
     920:	8b 81       	ldd	r24, Y+3	; 0x03
     922:	9c 81       	ldd	r25, Y+4	; 0x04
     924:	e9 81       	ldd	r30, Y+1	; 0x01
     926:	fa 81       	ldd	r31, Y+2	; 0x02
     928:	97 8b       	std	Z+23, r25	; 0x17
     92a:	86 8b       	std	Z+22, r24	; 0x16
     92c:	91 8f       	std	Z+25, r25	; 0x19
     92e:	80 8f       	std	Z+24, r24	; 0x18
     930:	82 e0       	ldi	r24, 0x02	; 2
     932:	90 e1       	ldi	r25, 0x10	; 16
     934:	94 8f       	std	Z+28, r25	; 0x1c
     936:	83 8f       	std	Z+27, r24	; 0x1b
     938:	15 82       	std	Z+5, r1	; 0x05
     93a:	14 82       	std	Z+4, r1	; 0x04
     93c:	7d 96       	adiw	r30, 0x1d	; 29
     93e:	fa 83       	std	Y+2, r31	; 0x02
     940:	e9 83       	std	Y+1, r30	; 0x01
     942:	eb 81       	ldd	r30, Y+3	; 0x03
     944:	fc 81       	ldd	r31, Y+4	; 0x04
     946:	e0 5a       	subi	r30, 0xA0	; 160
     948:	ff 4f       	sbci	r31, 0xFF	; 255
     94a:	fc 83       	std	Y+4, r31	; 0x04
     94c:	eb 83       	std	Y+3, r30	; 0x03
     94e:	89 81       	ldd	r24, Y+1	; 0x01
     950:	9a 81       	ldd	r25, Y+2	; 0x02
     952:	8e 5b       	subi	r24, 0xBE	; 190
     954:	91 40       	sbci	r25, 0x01	; 1
     956:	f9 f6       	brne	.-66     	; 0x916 <initialize+0x58>
     958:	e2 ee       	ldi	r30, 0xE2	; 226
     95a:	f1 e0       	ldi	r31, 0x01	; 1
     95c:	11 82       	std	Z+1, r1	; 0x01
     95e:	10 82       	st	Z, r1
     960:	15 82       	std	Z+5, r1	; 0x05
     962:	14 82       	std	Z+4, r1	; 0x04
     964:	13 82       	std	Z+3, r1	; 0x03
     966:	12 82       	std	Z+2, r1	; 0x02
     968:	e1 e6       	ldi	r30, 0x61	; 97
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 e8       	ldi	r24, 0x80	; 128
     96e:	80 83       	st	Z, r24
     970:	10 82       	st	Z, r1
     972:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     976:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     97a:	84 e0       	ldi	r24, 0x04	; 4
     97c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <dispatch>:
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	00 d0       	rcall	.+0      	; 0x99a <dispatch+0x6>
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
     99e:	9a 83       	std	Y+2, r25	; 0x02
     9a0:	89 83       	std	Y+1, r24	; 0x01
     9a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     9a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     9aa:	06 96       	adiw	r24, 0x06	; 6
     9ac:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <setjmp>
     9b0:	89 2b       	or	r24, r25
     9b2:	29 f0       	breq	.+10     	; 0x9be <dispatch+0x2a>
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	9a 81       	ldd	r25, Y+2	; 0x02
     9c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     9c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     9ca:	61 e0       	ldi	r22, 0x01	; 1
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	06 96       	adiw	r24, 0x06	; 6
     9d0:	0e 94 14 11 	call	0x2228	; 0x2228 <longjmp>

000009d4 <schedule>:
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <msgQ>
     9e0:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <msgQ+0x1>
     9e4:	30 97       	sbiw	r30, 0x00	; 0
     9e6:	f1 f0       	breq	.+60     	; 0xa24 <schedule+0x50>
     9e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     9ec:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	c1 f0       	breq	.+48     	; 0xa24 <schedule+0x50>
     9f4:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <activeStack>
     9f8:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <activeStack+0x1>
     9fc:	aa 81       	ldd	r26, Y+2	; 0x02
     9fe:	bb 81       	ldd	r27, Y+3	; 0x03
     a00:	10 97       	sbiw	r26, 0x00	; 0
     a02:	a9 f0       	breq	.+42     	; 0xa2e <schedule+0x5a>
     a04:	46 81       	ldd	r20, Z+6	; 0x06
     a06:	57 81       	ldd	r21, Z+7	; 0x07
     a08:	60 85       	ldd	r22, Z+8	; 0x08
     a0a:	71 85       	ldd	r23, Z+9	; 0x09
     a0c:	16 96       	adiw	r26, 0x06	; 6
     a0e:	0d 91       	ld	r16, X+
     a10:	1d 91       	ld	r17, X+
     a12:	2d 91       	ld	r18, X+
     a14:	3c 91       	ld	r19, X
     a16:	19 97       	sbiw	r26, 0x09	; 9
     a18:	40 1b       	sub	r20, r16
     a1a:	51 0b       	sbc	r21, r17
     a1c:	62 0b       	sbc	r22, r18
     a1e:	73 0b       	sbc	r23, r19
     a20:	77 fd       	sbrc	r23, 7
     a22:	05 c0       	rjmp	.+10     	; 0xa2e <schedule+0x5a>
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	1f 91       	pop	r17
     a2a:	0f 91       	pop	r16
     a2c:	08 95       	ret
     a2e:	fc 01       	movw	r30, r24
     a30:	20 81       	ld	r18, Z
     a32:	31 81       	ldd	r19, Z+1	; 0x01
     a34:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
     a38:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
     a3c:	d1 83       	std	Z+1, r29	; 0x01
     a3e:	c0 83       	st	Z, r28
     a40:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
     a44:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	0c 94 ca 04 	jmp	0x994	; 0x994 <dispatch>

00000a54 <dequeue.part.0>:
     a54:	8f ef       	ldi	r24, 0xFF	; 255
     a56:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     a5a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     a5e:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	83 bf       	out	0x33, r24	; 51
     a66:	88 95       	sleep
     a68:	fd cf       	rjmp	.-6      	; 0xa64 <dequeue.part.0+0x10>

00000a6a <__vector_1>:
     a6a:	1f 92       	push	r1
     a6c:	0f 92       	push	r0
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	0f 92       	push	r0
     a72:	11 24       	eor	r1, r1
     a74:	2f 93       	push	r18
     a76:	3f 93       	push	r19
     a78:	4f 93       	push	r20
     a7a:	5f 93       	push	r21
     a7c:	6f 93       	push	r22
     a7e:	7f 93       	push	r23
     a80:	8f 93       	push	r24
     a82:	9f 93       	push	r25
     a84:	af 93       	push	r26
     a86:	bf 93       	push	r27
     a88:	ef 93       	push	r30
     a8a:	ff 93       	push	r31
     a8c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     a90:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     a94:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a98:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a9c:	c9 01       	movw	r24, r18
     a9e:	03 2e       	mov	r0, r19
     aa0:	00 0c       	add	r0, r0
     aa2:	aa 0b       	sbc	r26, r26
     aa4:	bb 0b       	sbc	r27, r27
     aa6:	dc 01       	movw	r26, r24
     aa8:	99 27       	eor	r25, r25
     aaa:	88 27       	eor	r24, r24
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	84 2b       	or	r24, r20
     ab2:	95 2b       	or	r25, r21
     ab4:	a6 2b       	or	r26, r22
     ab6:	b7 2b       	or	r27, r23
     ab8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     abc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     ac0:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     ac4:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     ac8:	b0 9b       	sbis	0x16, 0	; 22
     aca:	1b c0       	rjmp	.+54     	; 0xb02 <__vector_1+0x98>
     acc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ad0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ad4:	c9 01       	movw	r24, r18
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	09 2e       	mov	r0, r25
     ada:	00 0c       	add	r0, r0
     adc:	aa 0b       	sbc	r26, r26
     ade:	bb 0b       	sbc	r27, r27
     ae0:	dc 01       	movw	r26, r24
     ae2:	99 27       	eor	r25, r25
     ae4:	88 27       	eor	r24, r24
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	84 2b       	or	r24, r20
     aec:	95 2b       	or	r25, r21
     aee:	a6 2b       	or	r26, r22
     af0:	b7 2b       	or	r27, r23
     af2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     af6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     afa:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     afe:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     b02:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <mtable>
     b06:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <mtable+0x1>
     b0a:	30 97       	sbiw	r30, 0x00	; 0
     b0c:	39 f0       	breq	.+14     	; 0xb1c <__vector_1+0xb2>
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable>
     b16:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0x1>
     b1a:	09 95       	icall
     b1c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
     b20:	ff 91       	pop	r31
     b22:	ef 91       	pop	r30
     b24:	bf 91       	pop	r27
     b26:	af 91       	pop	r26
     b28:	9f 91       	pop	r25
     b2a:	8f 91       	pop	r24
     b2c:	7f 91       	pop	r23
     b2e:	6f 91       	pop	r22
     b30:	5f 91       	pop	r21
     b32:	4f 91       	pop	r20
     b34:	3f 91       	pop	r19
     b36:	2f 91       	pop	r18
     b38:	0f 90       	pop	r0
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	0f 90       	pop	r0
     b3e:	1f 90       	pop	r1
     b40:	18 95       	reti

00000b42 <__vector_2>:
     b42:	1f 92       	push	r1
     b44:	0f 92       	push	r0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	0f 92       	push	r0
     b4a:	11 24       	eor	r1, r1
     b4c:	2f 93       	push	r18
     b4e:	3f 93       	push	r19
     b50:	4f 93       	push	r20
     b52:	5f 93       	push	r21
     b54:	6f 93       	push	r22
     b56:	7f 93       	push	r23
     b58:	8f 93       	push	r24
     b5a:	9f 93       	push	r25
     b5c:	af 93       	push	r26
     b5e:	bf 93       	push	r27
     b60:	ef 93       	push	r30
     b62:	ff 93       	push	r31
     b64:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     b68:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     b6c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b70:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b74:	c9 01       	movw	r24, r18
     b76:	03 2e       	mov	r0, r19
     b78:	00 0c       	add	r0, r0
     b7a:	aa 0b       	sbc	r26, r26
     b7c:	bb 0b       	sbc	r27, r27
     b7e:	dc 01       	movw	r26, r24
     b80:	99 27       	eor	r25, r25
     b82:	88 27       	eor	r24, r24
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	84 2b       	or	r24, r20
     b8a:	95 2b       	or	r25, r21
     b8c:	a6 2b       	or	r26, r22
     b8e:	b7 2b       	or	r27, r23
     b90:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     b94:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     b98:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     b9c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     ba0:	b0 9b       	sbis	0x16, 0	; 22
     ba2:	1b c0       	rjmp	.+54     	; 0xbda <__vector_2+0x98>
     ba4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ba8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bac:	c9 01       	movw	r24, r18
     bae:	01 96       	adiw	r24, 0x01	; 1
     bb0:	09 2e       	mov	r0, r25
     bb2:	00 0c       	add	r0, r0
     bb4:	aa 0b       	sbc	r26, r26
     bb6:	bb 0b       	sbc	r27, r27
     bb8:	dc 01       	movw	r26, r24
     bba:	99 27       	eor	r25, r25
     bbc:	88 27       	eor	r24, r24
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	84 2b       	or	r24, r20
     bc4:	95 2b       	or	r25, r21
     bc6:	a6 2b       	or	r26, r22
     bc8:	b7 2b       	or	r27, r23
     bca:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     bce:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     bd2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     bd6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     bda:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable+0x2>
     bde:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0x3>
     be2:	30 97       	sbiw	r30, 0x00	; 0
     be4:	39 f0       	breq	.+14     	; 0xbf4 <__vector_2+0xb2>
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0x2>
     bee:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0x3>
     bf2:	09 95       	icall
     bf4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
     bf8:	ff 91       	pop	r31
     bfa:	ef 91       	pop	r30
     bfc:	bf 91       	pop	r27
     bfe:	af 91       	pop	r26
     c00:	9f 91       	pop	r25
     c02:	8f 91       	pop	r24
     c04:	7f 91       	pop	r23
     c06:	6f 91       	pop	r22
     c08:	5f 91       	pop	r21
     c0a:	4f 91       	pop	r20
     c0c:	3f 91       	pop	r19
     c0e:	2f 91       	pop	r18
     c10:	0f 90       	pop	r0
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	0f 90       	pop	r0
     c16:	1f 90       	pop	r1
     c18:	18 95       	reti

00000c1a <__vector_3>:
     c1a:	1f 92       	push	r1
     c1c:	0f 92       	push	r0
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	0f 92       	push	r0
     c22:	11 24       	eor	r1, r1
     c24:	2f 93       	push	r18
     c26:	3f 93       	push	r19
     c28:	4f 93       	push	r20
     c2a:	5f 93       	push	r21
     c2c:	6f 93       	push	r22
     c2e:	7f 93       	push	r23
     c30:	8f 93       	push	r24
     c32:	9f 93       	push	r25
     c34:	af 93       	push	r26
     c36:	bf 93       	push	r27
     c38:	ef 93       	push	r30
     c3a:	ff 93       	push	r31
     c3c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     c40:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     c44:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c48:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c4c:	c9 01       	movw	r24, r18
     c4e:	03 2e       	mov	r0, r19
     c50:	00 0c       	add	r0, r0
     c52:	aa 0b       	sbc	r26, r26
     c54:	bb 0b       	sbc	r27, r27
     c56:	dc 01       	movw	r26, r24
     c58:	99 27       	eor	r25, r25
     c5a:	88 27       	eor	r24, r24
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	84 2b       	or	r24, r20
     c62:	95 2b       	or	r25, r21
     c64:	a6 2b       	or	r26, r22
     c66:	b7 2b       	or	r27, r23
     c68:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     c6c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     c70:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     c74:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     c78:	b0 9b       	sbis	0x16, 0	; 22
     c7a:	1b c0       	rjmp	.+54     	; 0xcb2 <__vector_3+0x98>
     c7c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c80:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c84:	c9 01       	movw	r24, r18
     c86:	01 96       	adiw	r24, 0x01	; 1
     c88:	09 2e       	mov	r0, r25
     c8a:	00 0c       	add	r0, r0
     c8c:	aa 0b       	sbc	r26, r26
     c8e:	bb 0b       	sbc	r27, r27
     c90:	dc 01       	movw	r26, r24
     c92:	99 27       	eor	r25, r25
     c94:	88 27       	eor	r24, r24
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	84 2b       	or	r24, r20
     c9c:	95 2b       	or	r25, r21
     c9e:	a6 2b       	or	r26, r22
     ca0:	b7 2b       	or	r27, r23
     ca2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     ca6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     caa:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     cae:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     cb2:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0x4>
     cb6:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0x5>
     cba:	30 97       	sbiw	r30, 0x00	; 0
     cbc:	39 f0       	breq	.+14     	; 0xccc <__vector_3+0xb2>
     cbe:	62 e0       	ldi	r22, 0x02	; 2
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0x4>
     cc6:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0x5>
     cca:	09 95       	icall
     ccc:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
     cd0:	ff 91       	pop	r31
     cd2:	ef 91       	pop	r30
     cd4:	bf 91       	pop	r27
     cd6:	af 91       	pop	r26
     cd8:	9f 91       	pop	r25
     cda:	8f 91       	pop	r24
     cdc:	7f 91       	pop	r23
     cde:	6f 91       	pop	r22
     ce0:	5f 91       	pop	r21
     ce2:	4f 91       	pop	r20
     ce4:	3f 91       	pop	r19
     ce6:	2f 91       	pop	r18
     ce8:	0f 90       	pop	r0
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	0f 90       	pop	r0
     cee:	1f 90       	pop	r1
     cf0:	18 95       	reti

00000cf2 <__vector_4>:
     cf2:	1f 92       	push	r1
     cf4:	0f 92       	push	r0
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	0f 92       	push	r0
     cfa:	11 24       	eor	r1, r1
     cfc:	2f 93       	push	r18
     cfe:	3f 93       	push	r19
     d00:	4f 93       	push	r20
     d02:	5f 93       	push	r21
     d04:	6f 93       	push	r22
     d06:	7f 93       	push	r23
     d08:	8f 93       	push	r24
     d0a:	9f 93       	push	r25
     d0c:	af 93       	push	r26
     d0e:	bf 93       	push	r27
     d10:	ef 93       	push	r30
     d12:	ff 93       	push	r31
     d14:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     d18:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     d1c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d20:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d24:	c9 01       	movw	r24, r18
     d26:	03 2e       	mov	r0, r19
     d28:	00 0c       	add	r0, r0
     d2a:	aa 0b       	sbc	r26, r26
     d2c:	bb 0b       	sbc	r27, r27
     d2e:	dc 01       	movw	r26, r24
     d30:	99 27       	eor	r25, r25
     d32:	88 27       	eor	r24, r24
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	84 2b       	or	r24, r20
     d3a:	95 2b       	or	r25, r21
     d3c:	a6 2b       	or	r26, r22
     d3e:	b7 2b       	or	r27, r23
     d40:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     d44:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     d48:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     d4c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     d50:	b0 9b       	sbis	0x16, 0	; 22
     d52:	1b c0       	rjmp	.+54     	; 0xd8a <__vector_4+0x98>
     d54:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d58:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d5c:	c9 01       	movw	r24, r18
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	09 2e       	mov	r0, r25
     d62:	00 0c       	add	r0, r0
     d64:	aa 0b       	sbc	r26, r26
     d66:	bb 0b       	sbc	r27, r27
     d68:	dc 01       	movw	r26, r24
     d6a:	99 27       	eor	r25, r25
     d6c:	88 27       	eor	r24, r24
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	84 2b       	or	r24, r20
     d74:	95 2b       	or	r25, r21
     d76:	a6 2b       	or	r26, r22
     d78:	b7 2b       	or	r27, r23
     d7a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     d7e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     d82:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     d86:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     d8a:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x6>
     d8e:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x7>
     d92:	30 97       	sbiw	r30, 0x00	; 0
     d94:	39 f0       	breq	.+14     	; 0xda4 <__vector_4+0xb2>
     d96:	63 e0       	ldi	r22, 0x03	; 3
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x6>
     d9e:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x7>
     da2:	09 95       	icall
     da4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
     da8:	ff 91       	pop	r31
     daa:	ef 91       	pop	r30
     dac:	bf 91       	pop	r27
     dae:	af 91       	pop	r26
     db0:	9f 91       	pop	r25
     db2:	8f 91       	pop	r24
     db4:	7f 91       	pop	r23
     db6:	6f 91       	pop	r22
     db8:	5f 91       	pop	r21
     dba:	4f 91       	pop	r20
     dbc:	3f 91       	pop	r19
     dbe:	2f 91       	pop	r18
     dc0:	0f 90       	pop	r0
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	0f 90       	pop	r0
     dc6:	1f 90       	pop	r1
     dc8:	18 95       	reti

00000dca <__vector_5>:
     dca:	1f 92       	push	r1
     dcc:	0f 92       	push	r0
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	0f 92       	push	r0
     dd2:	11 24       	eor	r1, r1
     dd4:	2f 93       	push	r18
     dd6:	3f 93       	push	r19
     dd8:	4f 93       	push	r20
     dda:	5f 93       	push	r21
     ddc:	6f 93       	push	r22
     dde:	7f 93       	push	r23
     de0:	8f 93       	push	r24
     de2:	9f 93       	push	r25
     de4:	af 93       	push	r26
     de6:	bf 93       	push	r27
     de8:	ef 93       	push	r30
     dea:	ff 93       	push	r31
     dec:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     df0:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     df4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     df8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dfc:	c9 01       	movw	r24, r18
     dfe:	03 2e       	mov	r0, r19
     e00:	00 0c       	add	r0, r0
     e02:	aa 0b       	sbc	r26, r26
     e04:	bb 0b       	sbc	r27, r27
     e06:	dc 01       	movw	r26, r24
     e08:	99 27       	eor	r25, r25
     e0a:	88 27       	eor	r24, r24
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	84 2b       	or	r24, r20
     e12:	95 2b       	or	r25, r21
     e14:	a6 2b       	or	r26, r22
     e16:	b7 2b       	or	r27, r23
     e18:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     e1c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     e20:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     e24:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     e28:	b0 9b       	sbis	0x16, 0	; 22
     e2a:	1b c0       	rjmp	.+54     	; 0xe62 <__vector_5+0x98>
     e2c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e30:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e34:	c9 01       	movw	r24, r18
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	09 2e       	mov	r0, r25
     e3a:	00 0c       	add	r0, r0
     e3c:	aa 0b       	sbc	r26, r26
     e3e:	bb 0b       	sbc	r27, r27
     e40:	dc 01       	movw	r26, r24
     e42:	99 27       	eor	r25, r25
     e44:	88 27       	eor	r24, r24
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	84 2b       	or	r24, r20
     e4c:	95 2b       	or	r25, r21
     e4e:	a6 2b       	or	r26, r22
     e50:	b7 2b       	or	r27, r23
     e52:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     e56:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     e5a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     e5e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     e62:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x8>
     e66:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x9>
     e6a:	30 97       	sbiw	r30, 0x00	; 0
     e6c:	39 f0       	breq	.+14     	; 0xe7c <__vector_5+0xb2>
     e6e:	64 e0       	ldi	r22, 0x04	; 4
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x8>
     e76:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x9>
     e7a:	09 95       	icall
     e7c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
     e80:	ff 91       	pop	r31
     e82:	ef 91       	pop	r30
     e84:	bf 91       	pop	r27
     e86:	af 91       	pop	r26
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	7f 91       	pop	r23
     e8e:	6f 91       	pop	r22
     e90:	5f 91       	pop	r21
     e92:	4f 91       	pop	r20
     e94:	3f 91       	pop	r19
     e96:	2f 91       	pop	r18
     e98:	0f 90       	pop	r0
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	0f 90       	pop	r0
     e9e:	1f 90       	pop	r1
     ea0:	18 95       	reti

00000ea2 <__vector_10>:
     ea2:	1f 92       	push	r1
     ea4:	0f 92       	push	r0
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	0f 92       	push	r0
     eaa:	11 24       	eor	r1, r1
     eac:	2f 93       	push	r18
     eae:	3f 93       	push	r19
     eb0:	4f 93       	push	r20
     eb2:	5f 93       	push	r21
     eb4:	6f 93       	push	r22
     eb6:	7f 93       	push	r23
     eb8:	8f 93       	push	r24
     eba:	9f 93       	push	r25
     ebc:	af 93       	push	r26
     ebe:	bf 93       	push	r27
     ec0:	ef 93       	push	r30
     ec2:	ff 93       	push	r31
     ec4:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     ec8:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     ecc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ed0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ed4:	c9 01       	movw	r24, r18
     ed6:	03 2e       	mov	r0, r19
     ed8:	00 0c       	add	r0, r0
     eda:	aa 0b       	sbc	r26, r26
     edc:	bb 0b       	sbc	r27, r27
     ede:	dc 01       	movw	r26, r24
     ee0:	99 27       	eor	r25, r25
     ee2:	88 27       	eor	r24, r24
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	84 2b       	or	r24, r20
     eea:	95 2b       	or	r25, r21
     eec:	a6 2b       	or	r26, r22
     eee:	b7 2b       	or	r27, r23
     ef0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     ef4:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     ef8:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     efc:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     f00:	b0 9b       	sbis	0x16, 0	; 22
     f02:	1b c0       	rjmp	.+54     	; 0xf3a <__vector_10+0x98>
     f04:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f08:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f0c:	c9 01       	movw	r24, r18
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	09 2e       	mov	r0, r25
     f12:	00 0c       	add	r0, r0
     f14:	aa 0b       	sbc	r26, r26
     f16:	bb 0b       	sbc	r27, r27
     f18:	dc 01       	movw	r26, r24
     f1a:	99 27       	eor	r25, r25
     f1c:	88 27       	eor	r24, r24
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	84 2b       	or	r24, r20
     f24:	95 2b       	or	r25, r21
     f26:	a6 2b       	or	r26, r22
     f28:	b7 2b       	or	r27, r23
     f2a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     f2e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     f32:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     f36:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     f3a:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0xa>
     f3e:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0xb>
     f42:	30 97       	sbiw	r30, 0x00	; 0
     f44:	39 f0       	breq	.+14     	; 0xf54 <__vector_10+0xb2>
     f46:	65 e0       	ldi	r22, 0x05	; 5
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0xa>
     f4e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0xb>
     f52:	09 95       	icall
     f54:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
     f58:	ff 91       	pop	r31
     f5a:	ef 91       	pop	r30
     f5c:	bf 91       	pop	r27
     f5e:	af 91       	pop	r26
     f60:	9f 91       	pop	r25
     f62:	8f 91       	pop	r24
     f64:	7f 91       	pop	r23
     f66:	6f 91       	pop	r22
     f68:	5f 91       	pop	r21
     f6a:	4f 91       	pop	r20
     f6c:	3f 91       	pop	r19
     f6e:	2f 91       	pop	r18
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <__vector_11>:
     f7a:	1f 92       	push	r1
     f7c:	0f 92       	push	r0
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	0f 92       	push	r0
     f82:	11 24       	eor	r1, r1
     f84:	2f 93       	push	r18
     f86:	3f 93       	push	r19
     f88:	4f 93       	push	r20
     f8a:	5f 93       	push	r21
     f8c:	6f 93       	push	r22
     f8e:	7f 93       	push	r23
     f90:	8f 93       	push	r24
     f92:	9f 93       	push	r25
     f94:	af 93       	push	r26
     f96:	bf 93       	push	r27
     f98:	ef 93       	push	r30
     f9a:	ff 93       	push	r31
     f9c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     fa0:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     fa4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fa8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fac:	c9 01       	movw	r24, r18
     fae:	03 2e       	mov	r0, r19
     fb0:	00 0c       	add	r0, r0
     fb2:	aa 0b       	sbc	r26, r26
     fb4:	bb 0b       	sbc	r27, r27
     fb6:	dc 01       	movw	r26, r24
     fb8:	99 27       	eor	r25, r25
     fba:	88 27       	eor	r24, r24
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	84 2b       	or	r24, r20
     fc2:	95 2b       	or	r25, r21
     fc4:	a6 2b       	or	r26, r22
     fc6:	b7 2b       	or	r27, r23
     fc8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     fcc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     fd0:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     fd4:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     fd8:	b0 9b       	sbis	0x16, 0	; 22
     fda:	1b c0       	rjmp	.+54     	; 0x1012 <__vector_11+0x98>
     fdc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fe0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fe4:	c9 01       	movw	r24, r18
     fe6:	01 96       	adiw	r24, 0x01	; 1
     fe8:	09 2e       	mov	r0, r25
     fea:	00 0c       	add	r0, r0
     fec:	aa 0b       	sbc	r26, r26
     fee:	bb 0b       	sbc	r27, r27
     ff0:	dc 01       	movw	r26, r24
     ff2:	99 27       	eor	r25, r25
     ff4:	88 27       	eor	r24, r24
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	84 2b       	or	r24, r20
     ffc:	95 2b       	or	r25, r21
     ffe:	a6 2b       	or	r26, r22
    1000:	b7 2b       	or	r27, r23
    1002:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1006:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    100a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    100e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1012:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0xc>
    1016:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0xd>
    101a:	30 97       	sbiw	r30, 0x00	; 0
    101c:	39 f0       	breq	.+14     	; 0x102c <__vector_11+0xb2>
    101e:	66 e0       	ldi	r22, 0x06	; 6
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0xc>
    1026:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0xd>
    102a:	09 95       	icall
    102c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
    1030:	ff 91       	pop	r31
    1032:	ef 91       	pop	r30
    1034:	bf 91       	pop	r27
    1036:	af 91       	pop	r26
    1038:	9f 91       	pop	r25
    103a:	8f 91       	pop	r24
    103c:	7f 91       	pop	r23
    103e:	6f 91       	pop	r22
    1040:	5f 91       	pop	r21
    1042:	4f 91       	pop	r20
    1044:	3f 91       	pop	r19
    1046:	2f 91       	pop	r18
    1048:	0f 90       	pop	r0
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	0f 90       	pop	r0
    104e:	1f 90       	pop	r1
    1050:	18 95       	reti

00001052 <__vector_12>:
    1052:	1f 92       	push	r1
    1054:	0f 92       	push	r0
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	0f 92       	push	r0
    105a:	11 24       	eor	r1, r1
    105c:	2f 93       	push	r18
    105e:	3f 93       	push	r19
    1060:	4f 93       	push	r20
    1062:	5f 93       	push	r21
    1064:	6f 93       	push	r22
    1066:	7f 93       	push	r23
    1068:	8f 93       	push	r24
    106a:	9f 93       	push	r25
    106c:	af 93       	push	r26
    106e:	bf 93       	push	r27
    1070:	ef 93       	push	r30
    1072:	ff 93       	push	r31
    1074:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1078:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    107c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1080:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1084:	c9 01       	movw	r24, r18
    1086:	03 2e       	mov	r0, r19
    1088:	00 0c       	add	r0, r0
    108a:	aa 0b       	sbc	r26, r26
    108c:	bb 0b       	sbc	r27, r27
    108e:	dc 01       	movw	r26, r24
    1090:	99 27       	eor	r25, r25
    1092:	88 27       	eor	r24, r24
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	84 2b       	or	r24, r20
    109a:	95 2b       	or	r25, r21
    109c:	a6 2b       	or	r26, r22
    109e:	b7 2b       	or	r27, r23
    10a0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    10a4:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    10a8:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    10ac:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    10b0:	b0 9b       	sbis	0x16, 0	; 22
    10b2:	1b c0       	rjmp	.+54     	; 0x10ea <__vector_12+0x98>
    10b4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10b8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10bc:	c9 01       	movw	r24, r18
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	09 2e       	mov	r0, r25
    10c2:	00 0c       	add	r0, r0
    10c4:	aa 0b       	sbc	r26, r26
    10c6:	bb 0b       	sbc	r27, r27
    10c8:	dc 01       	movw	r26, r24
    10ca:	99 27       	eor	r25, r25
    10cc:	88 27       	eor	r24, r24
    10ce:	60 e0       	ldi	r22, 0x00	; 0
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	84 2b       	or	r24, r20
    10d4:	95 2b       	or	r25, r21
    10d6:	a6 2b       	or	r26, r22
    10d8:	b7 2b       	or	r27, r23
    10da:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    10de:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    10e2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    10e6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    10ea:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <mtable+0xe>
    10ee:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <mtable+0xf>
    10f2:	30 97       	sbiw	r30, 0x00	; 0
    10f4:	39 f0       	breq	.+14     	; 0x1104 <__vector_12+0xb2>
    10f6:	67 e0       	ldi	r22, 0x07	; 7
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable+0xe>
    10fe:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0xf>
    1102:	09 95       	icall
    1104:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
    1108:	ff 91       	pop	r31
    110a:	ef 91       	pop	r30
    110c:	bf 91       	pop	r27
    110e:	af 91       	pop	r26
    1110:	9f 91       	pop	r25
    1112:	8f 91       	pop	r24
    1114:	7f 91       	pop	r23
    1116:	6f 91       	pop	r22
    1118:	5f 91       	pop	r21
    111a:	4f 91       	pop	r20
    111c:	3f 91       	pop	r19
    111e:	2f 91       	pop	r18
    1120:	0f 90       	pop	r0
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	0f 90       	pop	r0
    1126:	1f 90       	pop	r1
    1128:	18 95       	reti

0000112a <__vector_13>:
    112a:	1f 92       	push	r1
    112c:	0f 92       	push	r0
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	0f 92       	push	r0
    1132:	11 24       	eor	r1, r1
    1134:	2f 93       	push	r18
    1136:	3f 93       	push	r19
    1138:	4f 93       	push	r20
    113a:	5f 93       	push	r21
    113c:	6f 93       	push	r22
    113e:	7f 93       	push	r23
    1140:	8f 93       	push	r24
    1142:	9f 93       	push	r25
    1144:	af 93       	push	r26
    1146:	bf 93       	push	r27
    1148:	ef 93       	push	r30
    114a:	ff 93       	push	r31
    114c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1150:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1154:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1158:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    115c:	c9 01       	movw	r24, r18
    115e:	03 2e       	mov	r0, r19
    1160:	00 0c       	add	r0, r0
    1162:	aa 0b       	sbc	r26, r26
    1164:	bb 0b       	sbc	r27, r27
    1166:	dc 01       	movw	r26, r24
    1168:	99 27       	eor	r25, r25
    116a:	88 27       	eor	r24, r24
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	84 2b       	or	r24, r20
    1172:	95 2b       	or	r25, r21
    1174:	a6 2b       	or	r26, r22
    1176:	b7 2b       	or	r27, r23
    1178:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    117c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1180:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1184:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1188:	b0 9b       	sbis	0x16, 0	; 22
    118a:	1b c0       	rjmp	.+54     	; 0x11c2 <__vector_13+0x98>
    118c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1190:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1194:	c9 01       	movw	r24, r18
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	09 2e       	mov	r0, r25
    119a:	00 0c       	add	r0, r0
    119c:	aa 0b       	sbc	r26, r26
    119e:	bb 0b       	sbc	r27, r27
    11a0:	dc 01       	movw	r26, r24
    11a2:	99 27       	eor	r25, r25
    11a4:	88 27       	eor	r24, r24
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	84 2b       	or	r24, r20
    11ac:	95 2b       	or	r25, r21
    11ae:	a6 2b       	or	r26, r22
    11b0:	b7 2b       	or	r27, r23
    11b2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    11b6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    11ba:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    11be:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    11c2:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <mtable+0x10>
    11c6:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <mtable+0x11>
    11ca:	30 97       	sbiw	r30, 0x00	; 0
    11cc:	39 f0       	breq	.+14     	; 0x11dc <__vector_13+0xb2>
    11ce:	68 e0       	ldi	r22, 0x08	; 8
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <otable+0x10>
    11d6:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <otable+0x11>
    11da:	09 95       	icall
    11dc:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
    11e0:	ff 91       	pop	r31
    11e2:	ef 91       	pop	r30
    11e4:	bf 91       	pop	r27
    11e6:	af 91       	pop	r26
    11e8:	9f 91       	pop	r25
    11ea:	8f 91       	pop	r24
    11ec:	7f 91       	pop	r23
    11ee:	6f 91       	pop	r22
    11f0:	5f 91       	pop	r21
    11f2:	4f 91       	pop	r20
    11f4:	3f 91       	pop	r19
    11f6:	2f 91       	pop	r18
    11f8:	0f 90       	pop	r0
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	0f 90       	pop	r0
    11fe:	1f 90       	pop	r1
    1200:	18 95       	reti

00001202 <__vector_14>:
    1202:	1f 92       	push	r1
    1204:	0f 92       	push	r0
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	0f 92       	push	r0
    120a:	11 24       	eor	r1, r1
    120c:	2f 93       	push	r18
    120e:	3f 93       	push	r19
    1210:	4f 93       	push	r20
    1212:	5f 93       	push	r21
    1214:	6f 93       	push	r22
    1216:	7f 93       	push	r23
    1218:	8f 93       	push	r24
    121a:	9f 93       	push	r25
    121c:	af 93       	push	r26
    121e:	bf 93       	push	r27
    1220:	ef 93       	push	r30
    1222:	ff 93       	push	r31
    1224:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1228:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    122c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1230:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1234:	c9 01       	movw	r24, r18
    1236:	03 2e       	mov	r0, r19
    1238:	00 0c       	add	r0, r0
    123a:	aa 0b       	sbc	r26, r26
    123c:	bb 0b       	sbc	r27, r27
    123e:	dc 01       	movw	r26, r24
    1240:	99 27       	eor	r25, r25
    1242:	88 27       	eor	r24, r24
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	84 2b       	or	r24, r20
    124a:	95 2b       	or	r25, r21
    124c:	a6 2b       	or	r26, r22
    124e:	b7 2b       	or	r27, r23
    1250:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1254:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1258:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    125c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1260:	b0 9b       	sbis	0x16, 0	; 22
    1262:	1b c0       	rjmp	.+54     	; 0x129a <__vector_14+0x98>
    1264:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1268:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    126c:	c9 01       	movw	r24, r18
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	09 2e       	mov	r0, r25
    1272:	00 0c       	add	r0, r0
    1274:	aa 0b       	sbc	r26, r26
    1276:	bb 0b       	sbc	r27, r27
    1278:	dc 01       	movw	r26, r24
    127a:	99 27       	eor	r25, r25
    127c:	88 27       	eor	r24, r24
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	84 2b       	or	r24, r20
    1284:	95 2b       	or	r25, r21
    1286:	a6 2b       	or	r26, r22
    1288:	b7 2b       	or	r27, r23
    128a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    128e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1292:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1296:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    129a:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <mtable+0x12>
    129e:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <mtable+0x13>
    12a2:	30 97       	sbiw	r30, 0x00	; 0
    12a4:	39 f0       	breq	.+14     	; 0x12b4 <__vector_14+0xb2>
    12a6:	69 e0       	ldi	r22, 0x09	; 9
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable+0x12>
    12ae:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x13>
    12b2:	09 95       	icall
    12b4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
    12b8:	ff 91       	pop	r31
    12ba:	ef 91       	pop	r30
    12bc:	bf 91       	pop	r27
    12be:	af 91       	pop	r26
    12c0:	9f 91       	pop	r25
    12c2:	8f 91       	pop	r24
    12c4:	7f 91       	pop	r23
    12c6:	6f 91       	pop	r22
    12c8:	5f 91       	pop	r21
    12ca:	4f 91       	pop	r20
    12cc:	3f 91       	pop	r19
    12ce:	2f 91       	pop	r18
    12d0:	0f 90       	pop	r0
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	0f 90       	pop	r0
    12d6:	1f 90       	pop	r1
    12d8:	18 95       	reti

000012da <__vector_15>:
    12da:	1f 92       	push	r1
    12dc:	0f 92       	push	r0
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	0f 92       	push	r0
    12e2:	11 24       	eor	r1, r1
    12e4:	2f 93       	push	r18
    12e6:	3f 93       	push	r19
    12e8:	4f 93       	push	r20
    12ea:	5f 93       	push	r21
    12ec:	6f 93       	push	r22
    12ee:	7f 93       	push	r23
    12f0:	8f 93       	push	r24
    12f2:	9f 93       	push	r25
    12f4:	af 93       	push	r26
    12f6:	bf 93       	push	r27
    12f8:	ef 93       	push	r30
    12fa:	ff 93       	push	r31
    12fc:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1300:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1304:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1308:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    130c:	c9 01       	movw	r24, r18
    130e:	03 2e       	mov	r0, r19
    1310:	00 0c       	add	r0, r0
    1312:	aa 0b       	sbc	r26, r26
    1314:	bb 0b       	sbc	r27, r27
    1316:	dc 01       	movw	r26, r24
    1318:	99 27       	eor	r25, r25
    131a:	88 27       	eor	r24, r24
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	84 2b       	or	r24, r20
    1322:	95 2b       	or	r25, r21
    1324:	a6 2b       	or	r26, r22
    1326:	b7 2b       	or	r27, r23
    1328:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    132c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1330:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1334:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1338:	b0 9b       	sbis	0x16, 0	; 22
    133a:	1b c0       	rjmp	.+54     	; 0x1372 <__vector_15+0x98>
    133c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1340:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1344:	c9 01       	movw	r24, r18
    1346:	01 96       	adiw	r24, 0x01	; 1
    1348:	09 2e       	mov	r0, r25
    134a:	00 0c       	add	r0, r0
    134c:	aa 0b       	sbc	r26, r26
    134e:	bb 0b       	sbc	r27, r27
    1350:	dc 01       	movw	r26, r24
    1352:	99 27       	eor	r25, r25
    1354:	88 27       	eor	r24, r24
    1356:	60 e0       	ldi	r22, 0x00	; 0
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	84 2b       	or	r24, r20
    135c:	95 2b       	or	r25, r21
    135e:	a6 2b       	or	r26, r22
    1360:	b7 2b       	or	r27, r23
    1362:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1366:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    136a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    136e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1372:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <mtable+0x14>
    1376:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <mtable+0x15>
    137a:	30 97       	sbiw	r30, 0x00	; 0
    137c:	39 f0       	breq	.+14     	; 0x138c <__vector_15+0xb2>
    137e:	6a e0       	ldi	r22, 0x0A	; 10
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable+0x14>
    1386:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x15>
    138a:	09 95       	icall
    138c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
    1390:	ff 91       	pop	r31
    1392:	ef 91       	pop	r30
    1394:	bf 91       	pop	r27
    1396:	af 91       	pop	r26
    1398:	9f 91       	pop	r25
    139a:	8f 91       	pop	r24
    139c:	7f 91       	pop	r23
    139e:	6f 91       	pop	r22
    13a0:	5f 91       	pop	r21
    13a2:	4f 91       	pop	r20
    13a4:	3f 91       	pop	r19
    13a6:	2f 91       	pop	r18
    13a8:	0f 90       	pop	r0
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	0f 90       	pop	r0
    13ae:	1f 90       	pop	r1
    13b0:	18 95       	reti

000013b2 <__vector_16>:
    13b2:	1f 92       	push	r1
    13b4:	0f 92       	push	r0
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	0f 92       	push	r0
    13ba:	11 24       	eor	r1, r1
    13bc:	2f 93       	push	r18
    13be:	3f 93       	push	r19
    13c0:	4f 93       	push	r20
    13c2:	5f 93       	push	r21
    13c4:	6f 93       	push	r22
    13c6:	7f 93       	push	r23
    13c8:	8f 93       	push	r24
    13ca:	9f 93       	push	r25
    13cc:	af 93       	push	r26
    13ce:	bf 93       	push	r27
    13d0:	ef 93       	push	r30
    13d2:	ff 93       	push	r31
    13d4:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    13d8:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    13dc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13e0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13e4:	c9 01       	movw	r24, r18
    13e6:	03 2e       	mov	r0, r19
    13e8:	00 0c       	add	r0, r0
    13ea:	aa 0b       	sbc	r26, r26
    13ec:	bb 0b       	sbc	r27, r27
    13ee:	dc 01       	movw	r26, r24
    13f0:	99 27       	eor	r25, r25
    13f2:	88 27       	eor	r24, r24
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	84 2b       	or	r24, r20
    13fa:	95 2b       	or	r25, r21
    13fc:	a6 2b       	or	r26, r22
    13fe:	b7 2b       	or	r27, r23
    1400:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1404:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1408:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    140c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1410:	b0 9b       	sbis	0x16, 0	; 22
    1412:	1b c0       	rjmp	.+54     	; 0x144a <__vector_16+0x98>
    1414:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1418:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    141c:	c9 01       	movw	r24, r18
    141e:	01 96       	adiw	r24, 0x01	; 1
    1420:	09 2e       	mov	r0, r25
    1422:	00 0c       	add	r0, r0
    1424:	aa 0b       	sbc	r26, r26
    1426:	bb 0b       	sbc	r27, r27
    1428:	dc 01       	movw	r26, r24
    142a:	99 27       	eor	r25, r25
    142c:	88 27       	eor	r24, r24
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	84 2b       	or	r24, r20
    1434:	95 2b       	or	r25, r21
    1436:	a6 2b       	or	r26, r22
    1438:	b7 2b       	or	r27, r23
    143a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    143e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1442:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1446:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    144a:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <mtable+0x16>
    144e:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <mtable+0x17>
    1452:	30 97       	sbiw	r30, 0x00	; 0
    1454:	39 f0       	breq	.+14     	; 0x1464 <__vector_16+0xb2>
    1456:	6b e0       	ldi	r22, 0x0B	; 11
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable+0x16>
    145e:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x17>
    1462:	09 95       	icall
    1464:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
    1468:	ff 91       	pop	r31
    146a:	ef 91       	pop	r30
    146c:	bf 91       	pop	r27
    146e:	af 91       	pop	r26
    1470:	9f 91       	pop	r25
    1472:	8f 91       	pop	r24
    1474:	7f 91       	pop	r23
    1476:	6f 91       	pop	r22
    1478:	5f 91       	pop	r21
    147a:	4f 91       	pop	r20
    147c:	3f 91       	pop	r19
    147e:	2f 91       	pop	r18
    1480:	0f 90       	pop	r0
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	0f 90       	pop	r0
    1486:	1f 90       	pop	r1
    1488:	18 95       	reti

0000148a <__vector_17>:
    148a:	1f 92       	push	r1
    148c:	0f 92       	push	r0
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	0f 92       	push	r0
    1492:	11 24       	eor	r1, r1
    1494:	2f 93       	push	r18
    1496:	3f 93       	push	r19
    1498:	4f 93       	push	r20
    149a:	5f 93       	push	r21
    149c:	6f 93       	push	r22
    149e:	7f 93       	push	r23
    14a0:	8f 93       	push	r24
    14a2:	9f 93       	push	r25
    14a4:	af 93       	push	r26
    14a6:	bf 93       	push	r27
    14a8:	ef 93       	push	r30
    14aa:	ff 93       	push	r31
    14ac:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    14b0:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    14b4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14b8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14bc:	c9 01       	movw	r24, r18
    14be:	03 2e       	mov	r0, r19
    14c0:	00 0c       	add	r0, r0
    14c2:	aa 0b       	sbc	r26, r26
    14c4:	bb 0b       	sbc	r27, r27
    14c6:	dc 01       	movw	r26, r24
    14c8:	99 27       	eor	r25, r25
    14ca:	88 27       	eor	r24, r24
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	84 2b       	or	r24, r20
    14d2:	95 2b       	or	r25, r21
    14d4:	a6 2b       	or	r26, r22
    14d6:	b7 2b       	or	r27, r23
    14d8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    14dc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    14e0:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    14e4:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    14e8:	b0 9b       	sbis	0x16, 0	; 22
    14ea:	1b c0       	rjmp	.+54     	; 0x1522 <__vector_17+0x98>
    14ec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14f0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14f4:	c9 01       	movw	r24, r18
    14f6:	01 96       	adiw	r24, 0x01	; 1
    14f8:	09 2e       	mov	r0, r25
    14fa:	00 0c       	add	r0, r0
    14fc:	aa 0b       	sbc	r26, r26
    14fe:	bb 0b       	sbc	r27, r27
    1500:	dc 01       	movw	r26, r24
    1502:	99 27       	eor	r25, r25
    1504:	88 27       	eor	r24, r24
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	84 2b       	or	r24, r20
    150c:	95 2b       	or	r25, r21
    150e:	a6 2b       	or	r26, r22
    1510:	b7 2b       	or	r27, r23
    1512:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1516:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    151a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    151e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1522:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable+0x18>
    1526:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x19>
    152a:	30 97       	sbiw	r30, 0x00	; 0
    152c:	39 f0       	breq	.+14     	; 0x153c <__vector_17+0xb2>
    152e:	6c e0       	ldi	r22, 0x0C	; 12
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0x18>
    1536:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x19>
    153a:	09 95       	icall
    153c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
    1540:	ff 91       	pop	r31
    1542:	ef 91       	pop	r30
    1544:	bf 91       	pop	r27
    1546:	af 91       	pop	r26
    1548:	9f 91       	pop	r25
    154a:	8f 91       	pop	r24
    154c:	7f 91       	pop	r23
    154e:	6f 91       	pop	r22
    1550:	5f 91       	pop	r21
    1552:	4f 91       	pop	r20
    1554:	3f 91       	pop	r19
    1556:	2f 91       	pop	r18
    1558:	0f 90       	pop	r0
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	0f 90       	pop	r0
    155e:	1f 90       	pop	r1
    1560:	18 95       	reti

00001562 <__vector_18>:
    1562:	1f 92       	push	r1
    1564:	0f 92       	push	r0
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	0f 92       	push	r0
    156a:	11 24       	eor	r1, r1
    156c:	2f 93       	push	r18
    156e:	3f 93       	push	r19
    1570:	4f 93       	push	r20
    1572:	5f 93       	push	r21
    1574:	6f 93       	push	r22
    1576:	7f 93       	push	r23
    1578:	8f 93       	push	r24
    157a:	9f 93       	push	r25
    157c:	af 93       	push	r26
    157e:	bf 93       	push	r27
    1580:	ef 93       	push	r30
    1582:	ff 93       	push	r31
    1584:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1588:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    158c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1590:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1594:	c9 01       	movw	r24, r18
    1596:	03 2e       	mov	r0, r19
    1598:	00 0c       	add	r0, r0
    159a:	aa 0b       	sbc	r26, r26
    159c:	bb 0b       	sbc	r27, r27
    159e:	dc 01       	movw	r26, r24
    15a0:	99 27       	eor	r25, r25
    15a2:	88 27       	eor	r24, r24
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	84 2b       	or	r24, r20
    15aa:	95 2b       	or	r25, r21
    15ac:	a6 2b       	or	r26, r22
    15ae:	b7 2b       	or	r27, r23
    15b0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    15b4:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    15b8:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    15bc:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    15c0:	b0 9b       	sbis	0x16, 0	; 22
    15c2:	1b c0       	rjmp	.+54     	; 0x15fa <__vector_18+0x98>
    15c4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15c8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15cc:	c9 01       	movw	r24, r18
    15ce:	01 96       	adiw	r24, 0x01	; 1
    15d0:	09 2e       	mov	r0, r25
    15d2:	00 0c       	add	r0, r0
    15d4:	aa 0b       	sbc	r26, r26
    15d6:	bb 0b       	sbc	r27, r27
    15d8:	dc 01       	movw	r26, r24
    15da:	99 27       	eor	r25, r25
    15dc:	88 27       	eor	r24, r24
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	84 2b       	or	r24, r20
    15e4:	95 2b       	or	r25, r21
    15e6:	a6 2b       	or	r26, r22
    15e8:	b7 2b       	or	r27, r23
    15ea:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    15ee:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    15f2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    15f6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    15fa:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0x1a>
    15fe:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x1b>
    1602:	30 97       	sbiw	r30, 0x00	; 0
    1604:	39 f0       	breq	.+14     	; 0x1614 <__vector_18+0xb2>
    1606:	6d e0       	ldi	r22, 0x0D	; 13
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0x1a>
    160e:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x1b>
    1612:	09 95       	icall
    1614:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
    1618:	ff 91       	pop	r31
    161a:	ef 91       	pop	r30
    161c:	bf 91       	pop	r27
    161e:	af 91       	pop	r26
    1620:	9f 91       	pop	r25
    1622:	8f 91       	pop	r24
    1624:	7f 91       	pop	r23
    1626:	6f 91       	pop	r22
    1628:	5f 91       	pop	r21
    162a:	4f 91       	pop	r20
    162c:	3f 91       	pop	r19
    162e:	2f 91       	pop	r18
    1630:	0f 90       	pop	r0
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	0f 90       	pop	r0
    1636:	1f 90       	pop	r1
    1638:	18 95       	reti

0000163a <__vector_19>:
    163a:	1f 92       	push	r1
    163c:	0f 92       	push	r0
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	0f 92       	push	r0
    1642:	11 24       	eor	r1, r1
    1644:	2f 93       	push	r18
    1646:	3f 93       	push	r19
    1648:	4f 93       	push	r20
    164a:	5f 93       	push	r21
    164c:	6f 93       	push	r22
    164e:	7f 93       	push	r23
    1650:	8f 93       	push	r24
    1652:	9f 93       	push	r25
    1654:	af 93       	push	r26
    1656:	bf 93       	push	r27
    1658:	ef 93       	push	r30
    165a:	ff 93       	push	r31
    165c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1660:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1664:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1668:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    166c:	c9 01       	movw	r24, r18
    166e:	03 2e       	mov	r0, r19
    1670:	00 0c       	add	r0, r0
    1672:	aa 0b       	sbc	r26, r26
    1674:	bb 0b       	sbc	r27, r27
    1676:	dc 01       	movw	r26, r24
    1678:	99 27       	eor	r25, r25
    167a:	88 27       	eor	r24, r24
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	84 2b       	or	r24, r20
    1682:	95 2b       	or	r25, r21
    1684:	a6 2b       	or	r26, r22
    1686:	b7 2b       	or	r27, r23
    1688:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    168c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1690:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1694:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1698:	b0 9b       	sbis	0x16, 0	; 22
    169a:	1b c0       	rjmp	.+54     	; 0x16d2 <__vector_19+0x98>
    169c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16a0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16a4:	c9 01       	movw	r24, r18
    16a6:	01 96       	adiw	r24, 0x01	; 1
    16a8:	09 2e       	mov	r0, r25
    16aa:	00 0c       	add	r0, r0
    16ac:	aa 0b       	sbc	r26, r26
    16ae:	bb 0b       	sbc	r27, r27
    16b0:	dc 01       	movw	r26, r24
    16b2:	99 27       	eor	r25, r25
    16b4:	88 27       	eor	r24, r24
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	84 2b       	or	r24, r20
    16bc:	95 2b       	or	r25, r21
    16be:	a6 2b       	or	r26, r22
    16c0:	b7 2b       	or	r27, r23
    16c2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    16c6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    16ca:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    16ce:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    16d2:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0x1c>
    16d6:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x1d>
    16da:	30 97       	sbiw	r30, 0x00	; 0
    16dc:	39 f0       	breq	.+14     	; 0x16ec <__vector_19+0xb2>
    16de:	6e e0       	ldi	r22, 0x0E	; 14
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0x1c>
    16e6:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x1d>
    16ea:	09 95       	icall
    16ec:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
    16f0:	ff 91       	pop	r31
    16f2:	ef 91       	pop	r30
    16f4:	bf 91       	pop	r27
    16f6:	af 91       	pop	r26
    16f8:	9f 91       	pop	r25
    16fa:	8f 91       	pop	r24
    16fc:	7f 91       	pop	r23
    16fe:	6f 91       	pop	r22
    1700:	5f 91       	pop	r21
    1702:	4f 91       	pop	r20
    1704:	3f 91       	pop	r19
    1706:	2f 91       	pop	r18
    1708:	0f 90       	pop	r0
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	0f 90       	pop	r0
    170e:	1f 90       	pop	r1
    1710:	18 95       	reti

00001712 <__vector_20>:
    1712:	1f 92       	push	r1
    1714:	0f 92       	push	r0
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	0f 92       	push	r0
    171a:	11 24       	eor	r1, r1
    171c:	2f 93       	push	r18
    171e:	3f 93       	push	r19
    1720:	4f 93       	push	r20
    1722:	5f 93       	push	r21
    1724:	6f 93       	push	r22
    1726:	7f 93       	push	r23
    1728:	8f 93       	push	r24
    172a:	9f 93       	push	r25
    172c:	af 93       	push	r26
    172e:	bf 93       	push	r27
    1730:	ef 93       	push	r30
    1732:	ff 93       	push	r31
    1734:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1738:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    173c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1740:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1744:	c9 01       	movw	r24, r18
    1746:	03 2e       	mov	r0, r19
    1748:	00 0c       	add	r0, r0
    174a:	aa 0b       	sbc	r26, r26
    174c:	bb 0b       	sbc	r27, r27
    174e:	dc 01       	movw	r26, r24
    1750:	99 27       	eor	r25, r25
    1752:	88 27       	eor	r24, r24
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	84 2b       	or	r24, r20
    175a:	95 2b       	or	r25, r21
    175c:	a6 2b       	or	r26, r22
    175e:	b7 2b       	or	r27, r23
    1760:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1764:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1768:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    176c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1770:	b0 9b       	sbis	0x16, 0	; 22
    1772:	1b c0       	rjmp	.+54     	; 0x17aa <__vector_20+0x98>
    1774:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1778:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    177c:	c9 01       	movw	r24, r18
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	09 2e       	mov	r0, r25
    1782:	00 0c       	add	r0, r0
    1784:	aa 0b       	sbc	r26, r26
    1786:	bb 0b       	sbc	r27, r27
    1788:	dc 01       	movw	r26, r24
    178a:	99 27       	eor	r25, r25
    178c:	88 27       	eor	r24, r24
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	84 2b       	or	r24, r20
    1794:	95 2b       	or	r25, r21
    1796:	a6 2b       	or	r26, r22
    1798:	b7 2b       	or	r27, r23
    179a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    179e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    17a2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    17a6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    17aa:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x1e>
    17ae:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x1f>
    17b2:	30 97       	sbiw	r30, 0x00	; 0
    17b4:	39 f0       	breq	.+14     	; 0x17c4 <__vector_20+0xb2>
    17b6:	6f e0       	ldi	r22, 0x0F	; 15
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x1e>
    17be:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x1f>
    17c2:	09 95       	icall
    17c4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
    17c8:	ff 91       	pop	r31
    17ca:	ef 91       	pop	r30
    17cc:	bf 91       	pop	r27
    17ce:	af 91       	pop	r26
    17d0:	9f 91       	pop	r25
    17d2:	8f 91       	pop	r24
    17d4:	7f 91       	pop	r23
    17d6:	6f 91       	pop	r22
    17d8:	5f 91       	pop	r21
    17da:	4f 91       	pop	r20
    17dc:	3f 91       	pop	r19
    17de:	2f 91       	pop	r18
    17e0:	0f 90       	pop	r0
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	0f 90       	pop	r0
    17e6:	1f 90       	pop	r1
    17e8:	18 95       	reti

000017ea <__vector_21>:
    17ea:	1f 92       	push	r1
    17ec:	0f 92       	push	r0
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	0f 92       	push	r0
    17f2:	11 24       	eor	r1, r1
    17f4:	2f 93       	push	r18
    17f6:	3f 93       	push	r19
    17f8:	4f 93       	push	r20
    17fa:	5f 93       	push	r21
    17fc:	6f 93       	push	r22
    17fe:	7f 93       	push	r23
    1800:	8f 93       	push	r24
    1802:	9f 93       	push	r25
    1804:	af 93       	push	r26
    1806:	bf 93       	push	r27
    1808:	ef 93       	push	r30
    180a:	ff 93       	push	r31
    180c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1810:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1814:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1818:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    181c:	c9 01       	movw	r24, r18
    181e:	03 2e       	mov	r0, r19
    1820:	00 0c       	add	r0, r0
    1822:	aa 0b       	sbc	r26, r26
    1824:	bb 0b       	sbc	r27, r27
    1826:	dc 01       	movw	r26, r24
    1828:	99 27       	eor	r25, r25
    182a:	88 27       	eor	r24, r24
    182c:	60 e0       	ldi	r22, 0x00	; 0
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	84 2b       	or	r24, r20
    1832:	95 2b       	or	r25, r21
    1834:	a6 2b       	or	r26, r22
    1836:	b7 2b       	or	r27, r23
    1838:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    183c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1840:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1844:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1848:	b0 9b       	sbis	0x16, 0	; 22
    184a:	1b c0       	rjmp	.+54     	; 0x1882 <__vector_21+0x98>
    184c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1850:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1854:	c9 01       	movw	r24, r18
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	09 2e       	mov	r0, r25
    185a:	00 0c       	add	r0, r0
    185c:	aa 0b       	sbc	r26, r26
    185e:	bb 0b       	sbc	r27, r27
    1860:	dc 01       	movw	r26, r24
    1862:	99 27       	eor	r25, r25
    1864:	88 27       	eor	r24, r24
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	84 2b       	or	r24, r20
    186c:	95 2b       	or	r25, r21
    186e:	a6 2b       	or	r26, r22
    1870:	b7 2b       	or	r27, r23
    1872:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1876:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    187a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    187e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1882:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x20>
    1886:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x21>
    188a:	30 97       	sbiw	r30, 0x00	; 0
    188c:	39 f0       	breq	.+14     	; 0x189c <__vector_21+0xb2>
    188e:	60 e1       	ldi	r22, 0x10	; 16
    1890:	70 e0       	ldi	r23, 0x00	; 0
    1892:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x20>
    1896:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x21>
    189a:	09 95       	icall
    189c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
    18a0:	ff 91       	pop	r31
    18a2:	ef 91       	pop	r30
    18a4:	bf 91       	pop	r27
    18a6:	af 91       	pop	r26
    18a8:	9f 91       	pop	r25
    18aa:	8f 91       	pop	r24
    18ac:	7f 91       	pop	r23
    18ae:	6f 91       	pop	r22
    18b0:	5f 91       	pop	r21
    18b2:	4f 91       	pop	r20
    18b4:	3f 91       	pop	r19
    18b6:	2f 91       	pop	r18
    18b8:	0f 90       	pop	r0
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	0f 90       	pop	r0
    18be:	1f 90       	pop	r1
    18c0:	18 95       	reti

000018c2 <__vector_22>:
    18c2:	1f 92       	push	r1
    18c4:	0f 92       	push	r0
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	0f 92       	push	r0
    18ca:	11 24       	eor	r1, r1
    18cc:	2f 93       	push	r18
    18ce:	3f 93       	push	r19
    18d0:	4f 93       	push	r20
    18d2:	5f 93       	push	r21
    18d4:	6f 93       	push	r22
    18d6:	7f 93       	push	r23
    18d8:	8f 93       	push	r24
    18da:	9f 93       	push	r25
    18dc:	af 93       	push	r26
    18de:	bf 93       	push	r27
    18e0:	ef 93       	push	r30
    18e2:	ff 93       	push	r31
    18e4:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    18e8:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    18ec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18f0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18f4:	c9 01       	movw	r24, r18
    18f6:	03 2e       	mov	r0, r19
    18f8:	00 0c       	add	r0, r0
    18fa:	aa 0b       	sbc	r26, r26
    18fc:	bb 0b       	sbc	r27, r27
    18fe:	dc 01       	movw	r26, r24
    1900:	99 27       	eor	r25, r25
    1902:	88 27       	eor	r24, r24
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	84 2b       	or	r24, r20
    190a:	95 2b       	or	r25, r21
    190c:	a6 2b       	or	r26, r22
    190e:	b7 2b       	or	r27, r23
    1910:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1914:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1918:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    191c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1920:	b0 9b       	sbis	0x16, 0	; 22
    1922:	1b c0       	rjmp	.+54     	; 0x195a <__vector_22+0x98>
    1924:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1928:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    192c:	c9 01       	movw	r24, r18
    192e:	01 96       	adiw	r24, 0x01	; 1
    1930:	09 2e       	mov	r0, r25
    1932:	00 0c       	add	r0, r0
    1934:	aa 0b       	sbc	r26, r26
    1936:	bb 0b       	sbc	r27, r27
    1938:	dc 01       	movw	r26, r24
    193a:	99 27       	eor	r25, r25
    193c:	88 27       	eor	r24, r24
    193e:	60 e0       	ldi	r22, 0x00	; 0
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	84 2b       	or	r24, r20
    1944:	95 2b       	or	r25, r21
    1946:	a6 2b       	or	r26, r22
    1948:	b7 2b       	or	r27, r23
    194a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    194e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1952:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1956:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    195a:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x22>
    195e:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x23>
    1962:	30 97       	sbiw	r30, 0x00	; 0
    1964:	39 f0       	breq	.+14     	; 0x1974 <__vector_22+0xb2>
    1966:	61 e1       	ldi	r22, 0x11	; 17
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x22>
    196e:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x23>
    1972:	09 95       	icall
    1974:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
    1978:	ff 91       	pop	r31
    197a:	ef 91       	pop	r30
    197c:	bf 91       	pop	r27
    197e:	af 91       	pop	r26
    1980:	9f 91       	pop	r25
    1982:	8f 91       	pop	r24
    1984:	7f 91       	pop	r23
    1986:	6f 91       	pop	r22
    1988:	5f 91       	pop	r21
    198a:	4f 91       	pop	r20
    198c:	3f 91       	pop	r19
    198e:	2f 91       	pop	r18
    1990:	0f 90       	pop	r0
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	0f 90       	pop	r0
    1996:	1f 90       	pop	r1
    1998:	18 95       	reti

0000199a <__vector_9>:
    199a:	1f 92       	push	r1
    199c:	0f 92       	push	r0
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	0f 92       	push	r0
    19a2:	11 24       	eor	r1, r1
    19a4:	2f 93       	push	r18
    19a6:	3f 93       	push	r19
    19a8:	4f 93       	push	r20
    19aa:	5f 93       	push	r21
    19ac:	6f 93       	push	r22
    19ae:	7f 93       	push	r23
    19b0:	8f 93       	push	r24
    19b2:	9f 93       	push	r25
    19b4:	ef 93       	push	r30
    19b6:	ff 93       	push	r31
    19b8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    19bc:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    19c0:	01 96       	adiw	r24, 0x01	; 1
    19c2:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
    19c6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
    19ca:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timerQ>
    19ce:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timerQ+0x1>
    19d2:	30 97       	sbiw	r30, 0x00	; 0
    19d4:	39 f0       	breq	.+14     	; 0x19e4 <__vector_9+0x4a>
    19d6:	42 81       	ldd	r20, Z+2	; 0x02
    19d8:	53 81       	ldd	r21, Z+3	; 0x03
    19da:	64 81       	ldd	r22, Z+4	; 0x04
    19dc:	75 81       	ldd	r23, Z+5	; 0x05
    19de:	86 17       	cp	r24, r22
    19e0:	97 07       	cpc	r25, r23
    19e2:	a1 f0       	breq	.+40     	; 0x1a0c <__vector_9+0x72>
    19e4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    19e8:	8d 7f       	andi	r24, 0xFD	; 253
    19ea:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    19ee:	ff 91       	pop	r31
    19f0:	ef 91       	pop	r30
    19f2:	9f 91       	pop	r25
    19f4:	8f 91       	pop	r24
    19f6:	7f 91       	pop	r23
    19f8:	6f 91       	pop	r22
    19fa:	5f 91       	pop	r21
    19fc:	4f 91       	pop	r20
    19fe:	3f 91       	pop	r19
    1a00:	2f 91       	pop	r18
    1a02:	0f 90       	pop	r0
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	0f 90       	pop	r0
    1a08:	1f 90       	pop	r1
    1a0a:	18 95       	reti
    1a0c:	ca 01       	movw	r24, r20
    1a0e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a12:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a16:	42 1b       	sub	r20, r18
    1a18:	53 0b       	sbc	r21, r19
    1a1a:	41 30       	cpi	r20, 0x01	; 1
    1a1c:	51 05       	cpc	r21, r1
    1a1e:	51 f0       	breq	.+20     	; 0x1a34 <__vector_9+0x9a>
    1a20:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1a24:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1a28:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1a2c:	82 60       	ori	r24, 0x02	; 2
    1a2e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1a32:	dd cf       	rjmp	.-70     	; 0x19ee <__vector_9+0x54>
    1a34:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a38:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	f0 cf       	rjmp	.-32     	; 0x1a20 <__vector_9+0x86>

00001a40 <__vector_7>:
    1a40:	1f 92       	push	r1
    1a42:	0f 92       	push	r0
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	0f 92       	push	r0
    1a48:	11 24       	eor	r1, r1
    1a4a:	8f 92       	push	r8
    1a4c:	9f 92       	push	r9
    1a4e:	af 92       	push	r10
    1a50:	bf 92       	push	r11
    1a52:	cf 92       	push	r12
    1a54:	df 92       	push	r13
    1a56:	ef 92       	push	r14
    1a58:	ff 92       	push	r15
    1a5a:	0f 93       	push	r16
    1a5c:	1f 93       	push	r17
    1a5e:	2f 93       	push	r18
    1a60:	3f 93       	push	r19
    1a62:	4f 93       	push	r20
    1a64:	5f 93       	push	r21
    1a66:	6f 93       	push	r22
    1a68:	7f 93       	push	r23
    1a6a:	8f 93       	push	r24
    1a6c:	9f 93       	push	r25
    1a6e:	af 93       	push	r26
    1a70:	bf 93       	push	r27
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	ef 93       	push	r30
    1a78:	ff 93       	push	r31
    1a7a:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <__data_end>
    1a7e:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <__data_end+0x1>
    1a82:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a86:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a8a:	b0 99       	sbic	0x16, 0	; 22
    1a8c:	98 c0       	rjmp	.+304    	; 0x1bbe <__vector_7+0x17e>
    1a8e:	47 01       	movw	r8, r14
    1a90:	0f 2c       	mov	r0, r15
    1a92:	00 0c       	add	r0, r0
    1a94:	aa 08       	sbc	r10, r10
    1a96:	bb 08       	sbc	r11, r11
    1a98:	54 01       	movw	r10, r8
    1a9a:	99 24       	eor	r9, r9
    1a9c:	88 24       	eor	r8, r8
    1a9e:	a0 e0       	ldi	r26, 0x00	; 0
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	88 2a       	or	r8, r24
    1aa4:	99 2a       	or	r9, r25
    1aa6:	aa 2a       	or	r10, r26
    1aa8:	bb 2a       	or	r11, r27
    1aaa:	c0 91 22 01 	lds	r28, 0x0122	; 0x800122 <timerQ>
    1aae:	d0 91 23 01 	lds	r29, 0x0123	; 0x800123 <timerQ+0x1>
    1ab2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <msgQ>
    1ab6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <msgQ+0x1>
    1aba:	20 97       	sbiw	r28, 0x00	; 0
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <__vector_7+0x80>
    1abe:	3f c0       	rjmp	.+126    	; 0x1b3e <__vector_7+0xfe>
    1ac0:	4a 81       	ldd	r20, Y+2	; 0x02
    1ac2:	5b 81       	ldd	r21, Y+3	; 0x03
    1ac4:	6c 81       	ldd	r22, Y+4	; 0x04
    1ac6:	7d 81       	ldd	r23, Y+5	; 0x05
    1ac8:	8a 01       	movw	r16, r20
    1aca:	9b 01       	movw	r18, r22
    1acc:	08 19       	sub	r16, r8
    1ace:	19 09       	sbc	r17, r9
    1ad0:	2a 09       	sbc	r18, r10
    1ad2:	3b 09       	sbc	r19, r11
    1ad4:	10 16       	cp	r1, r16
    1ad6:	11 06       	cpc	r1, r17
    1ad8:	12 06       	cpc	r1, r18
    1ada:	13 06       	cpc	r1, r19
    1adc:	0c f4       	brge	.+2      	; 0x1ae0 <__vector_7+0xa0>
    1ade:	40 c0       	rjmp	.+128    	; 0x1b60 <__vector_7+0x120>
    1ae0:	d8 80       	ld	r13, Y
    1ae2:	c9 80       	ldd	r12, Y+1	; 0x01
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	b9 f1       	breq	.+110    	; 0x1b56 <__vector_7+0x116>
    1ae8:	0e 81       	ldd	r16, Y+6	; 0x06
    1aea:	1f 81       	ldd	r17, Y+7	; 0x07
    1aec:	28 85       	ldd	r18, Y+8	; 0x08
    1aee:	39 85       	ldd	r19, Y+9	; 0x09
    1af0:	fc 01       	movw	r30, r24
    1af2:	46 81       	ldd	r20, Z+6	; 0x06
    1af4:	57 81       	ldd	r21, Z+7	; 0x07
    1af6:	60 85       	ldd	r22, Z+8	; 0x08
    1af8:	71 85       	ldd	r23, Z+9	; 0x09
    1afa:	04 17       	cp	r16, r20
    1afc:	15 07       	cpc	r17, r21
    1afe:	26 07       	cpc	r18, r22
    1b00:	37 07       	cpc	r19, r23
    1b02:	4c f1       	brlt	.+82     	; 0x1b56 <__vector_7+0x116>
    1b04:	dc 01       	movw	r26, r24
    1b06:	0a c0       	rjmp	.+20     	; 0x1b1c <__vector_7+0xdc>
    1b08:	46 81       	ldd	r20, Z+6	; 0x06
    1b0a:	57 81       	ldd	r21, Z+7	; 0x07
    1b0c:	60 85       	ldd	r22, Z+8	; 0x08
    1b0e:	71 85       	ldd	r23, Z+9	; 0x09
    1b10:	04 17       	cp	r16, r20
    1b12:	15 07       	cpc	r17, r21
    1b14:	26 07       	cpc	r18, r22
    1b16:	37 07       	cpc	r19, r23
    1b18:	dc f0       	brlt	.+54     	; 0x1b50 <__vector_7+0x110>
    1b1a:	df 01       	movw	r26, r30
    1b1c:	ed 91       	ld	r30, X+
    1b1e:	fc 91       	ld	r31, X
    1b20:	11 97       	sbiw	r26, 0x01	; 1
    1b22:	30 97       	sbiw	r30, 0x00	; 0
    1b24:	89 f7       	brne	.-30     	; 0x1b08 <__vector_7+0xc8>
    1b26:	19 82       	std	Y+1, r1	; 0x01
    1b28:	18 82       	st	Y, r1
    1b2a:	cd 93       	st	X+, r28
    1b2c:	dc 93       	st	X, r29
    1b2e:	38 2f       	mov	r19, r24
    1b30:	29 2f       	mov	r18, r25
    1b32:	cd 2d       	mov	r28, r13
    1b34:	dc 2d       	mov	r29, r12
    1b36:	83 2f       	mov	r24, r19
    1b38:	92 2f       	mov	r25, r18
    1b3a:	20 97       	sbiw	r28, 0x00	; 0
    1b3c:	09 f6       	brne	.-126    	; 0x1ac0 <__vector_7+0x80>
    1b3e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <timerQ+0x1>
    1b42:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <timerQ>
    1b46:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <msgQ+0x1>
    1b4a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <msgQ>
    1b4e:	13 c0       	rjmp	.+38     	; 0x1b76 <__vector_7+0x136>
    1b50:	f9 83       	std	Y+1, r31	; 0x01
    1b52:	e8 83       	st	Y, r30
    1b54:	ea cf       	rjmp	.-44     	; 0x1b2a <__vector_7+0xea>
    1b56:	99 83       	std	Y+1, r25	; 0x01
    1b58:	88 83       	st	Y, r24
    1b5a:	3c 2f       	mov	r19, r28
    1b5c:	2d 2f       	mov	r18, r29
    1b5e:	e9 cf       	rjmp	.-46     	; 0x1b32 <__vector_7+0xf2>
    1b60:	d0 93 23 01 	sts	0x0123, r29	; 0x800123 <timerQ+0x1>
    1b64:	c0 93 22 01 	sts	0x0122, r28	; 0x800122 <timerQ>
    1b68:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <msgQ+0x1>
    1b6c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <msgQ>
    1b70:	e6 16       	cp	r14, r22
    1b72:	f7 06       	cpc	r15, r23
    1b74:	d9 f1       	breq	.+118    	; 0x1bec <__vector_7+0x1ac>
    1b76:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1b7a:	8d 7f       	andi	r24, 0xFD	; 253
    1b7c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1b80:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
    1b84:	ff 91       	pop	r31
    1b86:	ef 91       	pop	r30
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	bf 91       	pop	r27
    1b8e:	af 91       	pop	r26
    1b90:	9f 91       	pop	r25
    1b92:	8f 91       	pop	r24
    1b94:	7f 91       	pop	r23
    1b96:	6f 91       	pop	r22
    1b98:	5f 91       	pop	r21
    1b9a:	4f 91       	pop	r20
    1b9c:	3f 91       	pop	r19
    1b9e:	2f 91       	pop	r18
    1ba0:	1f 91       	pop	r17
    1ba2:	0f 91       	pop	r16
    1ba4:	ff 90       	pop	r15
    1ba6:	ef 90       	pop	r14
    1ba8:	df 90       	pop	r13
    1baa:	cf 90       	pop	r12
    1bac:	bf 90       	pop	r11
    1bae:	af 90       	pop	r10
    1bb0:	9f 90       	pop	r9
    1bb2:	8f 90       	pop	r8
    1bb4:	0f 90       	pop	r0
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	0f 90       	pop	r0
    1bba:	1f 90       	pop	r1
    1bbc:	18 95       	reti
    1bbe:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bc2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bc6:	47 01       	movw	r8, r14
    1bc8:	8f ef       	ldi	r24, 0xFF	; 255
    1bca:	88 1a       	sub	r8, r24
    1bcc:	98 0a       	sbc	r9, r24
    1bce:	09 2c       	mov	r0, r9
    1bd0:	00 0c       	add	r0, r0
    1bd2:	aa 08       	sbc	r10, r10
    1bd4:	bb 08       	sbc	r11, r11
    1bd6:	d4 01       	movw	r26, r8
    1bd8:	99 27       	eor	r25, r25
    1bda:	88 27       	eor	r24, r24
    1bdc:	49 01       	movw	r8, r18
    1bde:	a1 2c       	mov	r10, r1
    1be0:	b1 2c       	mov	r11, r1
    1be2:	88 2a       	or	r8, r24
    1be4:	99 2a       	or	r9, r25
    1be6:	aa 2a       	or	r10, r26
    1be8:	bb 2a       	or	r11, r27
    1bea:	5f cf       	rjmp	.-322    	; 0x1aaa <__vector_7+0x6a>
    1bec:	ca 01       	movw	r24, r20
    1bee:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bf2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bf6:	42 1b       	sub	r20, r18
    1bf8:	53 0b       	sbc	r21, r19
    1bfa:	41 30       	cpi	r20, 0x01	; 1
    1bfc:	51 05       	cpc	r21, r1
    1bfe:	51 f0       	breq	.+20     	; 0x1c14 <__vector_7+0x1d4>
    1c00:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1c04:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1c08:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1c0c:	82 60       	ori	r24, 0x02	; 2
    1c0e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1c12:	b6 cf       	rjmp	.-148    	; 0x1b80 <__vector_7+0x140>
    1c14:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c18:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c1c:	01 96       	adiw	r24, 0x01	; 1
    1c1e:	f0 cf       	rjmp	.-32     	; 0x1c00 <__vector_7+0x1c0>

00001c20 <async>:
    1c20:	3f 92       	push	r3
    1c22:	4f 92       	push	r4
    1c24:	5f 92       	push	r5
    1c26:	6f 92       	push	r6
    1c28:	7f 92       	push	r7
    1c2a:	8f 92       	push	r8
    1c2c:	9f 92       	push	r9
    1c2e:	af 92       	push	r10
    1c30:	bf 92       	push	r11
    1c32:	cf 92       	push	r12
    1c34:	df 92       	push	r13
    1c36:	ef 92       	push	r14
    1c38:	ff 92       	push	r15
    1c3a:	0f 93       	push	r16
    1c3c:	1f 93       	push	r17
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
    1c42:	ef b7       	in	r30, 0x3f	; 63
    1c44:	e0 78       	andi	r30, 0x80	; 128
    1c46:	3e 2e       	mov	r3, r30
    1c48:	f8 94       	cli
    1c4a:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <msgPool>
    1c4e:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <msgPool+0x1>
    1c52:	20 97       	sbiw	r28, 0x00	; 0
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <async+0x38>
    1c56:	52 c1       	rjmp	.+676    	; 0x1efc <async+0x2dc>
    1c58:	e8 81       	ld	r30, Y
    1c5a:	f9 81       	ldd	r31, Y+1	; 0x01
    1c5c:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <msgPool+0x1>
    1c60:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <msgPool>
    1c64:	1b 87       	std	Y+11, r17	; 0x0b
    1c66:	0a 87       	std	Y+10, r16	; 0x0a
    1c68:	fd 86       	std	Y+13, r15	; 0x0d
    1c6a:	ec 86       	std	Y+12, r14	; 0x0c
    1c6c:	df 86       	std	Y+15, r13	; 0x0f
    1c6e:	ce 86       	std	Y+14, r12	; 0x0e
    1c70:	33 20       	and	r3, r3
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <async+0x56>
    1c74:	6f c0       	rjmp	.+222    	; 0x1d54 <async+0x134>
    1c76:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1c7a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1c7e:	02 80       	ldd	r0, Z+2	; 0x02
    1c80:	f3 81       	ldd	r31, Z+3	; 0x03
    1c82:	e0 2d       	mov	r30, r0
    1c84:	c2 80       	ldd	r12, Z+2	; 0x02
    1c86:	d3 80       	ldd	r13, Z+3	; 0x03
    1c88:	e4 80       	ldd	r14, Z+4	; 0x04
    1c8a:	f5 80       	ldd	r15, Z+5	; 0x05
    1c8c:	c6 0e       	add	r12, r22
    1c8e:	d7 1e       	adc	r13, r23
    1c90:	e8 1e       	adc	r14, r24
    1c92:	f9 1e       	adc	r15, r25
    1c94:	ca 82       	std	Y+2, r12	; 0x02
    1c96:	db 82       	std	Y+3, r13	; 0x03
    1c98:	ec 82       	std	Y+4, r14	; 0x04
    1c9a:	fd 82       	std	Y+5, r15	; 0x05
    1c9c:	12 16       	cp	r1, r18
    1c9e:	13 06       	cpc	r1, r19
    1ca0:	14 06       	cpc	r1, r20
    1ca2:	15 06       	cpc	r1, r21
    1ca4:	0c f0       	brlt	.+2      	; 0x1ca8 <async+0x88>
    1ca6:	f8 c0       	rjmp	.+496    	; 0x1e98 <async+0x278>
    1ca8:	da 01       	movw	r26, r20
    1caa:	c9 01       	movw	r24, r18
    1cac:	8c 01       	movw	r16, r24
    1cae:	9d 01       	movw	r18, r26
    1cb0:	0c 0d       	add	r16, r12
    1cb2:	1d 1d       	adc	r17, r13
    1cb4:	2e 1d       	adc	r18, r14
    1cb6:	3f 1d       	adc	r19, r15
    1cb8:	0e 83       	std	Y+6, r16	; 0x06
    1cba:	1f 83       	std	Y+7, r17	; 0x07
    1cbc:	28 87       	std	Y+8, r18	; 0x08
    1cbe:	39 87       	std	Y+9, r19	; 0x09
    1cc0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1cc4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1cc8:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ccc:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cd0:	b0 99       	sbic	0x16, 0	; 22
    1cd2:	49 c0       	rjmp	.+146    	; 0x1d66 <async+0x146>
    1cd4:	2c 01       	movw	r4, r24
    1cd6:	09 2e       	mov	r0, r25
    1cd8:	00 0c       	add	r0, r0
    1cda:	66 08       	sbc	r6, r6
    1cdc:	77 08       	sbc	r7, r7
    1cde:	52 01       	movw	r10, r4
    1ce0:	99 24       	eor	r9, r9
    1ce2:	88 24       	eor	r8, r8
    1ce4:	2b 01       	movw	r4, r22
    1ce6:	61 2c       	mov	r6, r1
    1ce8:	71 2c       	mov	r7, r1
    1cea:	48 28       	or	r4, r8
    1cec:	59 28       	or	r5, r9
    1cee:	6a 28       	or	r6, r10
    1cf0:	7b 28       	or	r7, r11
    1cf2:	b7 01       	movw	r22, r14
    1cf4:	a6 01       	movw	r20, r12
    1cf6:	44 19       	sub	r20, r4
    1cf8:	55 09       	sbc	r21, r5
    1cfa:	66 09       	sbc	r22, r6
    1cfc:	77 09       	sbc	r23, r7
    1cfe:	14 16       	cp	r1, r20
    1d00:	15 06       	cpc	r1, r21
    1d02:	16 06       	cpc	r1, r22
    1d04:	17 06       	cpc	r1, r23
    1d06:	0c f0       	brlt	.+2      	; 0x1d0a <async+0xea>
    1d08:	68 c0       	rjmp	.+208    	; 0x1dda <async+0x1ba>
    1d0a:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <timerQ>
    1d0e:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <timerQ+0x1>
    1d12:	10 97       	sbiw	r26, 0x00	; 0
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <async+0xf8>
    1d16:	dc c0       	rjmp	.+440    	; 0x1ed0 <async+0x2b0>
    1d18:	12 96       	adiw	r26, 0x02	; 2
    1d1a:	0d 91       	ld	r16, X+
    1d1c:	1d 91       	ld	r17, X+
    1d1e:	2d 91       	ld	r18, X+
    1d20:	3c 91       	ld	r19, X
    1d22:	15 97       	sbiw	r26, 0x05	; 5
    1d24:	c0 16       	cp	r12, r16
    1d26:	d1 06       	cpc	r13, r17
    1d28:	e2 06       	cpc	r14, r18
    1d2a:	f3 06       	cpc	r15, r19
    1d2c:	5c f4       	brge	.+22     	; 0x1d44 <async+0x124>
    1d2e:	d0 c0       	rjmp	.+416    	; 0x1ed0 <async+0x2b0>
    1d30:	42 81       	ldd	r20, Z+2	; 0x02
    1d32:	53 81       	ldd	r21, Z+3	; 0x03
    1d34:	64 81       	ldd	r22, Z+4	; 0x04
    1d36:	75 81       	ldd	r23, Z+5	; 0x05
    1d38:	c4 16       	cp	r12, r20
    1d3a:	d5 06       	cpc	r13, r21
    1d3c:	e6 06       	cpc	r14, r22
    1d3e:	f7 06       	cpc	r15, r23
    1d40:	4c f1       	brlt	.+82     	; 0x1d94 <async+0x174>
    1d42:	df 01       	movw	r26, r30
    1d44:	ed 91       	ld	r30, X+
    1d46:	fc 91       	ld	r31, X
    1d48:	11 97       	sbiw	r26, 0x01	; 1
    1d4a:	30 97       	sbiw	r30, 0x00	; 0
    1d4c:	89 f7       	brne	.-30     	; 0x1d30 <async+0x110>
    1d4e:	19 82       	std	Y+1, r1	; 0x01
    1d50:	18 82       	st	Y, r1
    1d52:	22 c0       	rjmp	.+68     	; 0x1d98 <async+0x178>
    1d54:	c0 90 1e 01 	lds	r12, 0x011E	; 0x80011e <timestamp>
    1d58:	d0 90 1f 01 	lds	r13, 0x011F	; 0x80011f <timestamp+0x1>
    1d5c:	e0 90 20 01 	lds	r14, 0x0120	; 0x800120 <timestamp+0x2>
    1d60:	f0 90 21 01 	lds	r15, 0x0121	; 0x800121 <timestamp+0x3>
    1d64:	93 cf       	rjmp	.-218    	; 0x1c8c <async+0x6c>
    1d66:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d6a:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d6e:	2c 01       	movw	r4, r24
    1d70:	4f ef       	ldi	r20, 0xFF	; 255
    1d72:	44 1a       	sub	r4, r20
    1d74:	54 0a       	sbc	r5, r20
    1d76:	05 2c       	mov	r0, r5
    1d78:	00 0c       	add	r0, r0
    1d7a:	66 08       	sbc	r6, r6
    1d7c:	77 08       	sbc	r7, r7
    1d7e:	b2 01       	movw	r22, r4
    1d80:	55 27       	eor	r21, r21
    1d82:	44 27       	eor	r20, r20
    1d84:	2f 01       	movw	r4, r30
    1d86:	61 2c       	mov	r6, r1
    1d88:	71 2c       	mov	r7, r1
    1d8a:	44 2a       	or	r4, r20
    1d8c:	55 2a       	or	r5, r21
    1d8e:	66 2a       	or	r6, r22
    1d90:	77 2a       	or	r7, r23
    1d92:	af cf       	rjmp	.-162    	; 0x1cf2 <async+0xd2>
    1d94:	f9 83       	std	Y+1, r31	; 0x01
    1d96:	e8 83       	st	Y, r30
    1d98:	cd 93       	st	X+, r28
    1d9a:	dc 93       	st	X, r29
    1d9c:	82 17       	cp	r24, r18
    1d9e:	93 07       	cpc	r25, r19
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <async+0x184>
    1da2:	7f c0       	rjmp	.+254    	; 0x1ea2 <async+0x282>
    1da4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1da8:	8d 7f       	andi	r24, 0xFD	; 253
    1daa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1dae:	33 20       	and	r3, r3
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <async+0x194>
    1db2:	78 94       	sei
    1db4:	ce 01       	movw	r24, r28
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	1f 91       	pop	r17
    1dbc:	0f 91       	pop	r16
    1dbe:	ff 90       	pop	r15
    1dc0:	ef 90       	pop	r14
    1dc2:	df 90       	pop	r13
    1dc4:	cf 90       	pop	r12
    1dc6:	bf 90       	pop	r11
    1dc8:	af 90       	pop	r10
    1dca:	9f 90       	pop	r9
    1dcc:	8f 90       	pop	r8
    1dce:	7f 90       	pop	r7
    1dd0:	6f 90       	pop	r6
    1dd2:	5f 90       	pop	r5
    1dd4:	4f 90       	pop	r4
    1dd6:	3f 90       	pop	r3
    1dd8:	08 95       	ret
    1dda:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <msgQ>
    1dde:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <msgQ+0x1>
    1de2:	10 97       	sbiw	r26, 0x00	; 0
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <async+0x1c8>
    1de6:	83 c0       	rjmp	.+262    	; 0x1eee <async+0x2ce>
    1de8:	16 96       	adiw	r26, 0x06	; 6
    1dea:	cd 90       	ld	r12, X+
    1dec:	dd 90       	ld	r13, X+
    1dee:	ed 90       	ld	r14, X+
    1df0:	fc 90       	ld	r15, X
    1df2:	19 97       	sbiw	r26, 0x09	; 9
    1df4:	0c 15       	cp	r16, r12
    1df6:	1d 05       	cpc	r17, r13
    1df8:	2e 05       	cpc	r18, r14
    1dfa:	3f 05       	cpc	r19, r15
    1dfc:	64 f4       	brge	.+24     	; 0x1e16 <async+0x1f6>
    1dfe:	77 c0       	rjmp	.+238    	; 0x1eee <async+0x2ce>
    1e00:	c6 80       	ldd	r12, Z+6	; 0x06
    1e02:	d7 80       	ldd	r13, Z+7	; 0x07
    1e04:	e0 84       	ldd	r14, Z+8	; 0x08
    1e06:	f1 84       	ldd	r15, Z+9	; 0x09
    1e08:	0c 15       	cp	r16, r12
    1e0a:	1d 05       	cpc	r17, r13
    1e0c:	2e 05       	cpc	r18, r14
    1e0e:	3f 05       	cpc	r19, r15
    1e10:	0c f4       	brge	.+2      	; 0x1e14 <async+0x1f4>
    1e12:	5b c0       	rjmp	.+182    	; 0x1eca <async+0x2aa>
    1e14:	df 01       	movw	r26, r30
    1e16:	ed 91       	ld	r30, X+
    1e18:	fc 91       	ld	r31, X
    1e1a:	11 97       	sbiw	r26, 0x01	; 1
    1e1c:	30 97       	sbiw	r30, 0x00	; 0
    1e1e:	81 f7       	brne	.-32     	; 0x1e00 <async+0x1e0>
    1e20:	19 82       	std	Y+1, r1	; 0x01
    1e22:	18 82       	st	Y, r1
    1e24:	cd 93       	st	X+, r28
    1e26:	dc 93       	st	X, r29
    1e28:	33 20       	and	r3, r3
    1e2a:	21 f2       	breq	.-120    	; 0x1db4 <async+0x194>
    1e2c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1e30:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <async+0x21a>
    1e38:	bc cf       	rjmp	.-136    	; 0x1db2 <async+0x192>
    1e3a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1e3e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1e42:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <msgQ>
    1e46:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <msgQ+0x1>
    1e4a:	02 81       	ldd	r16, Z+2	; 0x02
    1e4c:	13 81       	ldd	r17, Z+3	; 0x03
    1e4e:	d9 01       	movw	r26, r18
    1e50:	16 96       	adiw	r26, 0x06	; 6
    1e52:	4d 91       	ld	r20, X+
    1e54:	5d 91       	ld	r21, X+
    1e56:	6d 91       	ld	r22, X+
    1e58:	7c 91       	ld	r23, X
    1e5a:	19 97       	sbiw	r26, 0x09	; 9
    1e5c:	d8 01       	movw	r26, r16
    1e5e:	16 96       	adiw	r26, 0x06	; 6
    1e60:	0d 91       	ld	r16, X+
    1e62:	1d 91       	ld	r17, X+
    1e64:	2d 91       	ld	r18, X+
    1e66:	3c 91       	ld	r19, X
    1e68:	19 97       	sbiw	r26, 0x09	; 9
    1e6a:	40 1b       	sub	r20, r16
    1e6c:	51 0b       	sbc	r21, r17
    1e6e:	62 0b       	sbc	r22, r18
    1e70:	73 0b       	sbc	r23, r19
    1e72:	77 ff       	sbrs	r23, 7
    1e74:	9e cf       	rjmp	.-196    	; 0x1db2 <async+0x192>
    1e76:	dc 01       	movw	r26, r24
    1e78:	2d 91       	ld	r18, X+
    1e7a:	3c 91       	ld	r19, X
    1e7c:	11 97       	sbiw	r26, 0x01	; 1
    1e7e:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
    1e82:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
    1e86:	ed 93       	st	X+, r30
    1e88:	fc 93       	st	X, r31
    1e8a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
    1e8e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
    1e92:	0e 94 ca 04 	call	0x994	; 0x994 <dispatch>
    1e96:	8d cf       	rjmp	.-230    	; 0x1db2 <async+0x192>
    1e98:	8f ef       	ldi	r24, 0xFF	; 255
    1e9a:	9f ef       	ldi	r25, 0xFF	; 255
    1e9c:	af ef       	ldi	r26, 0xFF	; 255
    1e9e:	bf e7       	ldi	r27, 0x7F	; 127
    1ea0:	05 cf       	rjmp	.-502    	; 0x1cac <async+0x8c>
    1ea2:	c8 01       	movw	r24, r16
    1ea4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ea8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1eac:	04 1b       	sub	r16, r20
    1eae:	15 0b       	sbc	r17, r21
    1eb0:	01 30       	cpi	r16, 0x01	; 1
    1eb2:	11 05       	cpc	r17, r1
    1eb4:	b1 f0       	breq	.+44     	; 0x1ee2 <async+0x2c2>
    1eb6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1eba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1ebe:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1ec2:	82 60       	ori	r24, 0x02	; 2
    1ec4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1ec8:	72 cf       	rjmp	.-284    	; 0x1dae <async+0x18e>
    1eca:	f9 83       	std	Y+1, r31	; 0x01
    1ecc:	e8 83       	st	Y, r30
    1ece:	aa cf       	rjmp	.-172    	; 0x1e24 <async+0x204>
    1ed0:	b9 83       	std	Y+1, r27	; 0x01
    1ed2:	a8 83       	st	Y, r26
    1ed4:	d0 93 23 01 	sts	0x0123, r29	; 0x800123 <timerQ+0x1>
    1ed8:	c0 93 22 01 	sts	0x0122, r28	; 0x800122 <timerQ>
    1edc:	97 01       	movw	r18, r14
    1ede:	86 01       	movw	r16, r12
    1ee0:	5d cf       	rjmp	.-326    	; 0x1d9c <async+0x17c>
    1ee2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ee6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1eea:	01 96       	adiw	r24, 0x01	; 1
    1eec:	e4 cf       	rjmp	.-56     	; 0x1eb6 <async+0x296>
    1eee:	b9 83       	std	Y+1, r27	; 0x01
    1ef0:	a8 83       	st	Y, r26
    1ef2:	d0 93 25 01 	sts	0x0125, r29	; 0x800125 <msgQ+0x1>
    1ef6:	c0 93 24 01 	sts	0x0124, r28	; 0x800124 <msgQ>
    1efa:	96 cf       	rjmp	.-212    	; 0x1e28 <async+0x208>
    1efc:	0e 94 2a 05 	call	0xa54	; 0xa54 <dequeue.part.0>

00001f00 <sync>:
    1f00:	cf 92       	push	r12
    1f02:	df 92       	push	r13
    1f04:	ef 92       	push	r14
    1f06:	ff 92       	push	r15
    1f08:	0f 93       	push	r16
    1f0a:	1f 93       	push	r17
    1f0c:	cf 93       	push	r28
    1f0e:	df 93       	push	r29
    1f10:	ec 01       	movw	r28, r24
    1f12:	7b 01       	movw	r14, r22
    1f14:	6a 01       	movw	r12, r20
    1f16:	1f b7       	in	r17, 0x3f	; 63
    1f18:	10 78       	andi	r17, 0x80	; 128
    1f1a:	f8 94       	cli
    1f1c:	a8 81       	ld	r26, Y
    1f1e:	b9 81       	ldd	r27, Y+1	; 0x01
    1f20:	10 97       	sbiw	r26, 0x00	; 0
    1f22:	19 f4       	brne	.+6      	; 0x1f2a <sync+0x2a>
    1f24:	62 c0       	rjmp	.+196    	; 0x1fea <sync+0xea>
    1f26:	a0 81       	ld	r26, Z
    1f28:	b1 81       	ldd	r27, Z+1	; 0x01
    1f2a:	14 96       	adiw	r26, 0x04	; 4
    1f2c:	ed 91       	ld	r30, X+
    1f2e:	fc 91       	ld	r31, X
    1f30:	15 97       	sbiw	r26, 0x05	; 5
    1f32:	30 97       	sbiw	r30, 0x00	; 0
    1f34:	c1 f7       	brne	.-16     	; 0x1f26 <sync+0x26>
    1f36:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1f3a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1f3e:	2a 17       	cp	r18, r26
    1f40:	3b 07       	cpc	r19, r27
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <sync+0x46>
    1f44:	4c c0       	rjmp	.+152    	; 0x1fde <sync+0xde>
    1f46:	11 23       	and	r17, r17
    1f48:	a1 f1       	breq	.+104    	; 0x1fb2 <sync+0xb2>
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	19 f0       	breq	.+6      	; 0x1f58 <sync+0x58>
    1f52:	fc 01       	movw	r30, r24
    1f54:	15 82       	std	Z+5, r1	; 0x05
    1f56:	14 82       	std	Z+4, r1	; 0x04
    1f58:	3b 83       	std	Y+3, r19	; 0x03
    1f5a:	2a 83       	std	Y+2, r18	; 0x02
    1f5c:	f9 01       	movw	r30, r18
    1f5e:	d5 83       	std	Z+5, r29	; 0x05
    1f60:	c4 83       	std	Z+4, r28	; 0x04
    1f62:	cd 01       	movw	r24, r26
    1f64:	0e 94 ca 04 	call	0x994	; 0x994 <dispatch>
    1f68:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1f6c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1f70:	82 81       	ldd	r24, Z+2	; 0x02
    1f72:	93 81       	ldd	r25, Z+3	; 0x03
    1f74:	89 2b       	or	r24, r25
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <sync+0x7a>
    1f78:	41 c0       	rjmp	.+130    	; 0x1ffc <sync+0xfc>
    1f7a:	f9 83       	std	Y+1, r31	; 0x01
    1f7c:	e8 83       	st	Y, r30
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	9b 81       	ldd	r25, Y+3	; 0x03
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	09 f0       	breq	.+2      	; 0x1f88 <sync+0x88>
    1f86:	78 94       	sei
    1f88:	b6 01       	movw	r22, r12
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	f7 01       	movw	r30, r14
    1f8e:	09 95       	icall
    1f90:	f8 2e       	mov	r15, r24
    1f92:	09 2f       	mov	r16, r25
    1f94:	8f b7       	in	r24, 0x3f	; 63
    1f96:	f8 94       	cli
    1f98:	19 82       	std	Y+1, r1	; 0x01
    1f9a:	18 82       	st	Y, r1
    1f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa0:	82 30       	cpi	r24, 0x02	; 2
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	a0 f4       	brcc	.+40     	; 0x1fce <sync+0xce>
    1fa6:	11 23       	and	r17, r17
    1fa8:	79 f0       	breq	.+30     	; 0x1fc8 <sync+0xc8>
    1faa:	78 94       	sei
    1fac:	8f 2d       	mov	r24, r15
    1fae:	90 2f       	mov	r25, r16
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <sync+0xb6>
    1fb2:	8f ef       	ldi	r24, 0xFF	; 255
    1fb4:	9f ef       	ldi	r25, 0xFF	; 255
    1fb6:	df 91       	pop	r29
    1fb8:	cf 91       	pop	r28
    1fba:	1f 91       	pop	r17
    1fbc:	0f 91       	pop	r16
    1fbe:	ff 90       	pop	r15
    1fc0:	ef 90       	pop	r14
    1fc2:	df 90       	pop	r13
    1fc4:	cf 90       	pop	r12
    1fc6:	08 95       	ret
    1fc8:	8f 2d       	mov	r24, r15
    1fca:	90 2f       	mov	r25, r16
    1fcc:	f4 cf       	rjmp	.-24     	; 0x1fb6 <sync+0xb6>
    1fce:	1b 82       	std	Y+3, r1	; 0x03
    1fd0:	1a 82       	std	Y+2, r1	; 0x02
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	15 82       	std	Z+5, r1	; 0x05
    1fd6:	14 82       	std	Z+4, r1	; 0x04
    1fd8:	0e 94 ca 04 	call	0x994	; 0x994 <dispatch>
    1fdc:	e4 cf       	rjmp	.-56     	; 0x1fa6 <sync+0xa6>
    1fde:	11 23       	and	r17, r17
    1fe0:	41 f3       	breq	.-48     	; 0x1fb2 <sync+0xb2>
    1fe2:	78 94       	sei
    1fe4:	8f ef       	ldi	r24, 0xFF	; 255
    1fe6:	9f ef       	ldi	r25, 0xFF	; 255
    1fe8:	e6 cf       	rjmp	.-52     	; 0x1fb6 <sync+0xb6>
    1fea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1fee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1ff2:	99 83       	std	Y+1, r25	; 0x01
    1ff4:	88 83       	st	Y, r24
    1ff6:	11 23       	and	r17, r17
    1ff8:	39 f2       	breq	.-114    	; 0x1f88 <sync+0x88>
    1ffa:	c1 cf       	rjmp	.-126    	; 0x1f7e <sync+0x7e>
    1ffc:	78 94       	sei
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	d9 cf       	rjmp	.-78     	; 0x1fb6 <sync+0xb6>

00002004 <run>:
    2004:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <msgQ>
    2008:	d0 91 25 01 	lds	r29, 0x0125	; 0x800125 <msgQ+0x1>
    200c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2010:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2014:	20 97       	sbiw	r28, 0x00	; 0
    2016:	09 f4       	brne	.+2      	; 0x201a <run+0x16>
    2018:	6e c0       	rjmp	.+220    	; 0x20f6 <run+0xf2>
    201a:	88 81       	ld	r24, Y
    201c:	99 81       	ldd	r25, Y+1	; 0x01
    201e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <msgQ+0x1>
    2022:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <msgQ>
    2026:	d3 83       	std	Z+3, r29	; 0x03
    2028:	c2 83       	std	Z+2, r28	; 0x02
    202a:	78 94       	sei
    202c:	4e 85       	ldd	r20, Y+14	; 0x0e
    202e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2030:	6c 85       	ldd	r22, Y+12	; 0x0c
    2032:	7d 85       	ldd	r23, Y+13	; 0x0d
    2034:	8a 85       	ldd	r24, Y+10	; 0x0a
    2036:	9b 85       	ldd	r25, Y+11	; 0x0b
    2038:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <sync>
    203c:	8f b7       	in	r24, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <msgPool>
    2044:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <msgPool+0x1>
    2048:	99 83       	std	Y+1, r25	; 0x01
    204a:	88 83       	st	Y, r24
    204c:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <msgPool+0x1>
    2050:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <msgPool>
    2054:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <activeStack>
    2058:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <activeStack+0x1>
    205c:	f7 01       	movw	r30, r14
    205e:	a0 81       	ld	r26, Z
    2060:	b1 81       	ldd	r27, Z+1	; 0x01
    2062:	12 96       	adiw	r26, 0x02	; 2
    2064:	8d 91       	ld	r24, X+
    2066:	9c 91       	ld	r25, X
    2068:	13 97       	sbiw	r26, 0x03	; 3
    206a:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <msgQ>
    206e:	d0 91 25 01 	lds	r29, 0x0125	; 0x800125 <msgQ+0x1>
    2072:	20 97       	sbiw	r28, 0x00	; 0
    2074:	a9 f0       	breq	.+42     	; 0x20a0 <run+0x9c>
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	49 f2       	breq	.-110    	; 0x200c <run+0x8>
    207a:	4e 81       	ldd	r20, Y+6	; 0x06
    207c:	5f 81       	ldd	r21, Y+7	; 0x07
    207e:	68 85       	ldd	r22, Y+8	; 0x08
    2080:	79 85       	ldd	r23, Y+9	; 0x09
    2082:	fc 01       	movw	r30, r24
    2084:	06 81       	ldd	r16, Z+6	; 0x06
    2086:	17 81       	ldd	r17, Z+7	; 0x07
    2088:	20 85       	ldd	r18, Z+8	; 0x08
    208a:	31 85       	ldd	r19, Z+9	; 0x09
    208c:	40 1b       	sub	r20, r16
    208e:	51 0b       	sbc	r21, r17
    2090:	62 0b       	sbc	r22, r18
    2092:	73 0b       	sbc	r23, r19
    2094:	14 16       	cp	r1, r20
    2096:	15 06       	cpc	r1, r21
    2098:	16 06       	cpc	r1, r22
    209a:	17 06       	cpc	r1, r23
    209c:	0c f0       	brlt	.+2      	; 0x20a0 <run+0x9c>
    209e:	b6 cf       	rjmp	.-148    	; 0x200c <run+0x8>
    20a0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <activeStack+0x1>
    20a4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <activeStack>
    20a8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    20ac:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    20b0:	f7 01       	movw	r30, r14
    20b2:	91 83       	std	Z+1, r25	; 0x01
    20b4:	80 83       	st	Z, r24
    20b6:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <threadPool+0x1>
    20ba:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <threadPool>
    20be:	14 96       	adiw	r26, 0x04	; 4
    20c0:	ed 91       	ld	r30, X+
    20c2:	fc 91       	ld	r31, X
    20c4:	15 97       	sbiw	r26, 0x05	; 5
    20c6:	30 97       	sbiw	r30, 0x00	; 0
    20c8:	41 f0       	breq	.+16     	; 0x20da <run+0xd6>
    20ca:	a0 81       	ld	r26, Z
    20cc:	b1 81       	ldd	r27, Z+1	; 0x01
    20ce:	14 96       	adiw	r26, 0x04	; 4
    20d0:	ed 91       	ld	r30, X+
    20d2:	fc 91       	ld	r31, X
    20d4:	15 97       	sbiw	r26, 0x05	; 5
    20d6:	30 97       	sbiw	r30, 0x00	; 0
    20d8:	c1 f7       	brne	.-16     	; 0x20ca <run+0xc6>
    20da:	cd 01       	movw	r24, r26
    20dc:	0e 94 ca 04 	call	0x994	; 0x994 <dispatch>
    20e0:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <msgQ>
    20e4:	d0 91 25 01 	lds	r29, 0x0125	; 0x800125 <msgQ+0x1>
    20e8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    20ec:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    20f0:	20 97       	sbiw	r28, 0x00	; 0
    20f2:	09 f0       	breq	.+2      	; 0x20f6 <run+0xf2>
    20f4:	92 cf       	rjmp	.-220    	; 0x201a <run+0x16>
    20f6:	0e 94 2a 05 	call	0xa54	; 0xa54 <dequeue.part.0>

000020fa <install>:
    20fa:	42 31       	cpi	r20, 0x12	; 18
    20fc:	b8 f4       	brcc	.+46     	; 0x212c <install+0x32>
    20fe:	2f b7       	in	r18, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	50 e0       	ldi	r21, 0x00	; 0
    2104:	44 0f       	add	r20, r20
    2106:	55 1f       	adc	r21, r21
    2108:	fa 01       	movw	r30, r20
    210a:	ea 5d       	subi	r30, 0xDA	; 218
    210c:	fe 4f       	sbci	r31, 0xFE	; 254
    210e:	91 83       	std	Z+1, r25	; 0x01
    2110:	80 83       	st	Z, r24
    2112:	fa 01       	movw	r30, r20
    2114:	e2 54       	subi	r30, 0x42	; 66
    2116:	fe 4f       	sbci	r31, 0xFE	; 254
    2118:	71 83       	std	Z+1, r23	; 0x01
    211a:	60 83       	st	Z, r22
    211c:	41 e0       	ldi	r20, 0x01	; 1
    211e:	50 e0       	ldi	r21, 0x00	; 0
    2120:	fc 01       	movw	r30, r24
    2122:	53 83       	std	Z+3, r21	; 0x03
    2124:	42 83       	std	Z+2, r20	; 0x02
    2126:	27 ff       	sbrs	r18, 7
    2128:	01 c0       	rjmp	.+2      	; 0x212c <install+0x32>
    212a:	78 94       	sei
    212c:	08 95       	ret

0000212e <tinytimber>:
    212e:	8c 01       	movw	r16, r24
    2130:	7b 01       	movw	r14, r22
    2132:	6a 01       	movw	r12, r20
    2134:	8f b7       	in	r24, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	0e 94 5f 04 	call	0x8be	; 0x8be <initialize>
    213c:	78 94       	sei
    213e:	e1 14       	cp	r14, r1
    2140:	f1 04       	cpc	r15, r1
    2142:	41 f0       	breq	.+16     	; 0x2154 <tinytimber+0x26>
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	a9 01       	movw	r20, r18
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	70 e0       	ldi	r23, 0x00	; 0
    214e:	cb 01       	movw	r24, r22
    2150:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <async>
    2154:	8f b7       	in	r24, 0x3f	; 63
    2156:	f8 94       	cli
    2158:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <schedule>
    215c:	78 94       	sei
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	83 bf       	out	0x33, r24	; 51
    2162:	88 95       	sleep
    2164:	fd cf       	rjmp	.-6      	; 0x2160 <tinytimber+0x32>

00002166 <__divmodsi4>:
    2166:	05 2e       	mov	r0, r21
    2168:	97 fb       	bst	r25, 7
    216a:	1e f4       	brtc	.+6      	; 0x2172 <__divmodsi4+0xc>
    216c:	00 94       	com	r0
    216e:	0e 94 ca 10 	call	0x2194	; 0x2194 <__negsi2>
    2172:	57 fd       	sbrc	r21, 7
    2174:	07 d0       	rcall	.+14     	; 0x2184 <__divmodsi4_neg2>
    2176:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__udivmodsi4>
    217a:	07 fc       	sbrc	r0, 7
    217c:	03 d0       	rcall	.+6      	; 0x2184 <__divmodsi4_neg2>
    217e:	4e f4       	brtc	.+18     	; 0x2192 <__divmodsi4_exit>
    2180:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__negsi2>

00002184 <__divmodsi4_neg2>:
    2184:	50 95       	com	r21
    2186:	40 95       	com	r20
    2188:	30 95       	com	r19
    218a:	21 95       	neg	r18
    218c:	3f 4f       	sbci	r19, 0xFF	; 255
    218e:	4f 4f       	sbci	r20, 0xFF	; 255
    2190:	5f 4f       	sbci	r21, 0xFF	; 255

00002192 <__divmodsi4_exit>:
    2192:	08 95       	ret

00002194 <__negsi2>:
    2194:	90 95       	com	r25
    2196:	80 95       	com	r24
    2198:	70 95       	com	r23
    219a:	61 95       	neg	r22
    219c:	7f 4f       	sbci	r23, 0xFF	; 255
    219e:	8f 4f       	sbci	r24, 0xFF	; 255
    21a0:	9f 4f       	sbci	r25, 0xFF	; 255
    21a2:	08 95       	ret

000021a4 <__udivmodsi4>:
    21a4:	a1 e2       	ldi	r26, 0x21	; 33
    21a6:	1a 2e       	mov	r1, r26
    21a8:	aa 1b       	sub	r26, r26
    21aa:	bb 1b       	sub	r27, r27
    21ac:	fd 01       	movw	r30, r26
    21ae:	0d c0       	rjmp	.+26     	; 0x21ca <__udivmodsi4_ep>

000021b0 <__udivmodsi4_loop>:
    21b0:	aa 1f       	adc	r26, r26
    21b2:	bb 1f       	adc	r27, r27
    21b4:	ee 1f       	adc	r30, r30
    21b6:	ff 1f       	adc	r31, r31
    21b8:	a2 17       	cp	r26, r18
    21ba:	b3 07       	cpc	r27, r19
    21bc:	e4 07       	cpc	r30, r20
    21be:	f5 07       	cpc	r31, r21
    21c0:	20 f0       	brcs	.+8      	; 0x21ca <__udivmodsi4_ep>
    21c2:	a2 1b       	sub	r26, r18
    21c4:	b3 0b       	sbc	r27, r19
    21c6:	e4 0b       	sbc	r30, r20
    21c8:	f5 0b       	sbc	r31, r21

000021ca <__udivmodsi4_ep>:
    21ca:	66 1f       	adc	r22, r22
    21cc:	77 1f       	adc	r23, r23
    21ce:	88 1f       	adc	r24, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	1a 94       	dec	r1
    21d4:	69 f7       	brne	.-38     	; 0x21b0 <__udivmodsi4_loop>
    21d6:	60 95       	com	r22
    21d8:	70 95       	com	r23
    21da:	80 95       	com	r24
    21dc:	90 95       	com	r25
    21de:	9b 01       	movw	r18, r22
    21e0:	ac 01       	movw	r20, r24
    21e2:	bd 01       	movw	r22, r26
    21e4:	cf 01       	movw	r24, r30
    21e6:	08 95       	ret

000021e8 <setjmp>:
    21e8:	dc 01       	movw	r26, r24
    21ea:	2d 92       	st	X+, r2
    21ec:	3d 92       	st	X+, r3
    21ee:	4d 92       	st	X+, r4
    21f0:	5d 92       	st	X+, r5
    21f2:	6d 92       	st	X+, r6
    21f4:	7d 92       	st	X+, r7
    21f6:	8d 92       	st	X+, r8
    21f8:	9d 92       	st	X+, r9
    21fa:	ad 92       	st	X+, r10
    21fc:	bd 92       	st	X+, r11
    21fe:	cd 92       	st	X+, r12
    2200:	dd 92       	st	X+, r13
    2202:	ed 92       	st	X+, r14
    2204:	fd 92       	st	X+, r15
    2206:	0d 93       	st	X+, r16
    2208:	1d 93       	st	X+, r17
    220a:	cd 93       	st	X+, r28
    220c:	dd 93       	st	X+, r29
    220e:	ff 91       	pop	r31
    2210:	ef 91       	pop	r30
    2212:	8d b7       	in	r24, 0x3d	; 61
    2214:	8d 93       	st	X+, r24
    2216:	8e b7       	in	r24, 0x3e	; 62
    2218:	8d 93       	st	X+, r24
    221a:	8f b7       	in	r24, 0x3f	; 63
    221c:	8d 93       	st	X+, r24
    221e:	ed 93       	st	X+, r30
    2220:	fd 93       	st	X+, r31
    2222:	88 27       	eor	r24, r24
    2224:	99 27       	eor	r25, r25
    2226:	09 94       	ijmp

00002228 <longjmp>:
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	81 30       	cpi	r24, 0x01	; 1
    222e:	91 05       	cpc	r25, r1
    2230:	81 1d       	adc	r24, r1
    2232:	2d 90       	ld	r2, X+
    2234:	3d 90       	ld	r3, X+
    2236:	4d 90       	ld	r4, X+
    2238:	5d 90       	ld	r5, X+
    223a:	6d 90       	ld	r6, X+
    223c:	7d 90       	ld	r7, X+
    223e:	8d 90       	ld	r8, X+
    2240:	9d 90       	ld	r9, X+
    2242:	ad 90       	ld	r10, X+
    2244:	bd 90       	ld	r11, X+
    2246:	cd 90       	ld	r12, X+
    2248:	dd 90       	ld	r13, X+
    224a:	ed 90       	ld	r14, X+
    224c:	fd 90       	ld	r15, X+
    224e:	0d 91       	ld	r16, X+
    2250:	1d 91       	ld	r17, X+
    2252:	cd 91       	ld	r28, X+
    2254:	dd 91       	ld	r29, X+
    2256:	ed 91       	ld	r30, X+
    2258:	fd 91       	ld	r31, X+
    225a:	0d 90       	ld	r0, X+
    225c:	f8 94       	cli
    225e:	fe bf       	out	0x3e, r31	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	ed bf       	out	0x3d, r30	; 61
    2264:	ed 91       	ld	r30, X+
    2266:	fd 91       	ld	r31, X+
    2268:	09 94       	ijmp

0000226a <_exit>:
    226a:	f8 94       	cli

0000226c <__stop_program>:
    226c:	ff cf       	rjmp	.-2      	; 0x226c <__stop_program>
