
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00002200  00002294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  0080011c  0080011c  000022b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00002320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003441  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001282  00000000  00000000  000059f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018e2  00000000  00000000  00006c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d14  00000000  00000000  00008558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a4e  00000000  00000000  0000926c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000367f  00000000  00000000  00009cba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0000d339  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__vector_1>
       8:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__vector_2>
       c:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_3>
      10:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__vector_4>
      14:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 e9 0c 	jmp	0x19d2	; 0x19d2 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__vector_9>
      28:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__vector_10>
      2c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__vector_11>
      30:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <__vector_12>
      34:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__vector_13>
      38:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__vector_14>
      3c:	0c 94 36 09 	jmp	0x126c	; 0x126c <__vector_15>
      40:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__vector_16>
      44:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__vector_17>
      48:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <__vector_18>
      4c:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__vector_19>
      50:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__vector_20>
      54:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__vector_21>
      58:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e0 e0       	ldi	r30, 0x00	; 0
      70:	f2 e2       	ldi	r31, 0x22	; 34
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ac 31       	cpi	r26, 0x1C	; 28
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ac e1       	ldi	r26, 0x1C	; 28
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	af 36       	cpi	r26, 0x6F	; 111
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <main>
      92:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <send_lightstatus>:
	if (self->current_cars == 0) {
		empty_bridge(self, 0);
	}
}

void send_lightstatus(Controller *self, int arg0) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	ec 01       	movw	r28, r24
		
		// Form output according to standard given
		if (self->lights[NORTH] == GREEN) {
      ac:	8c 85       	ldd	r24, Y+12	; 0x0c
      ae:	81 30       	cpi	r24, 0x01	; 1
      b0:	11 f1       	breq	.+68     	; 0xf6 <send_lightstatus+0x5c>
			self->output |= (1<<NORTH_GREEN);
		}
		else {
			self->output |= (1<<NORTH_RED);
      b2:	8c 89       	ldd	r24, Y+20	; 0x14
      b4:	82 60       	ori	r24, 0x02	; 2
      b6:	8c 8b       	std	Y+20, r24	; 0x14
		}
		if (self->lights[SOUTH] == GREEN) {
      b8:	9d 85       	ldd	r25, Y+13	; 0x0d
      ba:	91 30       	cpi	r25, 0x01	; 1
      bc:	11 f1       	breq	.+68     	; 0x102 <send_lightstatus+0x68>
			self->output |= (1<<SOUTH_GREEN);
		}
		else {
			self->output |= (1<<SOUTH_RED);
      be:	88 60       	ori	r24, 0x08	; 8
      c0:	8c 8b       	std	Y+20, r24	; 0x14
		}
		
		// Send output to serial writer and write to port
		ASYNC(self->writer, usart_write, self->output);
      c2:	c8 2e       	mov	r12, r24
      c4:	d1 2c       	mov	r13, r1
      c6:	0e 81       	ldd	r16, Y+6	; 0x06
      c8:	1f 81       	ldd	r17, Y+7	; 0x07
      ca:	83 e2       	ldi	r24, 0x23	; 35
      cc:	e8 2e       	mov	r14, r24
      ce:	84 e0       	ldi	r24, 0x04	; 4
      d0:	f8 2e       	mov	r15, r24
      d2:	20 e0       	ldi	r18, 0x00	; 0
      d4:	30 e0       	ldi	r19, 0x00	; 0
      d6:	a9 01       	movw	r20, r18
      d8:	60 e0       	ldi	r22, 0x00	; 0
      da:	70 e0       	ldi	r23, 0x00	; 0
      dc:	cb 01       	movw	r24, r22
      de:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <async>
		self->output = 0;	// reset output
      e2:	1c 8a       	std	Y+20, r1	; 0x14
}
      e4:	df 91       	pop	r29
      e6:	cf 91       	pop	r28
      e8:	1f 91       	pop	r17
      ea:	0f 91       	pop	r16
      ec:	ff 90       	pop	r15
      ee:	ef 90       	pop	r14
      f0:	df 90       	pop	r13
      f2:	cf 90       	pop	r12
      f4:	08 95       	ret

void send_lightstatus(Controller *self, int arg0) {
		
		// Form output according to standard given
		if (self->lights[NORTH] == GREEN) {
			self->output |= (1<<NORTH_GREEN);
      f6:	8c 89       	ldd	r24, Y+20	; 0x14
      f8:	81 60       	ori	r24, 0x01	; 1
      fa:	8c 8b       	std	Y+20, r24	; 0x14
		}
		else {
			self->output |= (1<<NORTH_RED);
		}
		if (self->lights[SOUTH] == GREEN) {
      fc:	9d 85       	ldd	r25, Y+13	; 0x0d
      fe:	91 30       	cpi	r25, 0x01	; 1
     100:	f1 f6       	brne	.-68     	; 0xbe <send_lightstatus+0x24>
			self->output |= (1<<SOUTH_GREEN);
     102:	84 60       	ori	r24, 0x04	; 4
     104:	8c 8b       	std	Y+20, r24	; 0x14
     106:	dd cf       	rjmp	.-70     	; 0xc2 <send_lightstatus+0x28>

00000108 <manage_lights>:
	/***********************/
	/* Empty current queue */
	/***********************/
	
	// If current queue is empty
	if (self->queues[self->curr_dir] == 0) {
     108:	fc 01       	movw	r30, r24
     10a:	61 89       	ldd	r22, Z+17	; 0x11
     10c:	46 2f       	mov	r20, r22
     10e:	50 e0       	ldi	r21, 0x00	; 0
     110:	fa 01       	movw	r30, r20
     112:	34 96       	adiw	r30, 0x04	; 4
     114:	ee 0f       	add	r30, r30
     116:	ff 1f       	adc	r31, r31
     118:	e8 0f       	add	r30, r24
     11a:	f9 1f       	adc	r31, r25
     11c:	20 81       	ld	r18, Z
     11e:	31 81       	ldd	r19, Z+1	; 0x01
     120:	23 2b       	or	r18, r19
     122:	99 f4       	brne	.+38     	; 0x14a <manage_lights+0x42>
		
		if(self->queues[!self->curr_dir] > 0) {
     124:	21 e0       	ldi	r18, 0x01	; 1
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	61 11       	cpse	r22, r1
     12a:	2b c0       	rjmp	.+86     	; 0x182 <manage_lights+0x7a>
     12c:	f9 01       	movw	r30, r18
     12e:	34 96       	adiw	r30, 0x04	; 4
     130:	ee 0f       	add	r30, r30
     132:	ff 1f       	adc	r31, r31
     134:	e8 0f       	add	r30, r24
     136:	f9 1f       	adc	r31, r25
     138:	20 81       	ld	r18, Z
     13a:	31 81       	ldd	r19, Z+1	; 0x01
			self->lights[self->curr_dir] = RED;	
     13c:	fc 01       	movw	r30, r24
	/***********************/
	
	// If current queue is empty
	if (self->queues[self->curr_dir] == 0) {
		
		if(self->queues[!self->curr_dir] > 0) {
     13e:	12 16       	cp	r1, r18
     140:	13 06       	cpc	r1, r19
     142:	14 f5       	brge	.+68     	; 0x188 <manage_lights+0x80>
			self->lights[self->curr_dir] = RED;	
     144:	e4 0f       	add	r30, r20
     146:	f5 1f       	adc	r31, r21
     148:	14 86       	std	Z+12, r1	; 0x0c
	/********************/
	/* Starvation logic */
	/********************/
	
	// If we have allowed the maximum cars allowed to avoid starvation
	if(self->cars_allowed == 0) {
     14a:	fc 01       	movw	r30, r24
     14c:	20 89       	ldd	r18, Z+16	; 0x10
     14e:	21 11       	cpse	r18, r1
     150:	14 c0       	rjmp	.+40     	; 0x17a <manage_lights+0x72>
		
		// If queue from opposite direction is empty
		if(self->queues[!self->curr_dir] == 0) {
     152:	21 e0       	ldi	r18, 0x01	; 1
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	66 23       	and	r22, r22
     158:	11 f0       	breq	.+4      	; 0x15e <manage_lights+0x56>
     15a:	20 e0       	ldi	r18, 0x00	; 0
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	f9 01       	movw	r30, r18
     160:	34 96       	adiw	r30, 0x04	; 4
     162:	ee 0f       	add	r30, r30
     164:	ff 1f       	adc	r31, r31
     166:	e8 0f       	add	r30, r24
     168:	f9 1f       	adc	r31, r25
     16a:	20 81       	ld	r18, Z
     16c:	31 81       	ldd	r19, Z+1	; 0x01
     16e:	23 2b       	or	r18, r19
     170:	c1 f0       	breq	.+48     	; 0x1a2 <manage_lights+0x9a>
			self->cars_allowed ++;						// Allow another car from this direction
		}
		// If queue from opposite direction is not empty
		else {
			self->lights[self->curr_dir] = RED;			// Set this light to red
     172:	fc 01       	movw	r30, r24
     174:	e4 0f       	add	r30, r20
     176:	f5 1f       	adc	r31, r21
     178:	14 86       	std	Z+12, r1	; 0x0c
		}
	}	
		
	send_lightstatus(self, 0);
     17a:	60 e0       	ldi	r22, 0x00	; 0
     17c:	70 e0       	ldi	r23, 0x00	; 0
     17e:	0c 94 4d 00 	jmp	0x9a	; 0x9a <send_lightstatus>
	/***********************/
	
	// If current queue is empty
	if (self->queues[self->curr_dir] == 0) {
		
		if(self->queues[!self->curr_dir] > 0) {
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	d2 cf       	rjmp	.-92     	; 0x12c <manage_lights+0x24>
			self->lights[self->curr_dir] = RED;	
		}
		
		
		//If queue in opposite direction is empty and no cars are on the bridge
		if(self->queues[!self->curr_dir] == 0 && self->current_cars == 0) {
     188:	23 2b       	or	r18, r19
     18a:	91 f4       	brne	.+36     	; 0x1b0 <manage_lights+0xa8>
     18c:	26 85       	ldd	r18, Z+14	; 0x0e
     18e:	37 85       	ldd	r19, Z+15	; 0x0f
     190:	23 2b       	or	r18, r19
     192:	19 f4       	brne	.+6      	; 0x19a <manage_lights+0x92>
			self->lights[NORTH] = RED;
     194:	14 86       	std	Z+12, r1	; 0x0c
			self->lights[SOUTH] = RED;
     196:	15 86       	std	Z+13, r1	; 0x0d
			self->active = false;				// deactivate
     198:	13 8a       	std	Z+19, r1	; 0x13
	/********************/
	/* Starvation logic */
	/********************/
	
	// If we have allowed the maximum cars allowed to avoid starvation
	if(self->cars_allowed == 0) {
     19a:	fc 01       	movw	r30, r24
     19c:	20 89       	ldd	r18, Z+16	; 0x10
     19e:	21 11       	cpse	r18, r1
     1a0:	ec cf       	rjmp	.-40     	; 0x17a <manage_lights+0x72>
		
		// If queue from opposite direction is empty
		if(self->queues[!self->curr_dir] == 0) {
			self->cars_allowed ++;						// Allow another car from this direction
     1a2:	21 e0       	ldi	r18, 0x01	; 1
     1a4:	fc 01       	movw	r30, r24
     1a6:	20 8b       	std	Z+16, r18	; 0x10
		else {
			self->lights[self->curr_dir] = RED;			// Set this light to red
		}
	}	
		
	send_lightstatus(self, 0);
     1a8:	60 e0       	ldi	r22, 0x00	; 0
     1aa:	70 e0       	ldi	r23, 0x00	; 0
     1ac:	0c 94 4d 00 	jmp	0x9a	; 0x9a <send_lightstatus>
	/********************/
	/* Starvation logic */
	/********************/
	
	// If we have allowed the maximum cars allowed to avoid starvation
	if(self->cars_allowed == 0) {
     1b0:	20 89       	ldd	r18, Z+16	; 0x10
     1b2:	22 23       	and	r18, r18
     1b4:	f1 f2       	breq	.-68     	; 0x172 <manage_lights+0x6a>
     1b6:	e1 cf       	rjmp	.-62     	; 0x17a <manage_lights+0x72>

000001b8 <enqueue_north>:
 *  Author: shirt
 */ 

#include "Controller.h"

void enqueue_north(Controller *self, int arg0) {
     1b8:	cf 92       	push	r12
     1ba:	df 92       	push	r13
     1bc:	ef 92       	push	r14
     1be:	ff 92       	push	r15
     1c0:	0f 93       	push	r16
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	ec 01       	movw	r28, r24

	self->queues[NORTH]++;	// car is added to north queue
     1ca:	c8 84       	ldd	r12, Y+8	; 0x08
     1cc:	d9 84       	ldd	r13, Y+9	; 0x09
     1ce:	8f ef       	ldi	r24, 0xFF	; 255
     1d0:	c8 1a       	sub	r12, r24
     1d2:	d8 0a       	sbc	r13, r24
     1d4:	d9 86       	std	Y+9, r13	; 0x09
     1d6:	c8 86       	std	Y+8, r12	; 0x08
	ASYNC(self->gui, update_north, self->queues[NORTH]);
     1d8:	0c 81       	ldd	r16, Y+4	; 0x04
     1da:	1d 81       	ldd	r17, Y+5	; 0x05
     1dc:	89 e5       	ldi	r24, 0x59	; 89
     1de:	e8 2e       	mov	r14, r24
     1e0:	82 e0       	ldi	r24, 0x02	; 2
     1e2:	f8 2e       	mov	r15, r24
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	a9 01       	movw	r20, r18
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	cb 01       	movw	r24, r22
     1f0:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <async>
	// If controller isn't active, both lights are red and bridge is empty, start it up again
	if(!self->active) {
     1f4:	8b 89       	ldd	r24, Y+19	; 0x13
     1f6:	88 23       	and	r24, r24
     1f8:	49 f0       	breq	.+18     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
		self->cars_allowed = MAX_CARS_ON_LANE;
		self->curr_dir = NORTH;
		manage_lights(self, 0);
	}
	
}
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	1f 91       	pop	r17
     200:	0f 91       	pop	r16
     202:	ff 90       	pop	r15
     204:	ef 90       	pop	r14
     206:	df 90       	pop	r13
     208:	cf 90       	pop	r12
     20a:	08 95       	ret

	self->queues[NORTH]++;	// car is added to north queue
	ASYNC(self->gui, update_north, self->queues[NORTH]);
	// If controller isn't active, both lights are red and bridge is empty, start it up again
	if(!self->active) {
		self->active = true;
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	8b 8b       	std	Y+19, r24	; 0x13
		self->lights[NORTH] = GREEN;
     210:	8c 87       	std	Y+12, r24	; 0x0c
		self->cars_allowed = MAX_CARS_ON_LANE;
     212:	85 e0       	ldi	r24, 0x05	; 5
     214:	88 8b       	std	Y+16, r24	; 0x10
		self->curr_dir = NORTH;
     216:	19 8a       	std	Y+17, r1	; 0x11
		manage_lights(self, 0);
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	ce 01       	movw	r24, r28
	}
	
}
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	ff 90       	pop	r15
     228:	ef 90       	pop	r14
     22a:	df 90       	pop	r13
     22c:	cf 90       	pop	r12
	if(!self->active) {
		self->active = true;
		self->lights[NORTH] = GREEN;
		self->cars_allowed = MAX_CARS_ON_LANE;
		self->curr_dir = NORTH;
		manage_lights(self, 0);
     22e:	0c 94 84 00 	jmp	0x108	; 0x108 <manage_lights>

00000232 <enqueue_south>:
	}
	
}

void enqueue_south(Controller *self, int arg0) {
     232:	cf 92       	push	r12
     234:	df 92       	push	r13
     236:	ef 92       	push	r14
     238:	ff 92       	push	r15
     23a:	0f 93       	push	r16
     23c:	1f 93       	push	r17
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	ec 01       	movw	r28, r24

	self->queues[SOUTH]++;
     244:	ca 84       	ldd	r12, Y+10	; 0x0a
     246:	db 84       	ldd	r13, Y+11	; 0x0b
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	c8 1a       	sub	r12, r24
     24c:	d8 0a       	sbc	r13, r24
     24e:	db 86       	std	Y+11, r13	; 0x0b
     250:	ca 86       	std	Y+10, r12	; 0x0a
	ASYNC(self->gui, update_south, self->queues[SOUTH]);
     252:	0c 81       	ldd	r16, Y+4	; 0x04
     254:	1d 81       	ldd	r17, Y+5	; 0x05
     256:	89 e6       	ldi	r24, 0x69	; 105
     258:	e8 2e       	mov	r14, r24
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	f8 2e       	mov	r15, r24
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	a9 01       	movw	r20, r18
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	70 e0       	ldi	r23, 0x00	; 0
     268:	cb 01       	movw	r24, r22
     26a:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <async>
	if(!self->active) {
     26e:	8b 89       	ldd	r24, Y+19	; 0x13
     270:	88 23       	and	r24, r24
     272:	49 f0       	breq	.+18     	; 0x286 <enqueue_south+0x54>
		manage_lights(self, 0);
	}
	
	
	
}
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	ff 90       	pop	r15
     27e:	ef 90       	pop	r14
     280:	df 90       	pop	r13
     282:	cf 90       	pop	r12
     284:	08 95       	ret
void enqueue_south(Controller *self, int arg0) {

	self->queues[SOUTH]++;
	ASYNC(self->gui, update_south, self->queues[SOUTH]);
	if(!self->active) {
		self->active = true;
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	8b 8b       	std	Y+19, r24	; 0x13
		self->lights[SOUTH] = GREEN;
     28a:	8d 87       	std	Y+13, r24	; 0x0d
		self->cars_allowed = MAX_CARS_ON_LANE;
     28c:	95 e0       	ldi	r25, 0x05	; 5
     28e:	98 8b       	std	Y+16, r25	; 0x10
		self->curr_dir = SOUTH;
     290:	89 8b       	std	Y+17, r24	; 0x11
		manage_lights(self, 0);
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	ce 01       	movw	r24, r28
	}
	
	
	
}
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
     2a0:	ff 90       	pop	r15
     2a2:	ef 90       	pop	r14
     2a4:	df 90       	pop	r13
     2a6:	cf 90       	pop	r12
	if(!self->active) {
		self->active = true;
		self->lights[SOUTH] = GREEN;
		self->cars_allowed = MAX_CARS_ON_LANE;
		self->curr_dir = SOUTH;
		manage_lights(self, 0);
     2a8:	0c 94 84 00 	jmp	0x108	; 0x108 <manage_lights>

000002ac <empty_bridge>:
}


void empty_bridge(Controller *self, int arg0) {
	// If bridge is empty
	if(self->current_cars == 0) {
     2ac:	fc 01       	movw	r30, r24
     2ae:	26 85       	ldd	r18, Z+14	; 0x0e
     2b0:	37 85       	ldd	r19, Z+15	; 0x0f
     2b2:	23 2b       	or	r18, r19
     2b4:	d1 f4       	brne	.+52     	; 0x2ea <empty_bridge+0x3e>
		
		// If queue in opposite direction isn't empty
		if(self->queues[!self->curr_dir] > 0) {
     2b6:	41 e0       	ldi	r20, 0x01	; 1
     2b8:	21 89       	ldd	r18, Z+17	; 0x11
     2ba:	21 11       	cpse	r18, r1
     2bc:	1a c0       	rjmp	.+52     	; 0x2f2 <empty_bridge+0x46>
     2be:	24 2f       	mov	r18, r20
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	f9 01       	movw	r30, r18
     2c4:	34 96       	adiw	r30, 0x04	; 4
     2c6:	ee 0f       	add	r30, r30
     2c8:	ff 1f       	adc	r31, r31
     2ca:	e8 0f       	add	r30, r24
     2cc:	f9 1f       	adc	r31, r25
     2ce:	60 81       	ld	r22, Z
     2d0:	71 81       	ldd	r23, Z+1	; 0x01
     2d2:	16 16       	cp	r1, r22
     2d4:	17 06       	cpc	r1, r23
     2d6:	4c f4       	brge	.+18     	; 0x2ea <empty_bridge+0x3e>
			self->curr_dir = !self->curr_dir;			// Swap direction
     2d8:	fc 01       	movw	r30, r24
     2da:	41 8b       	std	Z+17, r20	; 0x11
			self->lights[self->curr_dir] = GREEN;		// Turn on light
     2dc:	e2 0f       	add	r30, r18
     2de:	f3 1f       	adc	r31, r19
     2e0:	41 e0       	ldi	r20, 0x01	; 1
     2e2:	44 87       	std	Z+12, r20	; 0x0c
			self->cars_allowed = MAX_CARS_ON_LANE;		// Reset starvation counter
     2e4:	25 e0       	ldi	r18, 0x05	; 5
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 8b       	std	Z+16, r18	; 0x10
		}
		
	}
	manage_lights(self, 0);
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	0c 94 84 00 	jmp	0x108	; 0x108 <manage_lights>
void empty_bridge(Controller *self, int arg0) {
	// If bridge is empty
	if(self->current_cars == 0) {
		
		// If queue in opposite direction isn't empty
		if(self->queues[!self->curr_dir] > 0) {
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	e4 cf       	rjmp	.-56     	; 0x2be <empty_bridge+0x12>

000002f6 <exit_bridge>:
	AFTER(MSEC(CAR_PASSING_TIME), self, exit_bridge, 0);
	manage_lights(self, 0);
}


void exit_bridge(Controller *self, int arg0) {
     2f6:	cf 92       	push	r12
     2f8:	df 92       	push	r13
     2fa:	ef 92       	push	r14
     2fc:	ff 92       	push	r15
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	ec 01       	movw	r28, r24
	self->current_cars--;	// a car has left the bridge
     308:	ce 84       	ldd	r12, Y+14	; 0x0e
     30a:	df 84       	ldd	r13, Y+15	; 0x0f
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	c8 1a       	sub	r12, r24
     310:	d1 08       	sbc	r13, r1
     312:	df 86       	std	Y+15, r13	; 0x0f
     314:	ce 86       	std	Y+14, r12	; 0x0e

	ASYNC(self->gui, update_current, self->current_cars);
     316:	0c 81       	ldd	r16, Y+4	; 0x04
     318:	1d 81       	ldd	r17, Y+5	; 0x05
     31a:	81 e6       	ldi	r24, 0x61	; 97
     31c:	e8 2e       	mov	r14, r24
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	f8 2e       	mov	r15, r24
     322:	20 e0       	ldi	r18, 0x00	; 0
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	a9 01       	movw	r20, r18
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	cb 01       	movw	r24, r22
     32e:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <async>
	if (self->current_cars == 0) {
     332:	8e 85       	ldd	r24, Y+14	; 0x0e
     334:	9f 85       	ldd	r25, Y+15	; 0x0f
     336:	89 2b       	or	r24, r25
     338:	49 f0       	breq	.+18     	; 0x34c <exit_bridge+0x56>
		empty_bridge(self, 0);
	}
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	ff 90       	pop	r15
     344:	ef 90       	pop	r14
     346:	df 90       	pop	r13
     348:	cf 90       	pop	r12
     34a:	08 95       	ret
void exit_bridge(Controller *self, int arg0) {
	self->current_cars--;	// a car has left the bridge

	ASYNC(self->gui, update_current, self->current_cars);
	if (self->current_cars == 0) {
		empty_bridge(self, 0);
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	ce 01       	movw	r24, r28
	}
}
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	1f 91       	pop	r17
     358:	0f 91       	pop	r16
     35a:	ff 90       	pop	r15
     35c:	ef 90       	pop	r14
     35e:	df 90       	pop	r13
     360:	cf 90       	pop	r12
void exit_bridge(Controller *self, int arg0) {
	self->current_cars--;	// a car has left the bridge

	ASYNC(self->gui, update_current, self->current_cars);
	if (self->current_cars == 0) {
		empty_bridge(self, 0);
     362:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <empty_bridge>

00000366 <entry_north>:
	
}



void entry_north(Controller *self, int arg0) {
     366:	cf 92       	push	r12
     368:	df 92       	push	r13
     36a:	ef 92       	push	r14
     36c:	ff 92       	push	r15
     36e:	0f 93       	push	r16
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	ec 01       	movw	r28, r24
	
	self->queues[NORTH]--;	// dequeue car
     378:	88 85       	ldd	r24, Y+8	; 0x08
     37a:	99 85       	ldd	r25, Y+9	; 0x09
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	99 87       	std	Y+9, r25	; 0x09
     380:	88 87       	std	Y+8, r24	; 0x08
	self->cars_allowed--;	// decrement starvation counter
     382:	88 89       	ldd	r24, Y+16	; 0x10
     384:	81 50       	subi	r24, 0x01	; 1
     386:	88 8b       	std	Y+16, r24	; 0x10
	self->current_cars++;	// new car on bridge
     388:	ce 84       	ldd	r12, Y+14	; 0x0e
     38a:	df 84       	ldd	r13, Y+15	; 0x0f
     38c:	8f ef       	ldi	r24, 0xFF	; 255
     38e:	c8 1a       	sub	r12, r24
     390:	d8 0a       	sbc	r13, r24
     392:	df 86       	std	Y+15, r13	; 0x0f
     394:	ce 86       	std	Y+14, r12	; 0x0e
	// Update relevant parts of the gui
	ASYNC(self->gui, update_current, self->current_cars);
     396:	0c 81       	ldd	r16, Y+4	; 0x04
     398:	1d 81       	ldd	r17, Y+5	; 0x05
     39a:	81 e6       	ldi	r24, 0x61	; 97
     39c:	e8 2e       	mov	r14, r24
     39e:	82 e0       	ldi	r24, 0x02	; 2
     3a0:	f8 2e       	mov	r15, r24
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	a9 01       	movw	r20, r18
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	cb 01       	movw	r24, r22
     3ae:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <async>
	ASYNC(self->gui, update_north, self->queues[NORTH]);
     3b2:	c8 84       	ldd	r12, Y+8	; 0x08
     3b4:	d9 84       	ldd	r13, Y+9	; 0x09
     3b6:	0c 81       	ldd	r16, Y+4	; 0x04
     3b8:	1d 81       	ldd	r17, Y+5	; 0x05
     3ba:	99 e5       	ldi	r25, 0x59	; 89
     3bc:	e9 2e       	mov	r14, r25
     3be:	92 e0       	ldi	r25, 0x02	; 2
     3c0:	f9 2e       	mov	r15, r25
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	a9 01       	movw	r20, r18
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	cb 01       	movw	r24, r22
     3ce:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <async>
	
	// After a set amount of time, 
	AFTER(MSEC(CAR_PASSING_TIME), self, exit_bridge, 0);
     3d2:	c1 2c       	mov	r12, r1
     3d4:	d1 2c       	mov	r13, r1
     3d6:	2b e7       	ldi	r18, 0x7B	; 123
     3d8:	e2 2e       	mov	r14, r18
     3da:	21 e0       	ldi	r18, 0x01	; 1
     3dc:	f2 2e       	mov	r15, r18
     3de:	8e 01       	movw	r16, r28
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	a9 01       	movw	r20, r18
     3e6:	6a e5       	ldi	r22, 0x5A	; 90
     3e8:	72 e6       	ldi	r23, 0x62	; 98
     3ea:	82 e0       	ldi	r24, 0x02	; 2
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <async>
	manage_lights(self, 0);
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	ce 01       	movw	r24, r28
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	df 90       	pop	r13
     406:	cf 90       	pop	r12
	ASYNC(self->gui, update_current, self->current_cars);
	ASYNC(self->gui, update_north, self->queues[NORTH]);
	
	// After a set amount of time, 
	AFTER(MSEC(CAR_PASSING_TIME), self, exit_bridge, 0);
	manage_lights(self, 0);
     408:	0c 94 84 00 	jmp	0x108	; 0x108 <manage_lights>

0000040c <entry_south>:
}


void entry_south(Controller *self, int arg0) {
     40c:	cf 92       	push	r12
     40e:	df 92       	push	r13
     410:	ef 92       	push	r14
     412:	ff 92       	push	r15
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	ec 01       	movw	r28, r24
	
	self->queues[SOUTH]--;	
     41e:	8a 85       	ldd	r24, Y+10	; 0x0a
     420:	9b 85       	ldd	r25, Y+11	; 0x0b
     422:	01 97       	sbiw	r24, 0x01	; 1
     424:	9b 87       	std	Y+11, r25	; 0x0b
     426:	8a 87       	std	Y+10, r24	; 0x0a
	self->cars_allowed--;
     428:	88 89       	ldd	r24, Y+16	; 0x10
     42a:	81 50       	subi	r24, 0x01	; 1
     42c:	88 8b       	std	Y+16, r24	; 0x10
	self->current_cars++;
     42e:	ce 84       	ldd	r12, Y+14	; 0x0e
     430:	df 84       	ldd	r13, Y+15	; 0x0f
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	c8 1a       	sub	r12, r24
     436:	d8 0a       	sbc	r13, r24
     438:	df 86       	std	Y+15, r13	; 0x0f
     43a:	ce 86       	std	Y+14, r12	; 0x0e
	ASYNC(self->gui, update_current, self->current_cars);
     43c:	0c 81       	ldd	r16, Y+4	; 0x04
     43e:	1d 81       	ldd	r17, Y+5	; 0x05
     440:	81 e6       	ldi	r24, 0x61	; 97
     442:	e8 2e       	mov	r14, r24
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	f8 2e       	mov	r15, r24
     448:	20 e0       	ldi	r18, 0x00	; 0
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	a9 01       	movw	r20, r18
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	cb 01       	movw	r24, r22
     454:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <async>
	ASYNC(self->gui, update_south, self->queues[SOUTH]);
     458:	ca 84       	ldd	r12, Y+10	; 0x0a
     45a:	db 84       	ldd	r13, Y+11	; 0x0b
     45c:	0c 81       	ldd	r16, Y+4	; 0x04
     45e:	1d 81       	ldd	r17, Y+5	; 0x05
     460:	99 e6       	ldi	r25, 0x69	; 105
     462:	e9 2e       	mov	r14, r25
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	f9 2e       	mov	r15, r25
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	a9 01       	movw	r20, r18
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	cb 01       	movw	r24, r22
     474:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <async>
	
	AFTER(MSEC(CAR_PASSING_TIME), self, exit_bridge, 0);
     478:	c1 2c       	mov	r12, r1
     47a:	d1 2c       	mov	r13, r1
     47c:	2b e7       	ldi	r18, 0x7B	; 123
     47e:	e2 2e       	mov	r14, r18
     480:	21 e0       	ldi	r18, 0x01	; 1
     482:	f2 2e       	mov	r15, r18
     484:	8e 01       	movw	r16, r28
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	a9 01       	movw	r20, r18
     48c:	6a e5       	ldi	r22, 0x5A	; 90
     48e:	72 e6       	ldi	r23, 0x62	; 98
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <async>
	manage_lights(self, 0);
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	ce 01       	movw	r24, r28
}
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	ff 90       	pop	r15
     4a8:	ef 90       	pop	r14
     4aa:	df 90       	pop	r13
     4ac:	cf 90       	pop	r12
	self->current_cars++;
	ASYNC(self->gui, update_current, self->current_cars);
	ASYNC(self->gui, update_south, self->queues[SOUTH]);
	
	AFTER(MSEC(CAR_PASSING_TIME), self, exit_bridge, 0);
	manage_lights(self, 0);
     4ae:	0c 94 84 00 	jmp	0x108	; 0x108 <manage_lights>

000004b2 <update_north>:
 */ 
#include "GUI.h"

/* Print north queue at positions 0 and 1 */
void update_north(GUI *self, int arg0) {
	printAt(arg0, 0);
     4b2:	07 2e       	mov	r0, r23
     4b4:	00 0c       	add	r0, r0
     4b6:	88 0b       	sbc	r24, r24
     4b8:	99 0b       	sbc	r25, r25
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	0c 94 9b 03 	jmp	0x736	; 0x736 <printAt>

000004c2 <update_current>:
}

/* Print current bridge cars at position 2 and 3 */
void update_current(GUI *self, int arg0) {	
	printAt(arg0, 2);
     4c2:	07 2e       	mov	r0, r23
     4c4:	00 0c       	add	r0, r0
     4c6:	88 0b       	sbc	r24, r24
     4c8:	99 0b       	sbc	r25, r25
     4ca:	42 e0       	ldi	r20, 0x02	; 2
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	0c 94 9b 03 	jmp	0x736	; 0x736 <printAt>

000004d2 <update_south>:
}

/* Print south queue at positions 4 and 5*/
void update_south(GUI *self, int arg0) {
	printAt(arg0, 4);
     4d2:	07 2e       	mov	r0, r23
     4d4:	00 0c       	add	r0, r0
     4d6:	88 0b       	sbc	r24, r24
     4d8:	99 0b       	sbc	r25, r25
     4da:	44 e0       	ldi	r20, 0x04	; 4
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	0c 94 9b 03 	jmp	0x736	; 0x736 <printAt>

000004e2 <start_gui>:
}

// Makes sure something is printed before any reaction has taken place
void start_gui(GUI *self, int arg0) {
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	ec 01       	movw	r28, r24
	if (!self->initialized) {
     4e8:	8c 81       	ldd	r24, Y+4	; 0x04
     4ea:	81 11       	cpse	r24, r1
     4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <start_gui+0x14>
		initLCD();
     4ee:	0e 94 8a 03 	call	0x714	; 0x714 <initLCD>
		self->initialized = 1;
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	8c 83       	std	Y+4, r24	; 0x04
	}
	printAt(0, 0);
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	cb 01       	movw	r24, r22
     500:	0e 94 9b 03 	call	0x736	; 0x736 <printAt>
	printAt(0, 2);
     504:	42 e0       	ldi	r20, 0x02	; 2
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	cb 01       	movw	r24, r22
     50e:	0e 94 9b 03 	call	0x736	; 0x736 <printAt>
	printAt(0, 4);
     512:	44 e0       	ldi	r20, 0x04	; 4
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	cb 01       	movw	r24, r22
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
		initLCD();
		self->initialized = 1;
	}
	printAt(0, 0);
	printAt(0, 2);
	printAt(0, 4);
     520:	0c 94 9b 03 	jmp	0x736	; 0x736 <printAt>

00000524 <parse_interrupt>:

#include "InterruptHandler.h"

void parse_interrupt(InterruptHandler *self, int arg0) {
     524:	af 92       	push	r10
     526:	bf 92       	push	r11
     528:	cf 92       	push	r12
     52a:	df 92       	push	r13
     52c:	ef 92       	push	r14
     52e:	ff 92       	push	r15
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	cf 93       	push	r28
     536:	5c 01       	movw	r10, r24
	
	
	/* Reads from USART port and interprets input according to standards in lab specs*/
	uint8_t data = UDR0;
     538:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
	
	if ((data >> NORTH_ARRIVAL_BIT ) & 1) {
     53c:	c0 fd       	sbrc	r28, 0
     53e:	45 c0       	rjmp	.+138    	; 0x5ca <parse_interrupt+0xa6>
		ASYNC(self->controller, enqueue_north, 0);
	}
	if ((data >> NORTH_ENTRY_BIT ) & 1) {
     540:	c1 fd       	sbrc	r28, 1
     542:	31 c0       	rjmp	.+98     	; 0x5a6 <parse_interrupt+0x82>
		ASYNC(self->controller, entry_north, 0);
	}
	if ((data >> SOUTH_ARRIVAL_BIT ) & 1) {
     544:	c2 fd       	sbrc	r28, 2
     546:	1d c0       	rjmp	.+58     	; 0x582 <parse_interrupt+0x5e>
		ASYNC(self->controller, enqueue_south, 0);
	}
	if ((data >> SOUTH_ENTRY_BIT) & 1) {
     548:	c3 ff       	sbrs	r28, 3
     54a:	11 c0       	rjmp	.+34     	; 0x56e <parse_interrupt+0x4a>
		ASYNC(self->controller, entry_south, 0);
     54c:	f5 01       	movw	r30, r10
     54e:	04 81       	ldd	r16, Z+4	; 0x04
     550:	15 81       	ldd	r17, Z+5	; 0x05
     552:	c1 2c       	mov	r12, r1
     554:	d1 2c       	mov	r13, r1
     556:	86 e0       	ldi	r24, 0x06	; 6
     558:	e8 2e       	mov	r14, r24
     55a:	82 e0       	ldi	r24, 0x02	; 2
     55c:	f8 2e       	mov	r15, r24
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	a9 01       	movw	r20, r18
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	cb 01       	movw	r24, r22
     56a:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <async>
	}

	
}
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	ff 90       	pop	r15
     576:	ef 90       	pop	r14
     578:	df 90       	pop	r13
     57a:	cf 90       	pop	r12
     57c:	bf 90       	pop	r11
     57e:	af 90       	pop	r10
     580:	08 95       	ret
	}
	if ((data >> NORTH_ENTRY_BIT ) & 1) {
		ASYNC(self->controller, entry_north, 0);
	}
	if ((data >> SOUTH_ARRIVAL_BIT ) & 1) {
		ASYNC(self->controller, enqueue_south, 0);
     582:	f5 01       	movw	r30, r10
     584:	04 81       	ldd	r16, Z+4	; 0x04
     586:	15 81       	ldd	r17, Z+5	; 0x05
     588:	c1 2c       	mov	r12, r1
     58a:	d1 2c       	mov	r13, r1
     58c:	99 e1       	ldi	r25, 0x19	; 25
     58e:	e9 2e       	mov	r14, r25
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	f9 2e       	mov	r15, r25
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	a9 01       	movw	r20, r18
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	cb 01       	movw	r24, r22
     5a0:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <async>
     5a4:	d1 cf       	rjmp	.-94     	; 0x548 <parse_interrupt+0x24>
	
	if ((data >> NORTH_ARRIVAL_BIT ) & 1) {
		ASYNC(self->controller, enqueue_north, 0);
	}
	if ((data >> NORTH_ENTRY_BIT ) & 1) {
		ASYNC(self->controller, entry_north, 0);
     5a6:	f5 01       	movw	r30, r10
     5a8:	04 81       	ldd	r16, Z+4	; 0x04
     5aa:	15 81       	ldd	r17, Z+5	; 0x05
     5ac:	c1 2c       	mov	r12, r1
     5ae:	d1 2c       	mov	r13, r1
     5b0:	23 eb       	ldi	r18, 0xB3	; 179
     5b2:	e2 2e       	mov	r14, r18
     5b4:	21 e0       	ldi	r18, 0x01	; 1
     5b6:	f2 2e       	mov	r15, r18
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	a9 01       	movw	r20, r18
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	cb 01       	movw	r24, r22
     5c4:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <async>
     5c8:	bd cf       	rjmp	.-134    	; 0x544 <parse_interrupt+0x20>
	
	/* Reads from USART port and interprets input according to standards in lab specs*/
	uint8_t data = UDR0;
	
	if ((data >> NORTH_ARRIVAL_BIT ) & 1) {
		ASYNC(self->controller, enqueue_north, 0);
     5ca:	fc 01       	movw	r30, r24
     5cc:	04 81       	ldd	r16, Z+4	; 0x04
     5ce:	15 81       	ldd	r17, Z+5	; 0x05
     5d0:	c1 2c       	mov	r12, r1
     5d2:	d1 2c       	mov	r13, r1
     5d4:	3c ed       	ldi	r19, 0xDC	; 220
     5d6:	e3 2e       	mov	r14, r19
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	f3 2e       	mov	r15, r19
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	a9 01       	movw	r20, r18
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	cb 01       	movw	r24, r22
     5e8:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <async>
     5ec:	a9 cf       	rjmp	.-174    	; 0x540 <parse_interrupt+0x1c>

000005ee <init>:
	}

	
}

void init(InterruptHandler *self, int arg0) {
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ef 92       	push	r14
     5f4:	ff 92       	push	r15
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
	
	// Initialize USART
	unsigned int ubrr = MYUBRR;
	
	UBRR0H = ubrr>>8;
     5fa:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
	UBRR0L = ubrr;
     5fe:	23 e3       	ldi	r18, 0x33	; 51
     600:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     604:	28 e9       	ldi	r18, 0x98	; 152
     606:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
	UCSR0C = (1<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00);
     60a:	2e e0       	ldi	r18, 0x0E	; 14
     60c:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fc0c2>
	
	ASYNC(self->controller->gui, start_gui, 0); // init the gui
     610:	dc 01       	movw	r26, r24
     612:	14 96       	adiw	r26, 0x04	; 4
     614:	ed 91       	ld	r30, X+
     616:	fc 91       	ld	r31, X
     618:	15 97       	sbiw	r26, 0x05	; 5
     61a:	04 81       	ldd	r16, Z+4	; 0x04
     61c:	15 81       	ldd	r17, Z+5	; 0x05
     61e:	c1 2c       	mov	r12, r1
     620:	d1 2c       	mov	r13, r1
     622:	81 e7       	ldi	r24, 0x71	; 113
     624:	e8 2e       	mov	r14, r24
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	f8 2e       	mov	r15, r24
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	a9 01       	movw	r20, r18
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	cb 01       	movw	r24, r22
     636:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <async>
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	ff 90       	pop	r15
     640:	ef 90       	pop	r14
     642:	df 90       	pop	r13
     644:	cf 90       	pop	r12
     646:	08 95       	ret

00000648 <writeChar.part.0>:
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	ab 01       	movw	r20, r22
     64e:	41 70       	andi	r20, 0x01	; 1
     650:	50 78       	andi	r21, 0x80	; 128
     652:	57 fd       	sbrc	r21, 7
     654:	54 c0       	rjmp	.+168    	; 0x6fe <writeChar.part.0+0xb6>
     656:	77 fd       	sbrc	r23, 7
     658:	5a c0       	rjmp	.+180    	; 0x70e <writeChar.part.0+0xc6>
     65a:	75 95       	asr	r23
     65c:	67 95       	ror	r22
     65e:	fb 01       	movw	r30, r22
     660:	e4 51       	subi	r30, 0x14	; 20
     662:	ff 4f       	sbci	r31, 0xFF	; 255
     664:	28 2f       	mov	r18, r24
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	20 53       	subi	r18, 0x30	; 48
     66a:	31 09       	sbc	r19, r1
     66c:	2a 30       	cpi	r18, 0x0A	; 10
     66e:	31 05       	cpc	r19, r1
     670:	08 f0       	brcs	.+2      	; 0x674 <writeChar.part.0+0x2c>
     672:	42 c0       	rjmp	.+132    	; 0x6f8 <writeChar.part.0+0xb0>
     674:	80 53       	subi	r24, 0x30	; 48
     676:	a8 2f       	mov	r26, r24
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	aa 0f       	add	r26, r26
     67c:	bb 1f       	adc	r27, r27
     67e:	a8 5f       	subi	r26, 0xF8	; 248
     680:	be 4f       	sbci	r27, 0xFE	; 254
     682:	0d 90       	ld	r0, X+
     684:	bc 91       	ld	r27, X
     686:	a0 2d       	mov	r26, r0
     688:	44 0f       	add	r20, r20
     68a:	55 1f       	adc	r21, r21
     68c:	44 0f       	add	r20, r20
     68e:	55 1f       	adc	r21, r21
     690:	8f e0       	ldi	r24, 0x0F	; 15
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	04 2e       	mov	r0, r20
     696:	01 c0       	rjmp	.+2      	; 0x69a <writeChar.part.0+0x52>
     698:	88 0f       	add	r24, r24
     69a:	0a 94       	dec	r0
     69c:	ea f7       	brpl	.-6      	; 0x698 <writeChar.part.0+0x50>
     69e:	d8 2f       	mov	r29, r24
     6a0:	c8 2f       	mov	r28, r24
     6a2:	c0 95       	com	r28
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	86 e0       	ldi	r24, 0x06	; 6
     6aa:	9a 2f       	mov	r25, r26
     6ac:	9f 70       	andi	r25, 0x0F	; 15
     6ae:	30 81       	ld	r19, Z
     6b0:	23 2f       	mov	r18, r19
     6b2:	04 2e       	mov	r0, r20
     6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <writeChar.part.0+0x70>
     6b6:	22 0f       	add	r18, r18
     6b8:	0a 94       	dec	r0
     6ba:	ea f7       	brpl	.-6      	; 0x6b6 <writeChar.part.0+0x6e>
     6bc:	82 23       	and	r24, r18
     6be:	89 2b       	or	r24, r25
     6c0:	04 2e       	mov	r0, r20
     6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <writeChar.part.0+0x7e>
     6c4:	88 0f       	add	r24, r24
     6c6:	0a 94       	dec	r0
     6c8:	ea f7       	brpl	.-6      	; 0x6c4 <writeChar.part.0+0x7c>
     6ca:	8d 23       	and	r24, r29
     6cc:	90 81       	ld	r25, Z
     6ce:	9c 23       	and	r25, r28
     6d0:	90 83       	st	Z, r25
     6d2:	90 81       	ld	r25, Z
     6d4:	89 2b       	or	r24, r25
     6d6:	80 83       	st	Z, r24
     6d8:	b2 95       	swap	r27
     6da:	a2 95       	swap	r26
     6dc:	af 70       	andi	r26, 0x0F	; 15
     6de:	ab 27       	eor	r26, r27
     6e0:	bf 70       	andi	r27, 0x0F	; 15
     6e2:	ab 27       	eor	r26, r27
     6e4:	35 96       	adiw	r30, 0x05	; 5
     6e6:	6f 5f       	subi	r22, 0xFF	; 255
     6e8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	64 30       	cpi	r22, 0x04	; 4
     6ee:	71 05       	cpc	r23, r1
     6f0:	e1 f6       	brne	.-72     	; 0x6aa <writeChar.part.0+0x62>
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	08 95       	ret
     6f8:	a0 e0       	ldi	r26, 0x00	; 0
     6fa:	b0 e0       	ldi	r27, 0x00	; 0
     6fc:	c5 cf       	rjmp	.-118    	; 0x688 <writeChar.part.0+0x40>
     6fe:	41 50       	subi	r20, 0x01	; 1
     700:	51 09       	sbc	r21, r1
     702:	4e 6f       	ori	r20, 0xFE	; 254
     704:	5f 6f       	ori	r21, 0xFF	; 255
     706:	4f 5f       	subi	r20, 0xFF	; 255
     708:	5f 4f       	sbci	r21, 0xFF	; 255
     70a:	77 ff       	sbrs	r23, 7
     70c:	a6 cf       	rjmp	.-180    	; 0x65a <writeChar.part.0+0x12>
     70e:	6f 5f       	subi	r22, 0xFF	; 255
     710:	7f 4f       	sbci	r23, 0xFF	; 255
     712:	a3 cf       	rjmp	.-186    	; 0x65a <writeChar.part.0+0x12>

00000714 <initLCD>:
     714:	e1 e6       	ldi	r30, 0x61	; 97
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	80 e8       	ldi	r24, 0x80	; 128
     71a:	80 83       	st	Z, r24
     71c:	10 82       	st	Z, r1
     71e:	87 eb       	ldi	r24, 0xB7	; 183
     720:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
     724:	87 e0       	ldi	r24, 0x07	; 7
     726:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
     72a:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     72e:	80 ec       	ldi	r24, 0xC0	; 192
     730:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     734:	08 95       	ret

00000736 <printAt>:
     736:	cf 92       	push	r12
     738:	df 92       	push	r13
     73a:	ef 92       	push	r14
     73c:	ff 92       	push	r15
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	6b 01       	movw	r12, r22
     744:	7c 01       	movw	r14, r24
     746:	ea 01       	movw	r28, r20
     748:	46 30       	cpi	r20, 0x06	; 6
     74a:	51 05       	cpc	r21, r1
     74c:	f4 f0       	brlt	.+60     	; 0x78a <printAt+0x54>
     74e:	21 96       	adiw	r28, 0x01	; 1
     750:	c6 30       	cpi	r28, 0x06	; 6
     752:	d1 05       	cpc	r29, r1
     754:	3c f0       	brlt	.+14     	; 0x764 <printAt+0x2e>
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	df 90       	pop	r13
     760:	cf 90       	pop	r12
     762:	08 95       	ret
     764:	c7 01       	movw	r24, r14
     766:	b6 01       	movw	r22, r12
     768:	2a e0       	ldi	r18, 0x0A	; 10
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	40 e0       	ldi	r20, 0x00	; 0
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__divmodsi4>
     774:	86 2f       	mov	r24, r22
     776:	be 01       	movw	r22, r28
     778:	80 5d       	subi	r24, 0xD0	; 208
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	cf 90       	pop	r12
     786:	0c 94 24 03 	jmp	0x648	; 0x648 <writeChar.part.0>
     78a:	24 e6       	ldi	r18, 0x64	; 100
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__divmodsi4>
     796:	2a e0       	ldi	r18, 0x0A	; 10
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__divmodsi4>
     7a2:	be 01       	movw	r22, r28
     7a4:	80 e3       	ldi	r24, 0x30	; 48
     7a6:	82 0f       	add	r24, r18
     7a8:	0e 94 24 03 	call	0x648	; 0x648 <writeChar.part.0>
     7ac:	d0 cf       	rjmp	.-96     	; 0x74e <printAt+0x18>

000007ae <main>:
#include "InterruptHandler.h"
#include "GUI.h"
#include "SerialWriter.h"

int main(void)
{
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
     7b6:	a5 97       	sbiw	r28, 0x25	; 37
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	cd bf       	out	0x3d, r28	; 61
	//return 0;
	SerialWriter wr = initSerialWriter();
     7c2:	1a a2       	std	Y+34, r1	; 0x22
     7c4:	19 a2       	std	Y+33, r1	; 0x21
     7c6:	1c a2       	std	Y+36, r1	; 0x24
     7c8:	1b a2       	std	Y+35, r1	; 0x23
     7ca:	1d a2       	std	Y+37, r1	; 0x25
	GUI gui = initGUI();
     7cc:	1d 8e       	std	Y+29, r1	; 0x1d
     7ce:	1c 8e       	std	Y+28, r1	; 0x1c
     7d0:	1f 8e       	std	Y+31, r1	; 0x1f
     7d2:	1e 8e       	std	Y+30, r1	; 0x1e
     7d4:	18 a2       	std	Y+32, r1	; 0x20
	Controller c = initController(&gui, &wr);
     7d6:	1a 82       	std	Y+2, r1	; 0x02
     7d8:	19 82       	std	Y+1, r1	; 0x01
     7da:	1c 82       	std	Y+4, r1	; 0x04
     7dc:	1b 82       	std	Y+3, r1	; 0x03
     7de:	ce 01       	movw	r24, r28
     7e0:	4c 96       	adiw	r24, 0x1c	; 28
     7e2:	9e 83       	std	Y+6, r25	; 0x06
     7e4:	8d 83       	std	Y+5, r24	; 0x05
     7e6:	05 96       	adiw	r24, 0x05	; 5
     7e8:	98 87       	std	Y+8, r25	; 0x08
     7ea:	8f 83       	std	Y+7, r24	; 0x07
     7ec:	1a 86       	std	Y+10, r1	; 0x0a
     7ee:	19 86       	std	Y+9, r1	; 0x09
     7f0:	1c 86       	std	Y+12, r1	; 0x0c
     7f2:	1b 86       	std	Y+11, r1	; 0x0b
     7f4:	1d 86       	std	Y+13, r1	; 0x0d
     7f6:	1e 86       	std	Y+14, r1	; 0x0e
     7f8:	18 8a       	std	Y+16, r1	; 0x10
     7fa:	1f 86       	std	Y+15, r1	; 0x0f
     7fc:	85 e0       	ldi	r24, 0x05	; 5
     7fe:	89 8b       	std	Y+17, r24	; 0x11
     800:	1a 8a       	std	Y+18, r1	; 0x12
     802:	1b 8a       	std	Y+19, r1	; 0x13
     804:	1c 8a       	std	Y+20, r1	; 0x14
     806:	1d 8a       	std	Y+21, r1	; 0x15
    InterruptHandler i = initInterruptHandler(&c);
     808:	1f 8a       	std	Y+23, r1	; 0x17
     80a:	1e 8a       	std	Y+22, r1	; 0x16
     80c:	19 8e       	std	Y+25, r1	; 0x19
     80e:	18 8e       	std	Y+24, r1	; 0x18
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	9b 8f       	std	Y+27, r25	; 0x1b
     816:	8a 8f       	std	Y+26, r24	; 0x1a
    INSTALL(&i, parse_interrupt, IRQ_USART0_RX);
     818:	48 e0       	ldi	r20, 0x08	; 8
     81a:	62 e9       	ldi	r22, 0x92	; 146
     81c:	72 e0       	ldi	r23, 0x02	; 2
     81e:	45 96       	adiw	r24, 0x15	; 21
     820:	0e 94 46 10 	call	0x208c	; 0x208c <install>
    return TINYTIMBER(&i, init, 0);
     824:	40 e0       	ldi	r20, 0x00	; 0
     826:	50 e0       	ldi	r21, 0x00	; 0
     828:	67 ef       	ldi	r22, 0xF7	; 247
     82a:	72 e0       	ldi	r23, 0x02	; 2
     82c:	ce 01       	movw	r24, r28
     82e:	46 96       	adiw	r24, 0x16	; 22
     830:	0e 94 60 10 	call	0x20c0	; 0x20c0 <tinytimber>
}
     834:	a5 96       	adiw	r28, 0x25	; 37
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	08 95       	ret

00000846 <usart_write>:
 */ 

#include "SerialWriter.h"

void usart_write(SerialWriter *self, int arg0) {
	self->output = arg0;
     846:	fc 01       	movw	r30, r24
     848:	64 83       	std	Z+4, r22	; 0x04
	UDR0 = self->output;
     84a:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
     84e:	08 95       	ret

00000850 <initialize>:
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	00 d0       	rcall	.+0      	; 0x856 <initialize+0x6>
     856:	00 d0       	rcall	.+0      	; 0x858 <initialize+0x8>
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	8f e0       	ldi	r24, 0x0F	; 15
     85e:	92 e0       	ldi	r25, 0x02	; 2
     860:	2f ee       	ldi	r18, 0xEF	; 239
     862:	32 e0       	ldi	r19, 0x02	; 2
     864:	fc 01       	movw	r30, r24
     866:	70 97       	sbiw	r30, 0x10	; 16
     868:	91 83       	std	Z+1, r25	; 0x01
     86a:	80 83       	st	Z, r24
     86c:	40 96       	adiw	r24, 0x10	; 16
     86e:	82 17       	cp	r24, r18
     870:	93 07       	cpc	r25, r19
     872:	c1 f7       	brne	.-16     	; 0x864 <initialize+0x14>
     874:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <messages+0xe1>
     878:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <messages+0xe0>
     87c:	ea e4       	ldi	r30, 0x4A	; 74
     87e:	f1 e0       	ldi	r31, 0x01	; 1
     880:	87 e6       	ldi	r24, 0x67	; 103
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	91 83       	std	Z+1, r25	; 0x01
     886:	80 83       	st	Z, r24
     888:	84 e8       	ldi	r24, 0x84	; 132
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	96 8f       	std	Z+30, r25	; 0x1e
     88e:	85 8f       	std	Z+29, r24	; 0x1d
     890:	a1 ea       	ldi	r26, 0xA1	; 161
     892:	b1 e0       	ldi	r27, 0x01	; 1
     894:	b3 af       	std	Z+59, r27	; 0x3b
     896:	a2 af       	std	Z+58, r26	; 0x3a
     898:	1d 92       	st	X+, r1
     89a:	1c 92       	st	X, r1
     89c:	fa 83       	std	Y+2, r31	; 0x02
     89e:	e9 83       	std	Y+1, r30	; 0x01
     8a0:	eb e4       	ldi	r30, 0x4B	; 75
     8a2:	f3 e0       	ldi	r31, 0x03	; 3
     8a4:	fc 83       	std	Y+4, r31	; 0x04
     8a6:	eb 83       	std	Y+3, r30	; 0x03
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	9a 81       	ldd	r25, Y+2	; 0x02
     8ac:	06 96       	adiw	r24, 0x06	; 6
     8ae:	0e 94 bd 10 	call	0x217a	; 0x217a <setjmp>
     8b2:	8b 81       	ldd	r24, Y+3	; 0x03
     8b4:	9c 81       	ldd	r25, Y+4	; 0x04
     8b6:	e9 81       	ldd	r30, Y+1	; 0x01
     8b8:	fa 81       	ldd	r31, Y+2	; 0x02
     8ba:	97 8b       	std	Z+23, r25	; 0x17
     8bc:	86 8b       	std	Z+22, r24	; 0x16
     8be:	91 8f       	std	Z+25, r25	; 0x19
     8c0:	80 8f       	std	Z+24, r24	; 0x18
     8c2:	8b ec       	ldi	r24, 0xCB	; 203
     8c4:	9f e0       	ldi	r25, 0x0F	; 15
     8c6:	94 8f       	std	Z+28, r25	; 0x1c
     8c8:	83 8f       	std	Z+27, r24	; 0x1b
     8ca:	15 82       	std	Z+5, r1	; 0x05
     8cc:	14 82       	std	Z+4, r1	; 0x04
     8ce:	7d 96       	adiw	r30, 0x1d	; 29
     8d0:	fa 83       	std	Y+2, r31	; 0x02
     8d2:	e9 83       	std	Y+1, r30	; 0x01
     8d4:	eb 81       	ldd	r30, Y+3	; 0x03
     8d6:	fc 81       	ldd	r31, Y+4	; 0x04
     8d8:	e0 5a       	subi	r30, 0xA0	; 160
     8da:	ff 4f       	sbci	r31, 0xFF	; 255
     8dc:	fc 83       	std	Y+4, r31	; 0x04
     8de:	eb 83       	std	Y+3, r30	; 0x03
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	9a 81       	ldd	r25, Y+2	; 0x02
     8e4:	8e 5b       	subi	r24, 0xBE	; 190
     8e6:	91 40       	sbci	r25, 0x01	; 1
     8e8:	f9 f6       	brne	.-66     	; 0x8a8 <initialize+0x58>
     8ea:	e2 ee       	ldi	r30, 0xE2	; 226
     8ec:	f1 e0       	ldi	r31, 0x01	; 1
     8ee:	11 82       	std	Z+1, r1	; 0x01
     8f0:	10 82       	st	Z, r1
     8f2:	15 82       	std	Z+5, r1	; 0x05
     8f4:	14 82       	std	Z+4, r1	; 0x04
     8f6:	13 82       	std	Z+3, r1	; 0x03
     8f8:	12 82       	std	Z+2, r1	; 0x02
     8fa:	e1 e6       	ldi	r30, 0x61	; 97
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	80 e8       	ldi	r24, 0x80	; 128
     900:	80 83       	st	Z, r24
     902:	10 82       	st	Z, r1
     904:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     908:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     90c:	84 e0       	ldi	r24, 0x04	; 4
     90e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	08 95       	ret

00000926 <dispatch>:
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	00 d0       	rcall	.+0      	; 0x92c <dispatch+0x6>
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	9a 83       	std	Y+2, r25	; 0x02
     932:	89 83       	std	Y+1, r24	; 0x01
     934:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     938:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     93c:	06 96       	adiw	r24, 0x06	; 6
     93e:	0e 94 bd 10 	call	0x217a	; 0x217a <setjmp>
     942:	89 2b       	or	r24, r25
     944:	29 f0       	breq	.+10     	; 0x950 <dispatch+0x2a>
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret
     950:	89 81       	ldd	r24, Y+1	; 0x01
     952:	9a 81       	ldd	r25, Y+2	; 0x02
     954:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     958:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     95c:	61 e0       	ldi	r22, 0x01	; 1
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	06 96       	adiw	r24, 0x06	; 6
     962:	0e 94 dd 10 	call	0x21ba	; 0x21ba <longjmp>

00000966 <schedule>:
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <msgQ>
     972:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <msgQ+0x1>
     976:	30 97       	sbiw	r30, 0x00	; 0
     978:	f1 f0       	breq	.+60     	; 0x9b6 <schedule+0x50>
     97a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     97e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     982:	00 97       	sbiw	r24, 0x00	; 0
     984:	c1 f0       	breq	.+48     	; 0x9b6 <schedule+0x50>
     986:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <activeStack>
     98a:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <activeStack+0x1>
     98e:	aa 81       	ldd	r26, Y+2	; 0x02
     990:	bb 81       	ldd	r27, Y+3	; 0x03
     992:	10 97       	sbiw	r26, 0x00	; 0
     994:	a9 f0       	breq	.+42     	; 0x9c0 <schedule+0x5a>
     996:	46 81       	ldd	r20, Z+6	; 0x06
     998:	57 81       	ldd	r21, Z+7	; 0x07
     99a:	60 85       	ldd	r22, Z+8	; 0x08
     99c:	71 85       	ldd	r23, Z+9	; 0x09
     99e:	16 96       	adiw	r26, 0x06	; 6
     9a0:	0d 91       	ld	r16, X+
     9a2:	1d 91       	ld	r17, X+
     9a4:	2d 91       	ld	r18, X+
     9a6:	3c 91       	ld	r19, X
     9a8:	19 97       	sbiw	r26, 0x09	; 9
     9aa:	40 1b       	sub	r20, r16
     9ac:	51 0b       	sbc	r21, r17
     9ae:	62 0b       	sbc	r22, r18
     9b0:	73 0b       	sbc	r23, r19
     9b2:	77 fd       	sbrc	r23, 7
     9b4:	05 c0       	rjmp	.+10     	; 0x9c0 <schedule+0x5a>
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
     9be:	08 95       	ret
     9c0:	fc 01       	movw	r30, r24
     9c2:	20 81       	ld	r18, Z
     9c4:	31 81       	ldd	r19, Z+1	; 0x01
     9c6:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
     9ca:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
     9ce:	d1 83       	std	Z+1, r29	; 0x01
     9d0:	c0 83       	st	Z, r28
     9d2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
     9d6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	0c 94 93 04 	jmp	0x926	; 0x926 <dispatch>

000009e6 <dequeue.part.0>:
     9e6:	8f ef       	ldi	r24, 0xFF	; 255
     9e8:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     9ec:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     9f0:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	83 bf       	out	0x33, r24	; 51
     9f8:	88 95       	sleep
     9fa:	fd cf       	rjmp	.-6      	; 0x9f6 <dequeue.part.0+0x10>

000009fc <__vector_1>:
     9fc:	1f 92       	push	r1
     9fe:	0f 92       	push	r0
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	0f 92       	push	r0
     a04:	11 24       	eor	r1, r1
     a06:	2f 93       	push	r18
     a08:	3f 93       	push	r19
     a0a:	4f 93       	push	r20
     a0c:	5f 93       	push	r21
     a0e:	6f 93       	push	r22
     a10:	7f 93       	push	r23
     a12:	8f 93       	push	r24
     a14:	9f 93       	push	r25
     a16:	af 93       	push	r26
     a18:	bf 93       	push	r27
     a1a:	ef 93       	push	r30
     a1c:	ff 93       	push	r31
     a1e:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     a22:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     a26:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a2a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a2e:	c9 01       	movw	r24, r18
     a30:	03 2e       	mov	r0, r19
     a32:	00 0c       	add	r0, r0
     a34:	aa 0b       	sbc	r26, r26
     a36:	bb 0b       	sbc	r27, r27
     a38:	dc 01       	movw	r26, r24
     a3a:	99 27       	eor	r25, r25
     a3c:	88 27       	eor	r24, r24
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	84 2b       	or	r24, r20
     a44:	95 2b       	or	r25, r21
     a46:	a6 2b       	or	r26, r22
     a48:	b7 2b       	or	r27, r23
     a4a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     a4e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     a52:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     a56:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     a5a:	b0 9b       	sbis	0x16, 0	; 22
     a5c:	1b c0       	rjmp	.+54     	; 0xa94 <__vector_1+0x98>
     a5e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a62:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a66:	c9 01       	movw	r24, r18
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	09 2e       	mov	r0, r25
     a6c:	00 0c       	add	r0, r0
     a6e:	aa 0b       	sbc	r26, r26
     a70:	bb 0b       	sbc	r27, r27
     a72:	dc 01       	movw	r26, r24
     a74:	99 27       	eor	r25, r25
     a76:	88 27       	eor	r24, r24
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	84 2b       	or	r24, r20
     a7e:	95 2b       	or	r25, r21
     a80:	a6 2b       	or	r26, r22
     a82:	b7 2b       	or	r27, r23
     a84:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     a88:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     a8c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     a90:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     a94:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <mtable>
     a98:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <mtable+0x1>
     a9c:	30 97       	sbiw	r30, 0x00	; 0
     a9e:	39 f0       	breq	.+14     	; 0xaae <__vector_1+0xb2>
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable>
     aa8:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0x1>
     aac:	09 95       	icall
     aae:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
     ab2:	ff 91       	pop	r31
     ab4:	ef 91       	pop	r30
     ab6:	bf 91       	pop	r27
     ab8:	af 91       	pop	r26
     aba:	9f 91       	pop	r25
     abc:	8f 91       	pop	r24
     abe:	7f 91       	pop	r23
     ac0:	6f 91       	pop	r22
     ac2:	5f 91       	pop	r21
     ac4:	4f 91       	pop	r20
     ac6:	3f 91       	pop	r19
     ac8:	2f 91       	pop	r18
     aca:	0f 90       	pop	r0
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	0f 90       	pop	r0
     ad0:	1f 90       	pop	r1
     ad2:	18 95       	reti

00000ad4 <__vector_2>:
     ad4:	1f 92       	push	r1
     ad6:	0f 92       	push	r0
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	0f 92       	push	r0
     adc:	11 24       	eor	r1, r1
     ade:	2f 93       	push	r18
     ae0:	3f 93       	push	r19
     ae2:	4f 93       	push	r20
     ae4:	5f 93       	push	r21
     ae6:	6f 93       	push	r22
     ae8:	7f 93       	push	r23
     aea:	8f 93       	push	r24
     aec:	9f 93       	push	r25
     aee:	af 93       	push	r26
     af0:	bf 93       	push	r27
     af2:	ef 93       	push	r30
     af4:	ff 93       	push	r31
     af6:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     afa:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     afe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b02:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b06:	c9 01       	movw	r24, r18
     b08:	03 2e       	mov	r0, r19
     b0a:	00 0c       	add	r0, r0
     b0c:	aa 0b       	sbc	r26, r26
     b0e:	bb 0b       	sbc	r27, r27
     b10:	dc 01       	movw	r26, r24
     b12:	99 27       	eor	r25, r25
     b14:	88 27       	eor	r24, r24
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	84 2b       	or	r24, r20
     b1c:	95 2b       	or	r25, r21
     b1e:	a6 2b       	or	r26, r22
     b20:	b7 2b       	or	r27, r23
     b22:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     b26:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     b2a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     b2e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     b32:	b0 9b       	sbis	0x16, 0	; 22
     b34:	1b c0       	rjmp	.+54     	; 0xb6c <__vector_2+0x98>
     b36:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b3a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b3e:	c9 01       	movw	r24, r18
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	09 2e       	mov	r0, r25
     b44:	00 0c       	add	r0, r0
     b46:	aa 0b       	sbc	r26, r26
     b48:	bb 0b       	sbc	r27, r27
     b4a:	dc 01       	movw	r26, r24
     b4c:	99 27       	eor	r25, r25
     b4e:	88 27       	eor	r24, r24
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	84 2b       	or	r24, r20
     b56:	95 2b       	or	r25, r21
     b58:	a6 2b       	or	r26, r22
     b5a:	b7 2b       	or	r27, r23
     b5c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     b60:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     b64:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     b68:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     b6c:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable+0x2>
     b70:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0x3>
     b74:	30 97       	sbiw	r30, 0x00	; 0
     b76:	39 f0       	breq	.+14     	; 0xb86 <__vector_2+0xb2>
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0x2>
     b80:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0x3>
     b84:	09 95       	icall
     b86:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_3>:
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     bd2:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     bd6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bda:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bde:	c9 01       	movw	r24, r18
     be0:	03 2e       	mov	r0, r19
     be2:	00 0c       	add	r0, r0
     be4:	aa 0b       	sbc	r26, r26
     be6:	bb 0b       	sbc	r27, r27
     be8:	dc 01       	movw	r26, r24
     bea:	99 27       	eor	r25, r25
     bec:	88 27       	eor	r24, r24
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	84 2b       	or	r24, r20
     bf4:	95 2b       	or	r25, r21
     bf6:	a6 2b       	or	r26, r22
     bf8:	b7 2b       	or	r27, r23
     bfa:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     bfe:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     c02:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     c06:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     c0a:	b0 9b       	sbis	0x16, 0	; 22
     c0c:	1b c0       	rjmp	.+54     	; 0xc44 <__vector_3+0x98>
     c0e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c12:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c16:	c9 01       	movw	r24, r18
     c18:	01 96       	adiw	r24, 0x01	; 1
     c1a:	09 2e       	mov	r0, r25
     c1c:	00 0c       	add	r0, r0
     c1e:	aa 0b       	sbc	r26, r26
     c20:	bb 0b       	sbc	r27, r27
     c22:	dc 01       	movw	r26, r24
     c24:	99 27       	eor	r25, r25
     c26:	88 27       	eor	r24, r24
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	84 2b       	or	r24, r20
     c2e:	95 2b       	or	r25, r21
     c30:	a6 2b       	or	r26, r22
     c32:	b7 2b       	or	r27, r23
     c34:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     c38:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     c3c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     c40:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     c44:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0x4>
     c48:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0x5>
     c4c:	30 97       	sbiw	r30, 0x00	; 0
     c4e:	39 f0       	breq	.+14     	; 0xc5e <__vector_3+0xb2>
     c50:	62 e0       	ldi	r22, 0x02	; 2
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0x4>
     c58:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0x5>
     c5c:	09 95       	icall
     c5e:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
     c62:	ff 91       	pop	r31
     c64:	ef 91       	pop	r30
     c66:	bf 91       	pop	r27
     c68:	af 91       	pop	r26
     c6a:	9f 91       	pop	r25
     c6c:	8f 91       	pop	r24
     c6e:	7f 91       	pop	r23
     c70:	6f 91       	pop	r22
     c72:	5f 91       	pop	r21
     c74:	4f 91       	pop	r20
     c76:	3f 91       	pop	r19
     c78:	2f 91       	pop	r18
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	0f 90       	pop	r0
     c80:	1f 90       	pop	r1
     c82:	18 95       	reti

00000c84 <__vector_4>:
     c84:	1f 92       	push	r1
     c86:	0f 92       	push	r0
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	0f 92       	push	r0
     c8c:	11 24       	eor	r1, r1
     c8e:	2f 93       	push	r18
     c90:	3f 93       	push	r19
     c92:	4f 93       	push	r20
     c94:	5f 93       	push	r21
     c96:	6f 93       	push	r22
     c98:	7f 93       	push	r23
     c9a:	8f 93       	push	r24
     c9c:	9f 93       	push	r25
     c9e:	af 93       	push	r26
     ca0:	bf 93       	push	r27
     ca2:	ef 93       	push	r30
     ca4:	ff 93       	push	r31
     ca6:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     caa:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     cae:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cb2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cb6:	c9 01       	movw	r24, r18
     cb8:	03 2e       	mov	r0, r19
     cba:	00 0c       	add	r0, r0
     cbc:	aa 0b       	sbc	r26, r26
     cbe:	bb 0b       	sbc	r27, r27
     cc0:	dc 01       	movw	r26, r24
     cc2:	99 27       	eor	r25, r25
     cc4:	88 27       	eor	r24, r24
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	84 2b       	or	r24, r20
     ccc:	95 2b       	or	r25, r21
     cce:	a6 2b       	or	r26, r22
     cd0:	b7 2b       	or	r27, r23
     cd2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     cd6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     cda:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     cde:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     ce2:	b0 9b       	sbis	0x16, 0	; 22
     ce4:	1b c0       	rjmp	.+54     	; 0xd1c <__vector_4+0x98>
     ce6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cee:	c9 01       	movw	r24, r18
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	09 2e       	mov	r0, r25
     cf4:	00 0c       	add	r0, r0
     cf6:	aa 0b       	sbc	r26, r26
     cf8:	bb 0b       	sbc	r27, r27
     cfa:	dc 01       	movw	r26, r24
     cfc:	99 27       	eor	r25, r25
     cfe:	88 27       	eor	r24, r24
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	84 2b       	or	r24, r20
     d06:	95 2b       	or	r25, r21
     d08:	a6 2b       	or	r26, r22
     d0a:	b7 2b       	or	r27, r23
     d0c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     d10:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     d14:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     d18:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     d1c:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x6>
     d20:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x7>
     d24:	30 97       	sbiw	r30, 0x00	; 0
     d26:	39 f0       	breq	.+14     	; 0xd36 <__vector_4+0xb2>
     d28:	63 e0       	ldi	r22, 0x03	; 3
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x6>
     d30:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x7>
     d34:	09 95       	icall
     d36:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
     d3a:	ff 91       	pop	r31
     d3c:	ef 91       	pop	r30
     d3e:	bf 91       	pop	r27
     d40:	af 91       	pop	r26
     d42:	9f 91       	pop	r25
     d44:	8f 91       	pop	r24
     d46:	7f 91       	pop	r23
     d48:	6f 91       	pop	r22
     d4a:	5f 91       	pop	r21
     d4c:	4f 91       	pop	r20
     d4e:	3f 91       	pop	r19
     d50:	2f 91       	pop	r18
     d52:	0f 90       	pop	r0
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	0f 90       	pop	r0
     d58:	1f 90       	pop	r1
     d5a:	18 95       	reti

00000d5c <__vector_5>:
     d5c:	1f 92       	push	r1
     d5e:	0f 92       	push	r0
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	0f 92       	push	r0
     d64:	11 24       	eor	r1, r1
     d66:	2f 93       	push	r18
     d68:	3f 93       	push	r19
     d6a:	4f 93       	push	r20
     d6c:	5f 93       	push	r21
     d6e:	6f 93       	push	r22
     d70:	7f 93       	push	r23
     d72:	8f 93       	push	r24
     d74:	9f 93       	push	r25
     d76:	af 93       	push	r26
     d78:	bf 93       	push	r27
     d7a:	ef 93       	push	r30
     d7c:	ff 93       	push	r31
     d7e:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     d82:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     d86:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d8a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d8e:	c9 01       	movw	r24, r18
     d90:	03 2e       	mov	r0, r19
     d92:	00 0c       	add	r0, r0
     d94:	aa 0b       	sbc	r26, r26
     d96:	bb 0b       	sbc	r27, r27
     d98:	dc 01       	movw	r26, r24
     d9a:	99 27       	eor	r25, r25
     d9c:	88 27       	eor	r24, r24
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	84 2b       	or	r24, r20
     da4:	95 2b       	or	r25, r21
     da6:	a6 2b       	or	r26, r22
     da8:	b7 2b       	or	r27, r23
     daa:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     dae:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     db2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     db6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     dba:	b0 9b       	sbis	0x16, 0	; 22
     dbc:	1b c0       	rjmp	.+54     	; 0xdf4 <__vector_5+0x98>
     dbe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dc2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dc6:	c9 01       	movw	r24, r18
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	09 2e       	mov	r0, r25
     dcc:	00 0c       	add	r0, r0
     dce:	aa 0b       	sbc	r26, r26
     dd0:	bb 0b       	sbc	r27, r27
     dd2:	dc 01       	movw	r26, r24
     dd4:	99 27       	eor	r25, r25
     dd6:	88 27       	eor	r24, r24
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	84 2b       	or	r24, r20
     dde:	95 2b       	or	r25, r21
     de0:	a6 2b       	or	r26, r22
     de2:	b7 2b       	or	r27, r23
     de4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     de8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     dec:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     df0:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     df4:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x8>
     df8:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x9>
     dfc:	30 97       	sbiw	r30, 0x00	; 0
     dfe:	39 f0       	breq	.+14     	; 0xe0e <__vector_5+0xb2>
     e00:	64 e0       	ldi	r22, 0x04	; 4
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x8>
     e08:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x9>
     e0c:	09 95       	icall
     e0e:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
     e12:	ff 91       	pop	r31
     e14:	ef 91       	pop	r30
     e16:	bf 91       	pop	r27
     e18:	af 91       	pop	r26
     e1a:	9f 91       	pop	r25
     e1c:	8f 91       	pop	r24
     e1e:	7f 91       	pop	r23
     e20:	6f 91       	pop	r22
     e22:	5f 91       	pop	r21
     e24:	4f 91       	pop	r20
     e26:	3f 91       	pop	r19
     e28:	2f 91       	pop	r18
     e2a:	0f 90       	pop	r0
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	0f 90       	pop	r0
     e30:	1f 90       	pop	r1
     e32:	18 95       	reti

00000e34 <__vector_10>:
     e34:	1f 92       	push	r1
     e36:	0f 92       	push	r0
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	0f 92       	push	r0
     e3c:	11 24       	eor	r1, r1
     e3e:	2f 93       	push	r18
     e40:	3f 93       	push	r19
     e42:	4f 93       	push	r20
     e44:	5f 93       	push	r21
     e46:	6f 93       	push	r22
     e48:	7f 93       	push	r23
     e4a:	8f 93       	push	r24
     e4c:	9f 93       	push	r25
     e4e:	af 93       	push	r26
     e50:	bf 93       	push	r27
     e52:	ef 93       	push	r30
     e54:	ff 93       	push	r31
     e56:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     e5a:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     e5e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e62:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e66:	c9 01       	movw	r24, r18
     e68:	03 2e       	mov	r0, r19
     e6a:	00 0c       	add	r0, r0
     e6c:	aa 0b       	sbc	r26, r26
     e6e:	bb 0b       	sbc	r27, r27
     e70:	dc 01       	movw	r26, r24
     e72:	99 27       	eor	r25, r25
     e74:	88 27       	eor	r24, r24
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	84 2b       	or	r24, r20
     e7c:	95 2b       	or	r25, r21
     e7e:	a6 2b       	or	r26, r22
     e80:	b7 2b       	or	r27, r23
     e82:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     e86:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     e8a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     e8e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     e92:	b0 9b       	sbis	0x16, 0	; 22
     e94:	1b c0       	rjmp	.+54     	; 0xecc <__vector_10+0x98>
     e96:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e9a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e9e:	c9 01       	movw	r24, r18
     ea0:	01 96       	adiw	r24, 0x01	; 1
     ea2:	09 2e       	mov	r0, r25
     ea4:	00 0c       	add	r0, r0
     ea6:	aa 0b       	sbc	r26, r26
     ea8:	bb 0b       	sbc	r27, r27
     eaa:	dc 01       	movw	r26, r24
     eac:	99 27       	eor	r25, r25
     eae:	88 27       	eor	r24, r24
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	84 2b       	or	r24, r20
     eb6:	95 2b       	or	r25, r21
     eb8:	a6 2b       	or	r26, r22
     eba:	b7 2b       	or	r27, r23
     ebc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     ec0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     ec4:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     ec8:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     ecc:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0xa>
     ed0:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0xb>
     ed4:	30 97       	sbiw	r30, 0x00	; 0
     ed6:	39 f0       	breq	.+14     	; 0xee6 <__vector_10+0xb2>
     ed8:	65 e0       	ldi	r22, 0x05	; 5
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0xa>
     ee0:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0xb>
     ee4:	09 95       	icall
     ee6:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
     eea:	ff 91       	pop	r31
     eec:	ef 91       	pop	r30
     eee:	bf 91       	pop	r27
     ef0:	af 91       	pop	r26
     ef2:	9f 91       	pop	r25
     ef4:	8f 91       	pop	r24
     ef6:	7f 91       	pop	r23
     ef8:	6f 91       	pop	r22
     efa:	5f 91       	pop	r21
     efc:	4f 91       	pop	r20
     efe:	3f 91       	pop	r19
     f00:	2f 91       	pop	r18
     f02:	0f 90       	pop	r0
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	0f 90       	pop	r0
     f08:	1f 90       	pop	r1
     f0a:	18 95       	reti

00000f0c <__vector_11>:
     f0c:	1f 92       	push	r1
     f0e:	0f 92       	push	r0
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	0f 92       	push	r0
     f14:	11 24       	eor	r1, r1
     f16:	2f 93       	push	r18
     f18:	3f 93       	push	r19
     f1a:	4f 93       	push	r20
     f1c:	5f 93       	push	r21
     f1e:	6f 93       	push	r22
     f20:	7f 93       	push	r23
     f22:	8f 93       	push	r24
     f24:	9f 93       	push	r25
     f26:	af 93       	push	r26
     f28:	bf 93       	push	r27
     f2a:	ef 93       	push	r30
     f2c:	ff 93       	push	r31
     f2e:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     f32:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     f36:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f3a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f3e:	c9 01       	movw	r24, r18
     f40:	03 2e       	mov	r0, r19
     f42:	00 0c       	add	r0, r0
     f44:	aa 0b       	sbc	r26, r26
     f46:	bb 0b       	sbc	r27, r27
     f48:	dc 01       	movw	r26, r24
     f4a:	99 27       	eor	r25, r25
     f4c:	88 27       	eor	r24, r24
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	84 2b       	or	r24, r20
     f54:	95 2b       	or	r25, r21
     f56:	a6 2b       	or	r26, r22
     f58:	b7 2b       	or	r27, r23
     f5a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     f5e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     f62:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     f66:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     f6a:	b0 9b       	sbis	0x16, 0	; 22
     f6c:	1b c0       	rjmp	.+54     	; 0xfa4 <__vector_11+0x98>
     f6e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f72:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f76:	c9 01       	movw	r24, r18
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	09 2e       	mov	r0, r25
     f7c:	00 0c       	add	r0, r0
     f7e:	aa 0b       	sbc	r26, r26
     f80:	bb 0b       	sbc	r27, r27
     f82:	dc 01       	movw	r26, r24
     f84:	99 27       	eor	r25, r25
     f86:	88 27       	eor	r24, r24
     f88:	60 e0       	ldi	r22, 0x00	; 0
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	84 2b       	or	r24, r20
     f8e:	95 2b       	or	r25, r21
     f90:	a6 2b       	or	r26, r22
     f92:	b7 2b       	or	r27, r23
     f94:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     f98:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     f9c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     fa0:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     fa4:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0xc>
     fa8:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0xd>
     fac:	30 97       	sbiw	r30, 0x00	; 0
     fae:	39 f0       	breq	.+14     	; 0xfbe <__vector_11+0xb2>
     fb0:	66 e0       	ldi	r22, 0x06	; 6
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0xc>
     fb8:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0xd>
     fbc:	09 95       	icall
     fbe:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
     fc2:	ff 91       	pop	r31
     fc4:	ef 91       	pop	r30
     fc6:	bf 91       	pop	r27
     fc8:	af 91       	pop	r26
     fca:	9f 91       	pop	r25
     fcc:	8f 91       	pop	r24
     fce:	7f 91       	pop	r23
     fd0:	6f 91       	pop	r22
     fd2:	5f 91       	pop	r21
     fd4:	4f 91       	pop	r20
     fd6:	3f 91       	pop	r19
     fd8:	2f 91       	pop	r18
     fda:	0f 90       	pop	r0
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	0f 90       	pop	r0
     fe0:	1f 90       	pop	r1
     fe2:	18 95       	reti

00000fe4 <__vector_12>:
     fe4:	1f 92       	push	r1
     fe6:	0f 92       	push	r0
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	0f 92       	push	r0
     fec:	11 24       	eor	r1, r1
     fee:	2f 93       	push	r18
     ff0:	3f 93       	push	r19
     ff2:	4f 93       	push	r20
     ff4:	5f 93       	push	r21
     ff6:	6f 93       	push	r22
     ff8:	7f 93       	push	r23
     ffa:	8f 93       	push	r24
     ffc:	9f 93       	push	r25
     ffe:	af 93       	push	r26
    1000:	bf 93       	push	r27
    1002:	ef 93       	push	r30
    1004:	ff 93       	push	r31
    1006:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    100a:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    100e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1012:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1016:	c9 01       	movw	r24, r18
    1018:	03 2e       	mov	r0, r19
    101a:	00 0c       	add	r0, r0
    101c:	aa 0b       	sbc	r26, r26
    101e:	bb 0b       	sbc	r27, r27
    1020:	dc 01       	movw	r26, r24
    1022:	99 27       	eor	r25, r25
    1024:	88 27       	eor	r24, r24
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	84 2b       	or	r24, r20
    102c:	95 2b       	or	r25, r21
    102e:	a6 2b       	or	r26, r22
    1030:	b7 2b       	or	r27, r23
    1032:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1036:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    103a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    103e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1042:	b0 9b       	sbis	0x16, 0	; 22
    1044:	1b c0       	rjmp	.+54     	; 0x107c <__vector_12+0x98>
    1046:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    104a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    104e:	c9 01       	movw	r24, r18
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	09 2e       	mov	r0, r25
    1054:	00 0c       	add	r0, r0
    1056:	aa 0b       	sbc	r26, r26
    1058:	bb 0b       	sbc	r27, r27
    105a:	dc 01       	movw	r26, r24
    105c:	99 27       	eor	r25, r25
    105e:	88 27       	eor	r24, r24
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	84 2b       	or	r24, r20
    1066:	95 2b       	or	r25, r21
    1068:	a6 2b       	or	r26, r22
    106a:	b7 2b       	or	r27, r23
    106c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1070:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1074:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1078:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    107c:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <mtable+0xe>
    1080:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <mtable+0xf>
    1084:	30 97       	sbiw	r30, 0x00	; 0
    1086:	39 f0       	breq	.+14     	; 0x1096 <__vector_12+0xb2>
    1088:	67 e0       	ldi	r22, 0x07	; 7
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable+0xe>
    1090:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0xf>
    1094:	09 95       	icall
    1096:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    109a:	ff 91       	pop	r31
    109c:	ef 91       	pop	r30
    109e:	bf 91       	pop	r27
    10a0:	af 91       	pop	r26
    10a2:	9f 91       	pop	r25
    10a4:	8f 91       	pop	r24
    10a6:	7f 91       	pop	r23
    10a8:	6f 91       	pop	r22
    10aa:	5f 91       	pop	r21
    10ac:	4f 91       	pop	r20
    10ae:	3f 91       	pop	r19
    10b0:	2f 91       	pop	r18
    10b2:	0f 90       	pop	r0
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	0f 90       	pop	r0
    10b8:	1f 90       	pop	r1
    10ba:	18 95       	reti

000010bc <__vector_13>:
    10bc:	1f 92       	push	r1
    10be:	0f 92       	push	r0
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	0f 92       	push	r0
    10c4:	11 24       	eor	r1, r1
    10c6:	2f 93       	push	r18
    10c8:	3f 93       	push	r19
    10ca:	4f 93       	push	r20
    10cc:	5f 93       	push	r21
    10ce:	6f 93       	push	r22
    10d0:	7f 93       	push	r23
    10d2:	8f 93       	push	r24
    10d4:	9f 93       	push	r25
    10d6:	af 93       	push	r26
    10d8:	bf 93       	push	r27
    10da:	ef 93       	push	r30
    10dc:	ff 93       	push	r31
    10de:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    10e2:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    10e6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10ea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10ee:	c9 01       	movw	r24, r18
    10f0:	03 2e       	mov	r0, r19
    10f2:	00 0c       	add	r0, r0
    10f4:	aa 0b       	sbc	r26, r26
    10f6:	bb 0b       	sbc	r27, r27
    10f8:	dc 01       	movw	r26, r24
    10fa:	99 27       	eor	r25, r25
    10fc:	88 27       	eor	r24, r24
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	84 2b       	or	r24, r20
    1104:	95 2b       	or	r25, r21
    1106:	a6 2b       	or	r26, r22
    1108:	b7 2b       	or	r27, r23
    110a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    110e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1112:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1116:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    111a:	b0 9b       	sbis	0x16, 0	; 22
    111c:	1b c0       	rjmp	.+54     	; 0x1154 <__vector_13+0x98>
    111e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1122:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1126:	c9 01       	movw	r24, r18
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	09 2e       	mov	r0, r25
    112c:	00 0c       	add	r0, r0
    112e:	aa 0b       	sbc	r26, r26
    1130:	bb 0b       	sbc	r27, r27
    1132:	dc 01       	movw	r26, r24
    1134:	99 27       	eor	r25, r25
    1136:	88 27       	eor	r24, r24
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	84 2b       	or	r24, r20
    113e:	95 2b       	or	r25, r21
    1140:	a6 2b       	or	r26, r22
    1142:	b7 2b       	or	r27, r23
    1144:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1148:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    114c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1150:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1154:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <mtable+0x10>
    1158:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <mtable+0x11>
    115c:	30 97       	sbiw	r30, 0x00	; 0
    115e:	39 f0       	breq	.+14     	; 0x116e <__vector_13+0xb2>
    1160:	68 e0       	ldi	r22, 0x08	; 8
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <otable+0x10>
    1168:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <otable+0x11>
    116c:	09 95       	icall
    116e:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    1172:	ff 91       	pop	r31
    1174:	ef 91       	pop	r30
    1176:	bf 91       	pop	r27
    1178:	af 91       	pop	r26
    117a:	9f 91       	pop	r25
    117c:	8f 91       	pop	r24
    117e:	7f 91       	pop	r23
    1180:	6f 91       	pop	r22
    1182:	5f 91       	pop	r21
    1184:	4f 91       	pop	r20
    1186:	3f 91       	pop	r19
    1188:	2f 91       	pop	r18
    118a:	0f 90       	pop	r0
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	0f 90       	pop	r0
    1190:	1f 90       	pop	r1
    1192:	18 95       	reti

00001194 <__vector_14>:
    1194:	1f 92       	push	r1
    1196:	0f 92       	push	r0
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	0f 92       	push	r0
    119c:	11 24       	eor	r1, r1
    119e:	2f 93       	push	r18
    11a0:	3f 93       	push	r19
    11a2:	4f 93       	push	r20
    11a4:	5f 93       	push	r21
    11a6:	6f 93       	push	r22
    11a8:	7f 93       	push	r23
    11aa:	8f 93       	push	r24
    11ac:	9f 93       	push	r25
    11ae:	af 93       	push	r26
    11b0:	bf 93       	push	r27
    11b2:	ef 93       	push	r30
    11b4:	ff 93       	push	r31
    11b6:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    11ba:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    11be:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11c2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11c6:	c9 01       	movw	r24, r18
    11c8:	03 2e       	mov	r0, r19
    11ca:	00 0c       	add	r0, r0
    11cc:	aa 0b       	sbc	r26, r26
    11ce:	bb 0b       	sbc	r27, r27
    11d0:	dc 01       	movw	r26, r24
    11d2:	99 27       	eor	r25, r25
    11d4:	88 27       	eor	r24, r24
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	84 2b       	or	r24, r20
    11dc:	95 2b       	or	r25, r21
    11de:	a6 2b       	or	r26, r22
    11e0:	b7 2b       	or	r27, r23
    11e2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    11e6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    11ea:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    11ee:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    11f2:	b0 9b       	sbis	0x16, 0	; 22
    11f4:	1b c0       	rjmp	.+54     	; 0x122c <__vector_14+0x98>
    11f6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11fa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11fe:	c9 01       	movw	r24, r18
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	09 2e       	mov	r0, r25
    1204:	00 0c       	add	r0, r0
    1206:	aa 0b       	sbc	r26, r26
    1208:	bb 0b       	sbc	r27, r27
    120a:	dc 01       	movw	r26, r24
    120c:	99 27       	eor	r25, r25
    120e:	88 27       	eor	r24, r24
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	84 2b       	or	r24, r20
    1216:	95 2b       	or	r25, r21
    1218:	a6 2b       	or	r26, r22
    121a:	b7 2b       	or	r27, r23
    121c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1220:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1224:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1228:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    122c:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <mtable+0x12>
    1230:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <mtable+0x13>
    1234:	30 97       	sbiw	r30, 0x00	; 0
    1236:	39 f0       	breq	.+14     	; 0x1246 <__vector_14+0xb2>
    1238:	69 e0       	ldi	r22, 0x09	; 9
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable+0x12>
    1240:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x13>
    1244:	09 95       	icall
    1246:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    124a:	ff 91       	pop	r31
    124c:	ef 91       	pop	r30
    124e:	bf 91       	pop	r27
    1250:	af 91       	pop	r26
    1252:	9f 91       	pop	r25
    1254:	8f 91       	pop	r24
    1256:	7f 91       	pop	r23
    1258:	6f 91       	pop	r22
    125a:	5f 91       	pop	r21
    125c:	4f 91       	pop	r20
    125e:	3f 91       	pop	r19
    1260:	2f 91       	pop	r18
    1262:	0f 90       	pop	r0
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	0f 90       	pop	r0
    1268:	1f 90       	pop	r1
    126a:	18 95       	reti

0000126c <__vector_15>:
    126c:	1f 92       	push	r1
    126e:	0f 92       	push	r0
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	0f 92       	push	r0
    1274:	11 24       	eor	r1, r1
    1276:	2f 93       	push	r18
    1278:	3f 93       	push	r19
    127a:	4f 93       	push	r20
    127c:	5f 93       	push	r21
    127e:	6f 93       	push	r22
    1280:	7f 93       	push	r23
    1282:	8f 93       	push	r24
    1284:	9f 93       	push	r25
    1286:	af 93       	push	r26
    1288:	bf 93       	push	r27
    128a:	ef 93       	push	r30
    128c:	ff 93       	push	r31
    128e:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1292:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1296:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    129a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    129e:	c9 01       	movw	r24, r18
    12a0:	03 2e       	mov	r0, r19
    12a2:	00 0c       	add	r0, r0
    12a4:	aa 0b       	sbc	r26, r26
    12a6:	bb 0b       	sbc	r27, r27
    12a8:	dc 01       	movw	r26, r24
    12aa:	99 27       	eor	r25, r25
    12ac:	88 27       	eor	r24, r24
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	84 2b       	or	r24, r20
    12b4:	95 2b       	or	r25, r21
    12b6:	a6 2b       	or	r26, r22
    12b8:	b7 2b       	or	r27, r23
    12ba:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    12be:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    12c2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    12c6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    12ca:	b0 9b       	sbis	0x16, 0	; 22
    12cc:	1b c0       	rjmp	.+54     	; 0x1304 <__vector_15+0x98>
    12ce:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12d2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12d6:	c9 01       	movw	r24, r18
    12d8:	01 96       	adiw	r24, 0x01	; 1
    12da:	09 2e       	mov	r0, r25
    12dc:	00 0c       	add	r0, r0
    12de:	aa 0b       	sbc	r26, r26
    12e0:	bb 0b       	sbc	r27, r27
    12e2:	dc 01       	movw	r26, r24
    12e4:	99 27       	eor	r25, r25
    12e6:	88 27       	eor	r24, r24
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	84 2b       	or	r24, r20
    12ee:	95 2b       	or	r25, r21
    12f0:	a6 2b       	or	r26, r22
    12f2:	b7 2b       	or	r27, r23
    12f4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    12f8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    12fc:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1300:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1304:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <mtable+0x14>
    1308:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <mtable+0x15>
    130c:	30 97       	sbiw	r30, 0x00	; 0
    130e:	39 f0       	breq	.+14     	; 0x131e <__vector_15+0xb2>
    1310:	6a e0       	ldi	r22, 0x0A	; 10
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable+0x14>
    1318:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x15>
    131c:	09 95       	icall
    131e:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    1322:	ff 91       	pop	r31
    1324:	ef 91       	pop	r30
    1326:	bf 91       	pop	r27
    1328:	af 91       	pop	r26
    132a:	9f 91       	pop	r25
    132c:	8f 91       	pop	r24
    132e:	7f 91       	pop	r23
    1330:	6f 91       	pop	r22
    1332:	5f 91       	pop	r21
    1334:	4f 91       	pop	r20
    1336:	3f 91       	pop	r19
    1338:	2f 91       	pop	r18
    133a:	0f 90       	pop	r0
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	0f 90       	pop	r0
    1340:	1f 90       	pop	r1
    1342:	18 95       	reti

00001344 <__vector_16>:
    1344:	1f 92       	push	r1
    1346:	0f 92       	push	r0
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	0f 92       	push	r0
    134c:	11 24       	eor	r1, r1
    134e:	2f 93       	push	r18
    1350:	3f 93       	push	r19
    1352:	4f 93       	push	r20
    1354:	5f 93       	push	r21
    1356:	6f 93       	push	r22
    1358:	7f 93       	push	r23
    135a:	8f 93       	push	r24
    135c:	9f 93       	push	r25
    135e:	af 93       	push	r26
    1360:	bf 93       	push	r27
    1362:	ef 93       	push	r30
    1364:	ff 93       	push	r31
    1366:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    136a:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    136e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1372:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1376:	c9 01       	movw	r24, r18
    1378:	03 2e       	mov	r0, r19
    137a:	00 0c       	add	r0, r0
    137c:	aa 0b       	sbc	r26, r26
    137e:	bb 0b       	sbc	r27, r27
    1380:	dc 01       	movw	r26, r24
    1382:	99 27       	eor	r25, r25
    1384:	88 27       	eor	r24, r24
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	84 2b       	or	r24, r20
    138c:	95 2b       	or	r25, r21
    138e:	a6 2b       	or	r26, r22
    1390:	b7 2b       	or	r27, r23
    1392:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1396:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    139a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    139e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    13a2:	b0 9b       	sbis	0x16, 0	; 22
    13a4:	1b c0       	rjmp	.+54     	; 0x13dc <__vector_16+0x98>
    13a6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13aa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13ae:	c9 01       	movw	r24, r18
    13b0:	01 96       	adiw	r24, 0x01	; 1
    13b2:	09 2e       	mov	r0, r25
    13b4:	00 0c       	add	r0, r0
    13b6:	aa 0b       	sbc	r26, r26
    13b8:	bb 0b       	sbc	r27, r27
    13ba:	dc 01       	movw	r26, r24
    13bc:	99 27       	eor	r25, r25
    13be:	88 27       	eor	r24, r24
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	84 2b       	or	r24, r20
    13c6:	95 2b       	or	r25, r21
    13c8:	a6 2b       	or	r26, r22
    13ca:	b7 2b       	or	r27, r23
    13cc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    13d0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    13d4:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    13d8:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    13dc:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <mtable+0x16>
    13e0:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <mtable+0x17>
    13e4:	30 97       	sbiw	r30, 0x00	; 0
    13e6:	39 f0       	breq	.+14     	; 0x13f6 <__vector_16+0xb2>
    13e8:	6b e0       	ldi	r22, 0x0B	; 11
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable+0x16>
    13f0:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x17>
    13f4:	09 95       	icall
    13f6:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    13fa:	ff 91       	pop	r31
    13fc:	ef 91       	pop	r30
    13fe:	bf 91       	pop	r27
    1400:	af 91       	pop	r26
    1402:	9f 91       	pop	r25
    1404:	8f 91       	pop	r24
    1406:	7f 91       	pop	r23
    1408:	6f 91       	pop	r22
    140a:	5f 91       	pop	r21
    140c:	4f 91       	pop	r20
    140e:	3f 91       	pop	r19
    1410:	2f 91       	pop	r18
    1412:	0f 90       	pop	r0
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	0f 90       	pop	r0
    1418:	1f 90       	pop	r1
    141a:	18 95       	reti

0000141c <__vector_17>:
    141c:	1f 92       	push	r1
    141e:	0f 92       	push	r0
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	0f 92       	push	r0
    1424:	11 24       	eor	r1, r1
    1426:	2f 93       	push	r18
    1428:	3f 93       	push	r19
    142a:	4f 93       	push	r20
    142c:	5f 93       	push	r21
    142e:	6f 93       	push	r22
    1430:	7f 93       	push	r23
    1432:	8f 93       	push	r24
    1434:	9f 93       	push	r25
    1436:	af 93       	push	r26
    1438:	bf 93       	push	r27
    143a:	ef 93       	push	r30
    143c:	ff 93       	push	r31
    143e:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1442:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1446:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    144a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    144e:	c9 01       	movw	r24, r18
    1450:	03 2e       	mov	r0, r19
    1452:	00 0c       	add	r0, r0
    1454:	aa 0b       	sbc	r26, r26
    1456:	bb 0b       	sbc	r27, r27
    1458:	dc 01       	movw	r26, r24
    145a:	99 27       	eor	r25, r25
    145c:	88 27       	eor	r24, r24
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	84 2b       	or	r24, r20
    1464:	95 2b       	or	r25, r21
    1466:	a6 2b       	or	r26, r22
    1468:	b7 2b       	or	r27, r23
    146a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    146e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1472:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1476:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    147a:	b0 9b       	sbis	0x16, 0	; 22
    147c:	1b c0       	rjmp	.+54     	; 0x14b4 <__vector_17+0x98>
    147e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1482:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1486:	c9 01       	movw	r24, r18
    1488:	01 96       	adiw	r24, 0x01	; 1
    148a:	09 2e       	mov	r0, r25
    148c:	00 0c       	add	r0, r0
    148e:	aa 0b       	sbc	r26, r26
    1490:	bb 0b       	sbc	r27, r27
    1492:	dc 01       	movw	r26, r24
    1494:	99 27       	eor	r25, r25
    1496:	88 27       	eor	r24, r24
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	84 2b       	or	r24, r20
    149e:	95 2b       	or	r25, r21
    14a0:	a6 2b       	or	r26, r22
    14a2:	b7 2b       	or	r27, r23
    14a4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    14a8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    14ac:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    14b0:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    14b4:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable+0x18>
    14b8:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x19>
    14bc:	30 97       	sbiw	r30, 0x00	; 0
    14be:	39 f0       	breq	.+14     	; 0x14ce <__vector_17+0xb2>
    14c0:	6c e0       	ldi	r22, 0x0C	; 12
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0x18>
    14c8:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x19>
    14cc:	09 95       	icall
    14ce:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    14d2:	ff 91       	pop	r31
    14d4:	ef 91       	pop	r30
    14d6:	bf 91       	pop	r27
    14d8:	af 91       	pop	r26
    14da:	9f 91       	pop	r25
    14dc:	8f 91       	pop	r24
    14de:	7f 91       	pop	r23
    14e0:	6f 91       	pop	r22
    14e2:	5f 91       	pop	r21
    14e4:	4f 91       	pop	r20
    14e6:	3f 91       	pop	r19
    14e8:	2f 91       	pop	r18
    14ea:	0f 90       	pop	r0
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	0f 90       	pop	r0
    14f0:	1f 90       	pop	r1
    14f2:	18 95       	reti

000014f4 <__vector_18>:
    14f4:	1f 92       	push	r1
    14f6:	0f 92       	push	r0
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	0f 92       	push	r0
    14fc:	11 24       	eor	r1, r1
    14fe:	2f 93       	push	r18
    1500:	3f 93       	push	r19
    1502:	4f 93       	push	r20
    1504:	5f 93       	push	r21
    1506:	6f 93       	push	r22
    1508:	7f 93       	push	r23
    150a:	8f 93       	push	r24
    150c:	9f 93       	push	r25
    150e:	af 93       	push	r26
    1510:	bf 93       	push	r27
    1512:	ef 93       	push	r30
    1514:	ff 93       	push	r31
    1516:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    151a:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    151e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1522:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1526:	c9 01       	movw	r24, r18
    1528:	03 2e       	mov	r0, r19
    152a:	00 0c       	add	r0, r0
    152c:	aa 0b       	sbc	r26, r26
    152e:	bb 0b       	sbc	r27, r27
    1530:	dc 01       	movw	r26, r24
    1532:	99 27       	eor	r25, r25
    1534:	88 27       	eor	r24, r24
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	84 2b       	or	r24, r20
    153c:	95 2b       	or	r25, r21
    153e:	a6 2b       	or	r26, r22
    1540:	b7 2b       	or	r27, r23
    1542:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1546:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    154a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    154e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1552:	b0 9b       	sbis	0x16, 0	; 22
    1554:	1b c0       	rjmp	.+54     	; 0x158c <__vector_18+0x98>
    1556:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    155a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    155e:	c9 01       	movw	r24, r18
    1560:	01 96       	adiw	r24, 0x01	; 1
    1562:	09 2e       	mov	r0, r25
    1564:	00 0c       	add	r0, r0
    1566:	aa 0b       	sbc	r26, r26
    1568:	bb 0b       	sbc	r27, r27
    156a:	dc 01       	movw	r26, r24
    156c:	99 27       	eor	r25, r25
    156e:	88 27       	eor	r24, r24
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	84 2b       	or	r24, r20
    1576:	95 2b       	or	r25, r21
    1578:	a6 2b       	or	r26, r22
    157a:	b7 2b       	or	r27, r23
    157c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1580:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1584:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1588:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    158c:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0x1a>
    1590:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x1b>
    1594:	30 97       	sbiw	r30, 0x00	; 0
    1596:	39 f0       	breq	.+14     	; 0x15a6 <__vector_18+0xb2>
    1598:	6d e0       	ldi	r22, 0x0D	; 13
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0x1a>
    15a0:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x1b>
    15a4:	09 95       	icall
    15a6:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    15aa:	ff 91       	pop	r31
    15ac:	ef 91       	pop	r30
    15ae:	bf 91       	pop	r27
    15b0:	af 91       	pop	r26
    15b2:	9f 91       	pop	r25
    15b4:	8f 91       	pop	r24
    15b6:	7f 91       	pop	r23
    15b8:	6f 91       	pop	r22
    15ba:	5f 91       	pop	r21
    15bc:	4f 91       	pop	r20
    15be:	3f 91       	pop	r19
    15c0:	2f 91       	pop	r18
    15c2:	0f 90       	pop	r0
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	0f 90       	pop	r0
    15c8:	1f 90       	pop	r1
    15ca:	18 95       	reti

000015cc <__vector_19>:
    15cc:	1f 92       	push	r1
    15ce:	0f 92       	push	r0
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	0f 92       	push	r0
    15d4:	11 24       	eor	r1, r1
    15d6:	2f 93       	push	r18
    15d8:	3f 93       	push	r19
    15da:	4f 93       	push	r20
    15dc:	5f 93       	push	r21
    15de:	6f 93       	push	r22
    15e0:	7f 93       	push	r23
    15e2:	8f 93       	push	r24
    15e4:	9f 93       	push	r25
    15e6:	af 93       	push	r26
    15e8:	bf 93       	push	r27
    15ea:	ef 93       	push	r30
    15ec:	ff 93       	push	r31
    15ee:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    15f2:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    15f6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15fa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15fe:	c9 01       	movw	r24, r18
    1600:	03 2e       	mov	r0, r19
    1602:	00 0c       	add	r0, r0
    1604:	aa 0b       	sbc	r26, r26
    1606:	bb 0b       	sbc	r27, r27
    1608:	dc 01       	movw	r26, r24
    160a:	99 27       	eor	r25, r25
    160c:	88 27       	eor	r24, r24
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	84 2b       	or	r24, r20
    1614:	95 2b       	or	r25, r21
    1616:	a6 2b       	or	r26, r22
    1618:	b7 2b       	or	r27, r23
    161a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    161e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1622:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1626:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    162a:	b0 9b       	sbis	0x16, 0	; 22
    162c:	1b c0       	rjmp	.+54     	; 0x1664 <__vector_19+0x98>
    162e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1632:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1636:	c9 01       	movw	r24, r18
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	09 2e       	mov	r0, r25
    163c:	00 0c       	add	r0, r0
    163e:	aa 0b       	sbc	r26, r26
    1640:	bb 0b       	sbc	r27, r27
    1642:	dc 01       	movw	r26, r24
    1644:	99 27       	eor	r25, r25
    1646:	88 27       	eor	r24, r24
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	84 2b       	or	r24, r20
    164e:	95 2b       	or	r25, r21
    1650:	a6 2b       	or	r26, r22
    1652:	b7 2b       	or	r27, r23
    1654:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1658:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    165c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1660:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1664:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0x1c>
    1668:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x1d>
    166c:	30 97       	sbiw	r30, 0x00	; 0
    166e:	39 f0       	breq	.+14     	; 0x167e <__vector_19+0xb2>
    1670:	6e e0       	ldi	r22, 0x0E	; 14
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0x1c>
    1678:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x1d>
    167c:	09 95       	icall
    167e:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    1682:	ff 91       	pop	r31
    1684:	ef 91       	pop	r30
    1686:	bf 91       	pop	r27
    1688:	af 91       	pop	r26
    168a:	9f 91       	pop	r25
    168c:	8f 91       	pop	r24
    168e:	7f 91       	pop	r23
    1690:	6f 91       	pop	r22
    1692:	5f 91       	pop	r21
    1694:	4f 91       	pop	r20
    1696:	3f 91       	pop	r19
    1698:	2f 91       	pop	r18
    169a:	0f 90       	pop	r0
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	0f 90       	pop	r0
    16a0:	1f 90       	pop	r1
    16a2:	18 95       	reti

000016a4 <__vector_20>:
    16a4:	1f 92       	push	r1
    16a6:	0f 92       	push	r0
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	0f 92       	push	r0
    16ac:	11 24       	eor	r1, r1
    16ae:	2f 93       	push	r18
    16b0:	3f 93       	push	r19
    16b2:	4f 93       	push	r20
    16b4:	5f 93       	push	r21
    16b6:	6f 93       	push	r22
    16b8:	7f 93       	push	r23
    16ba:	8f 93       	push	r24
    16bc:	9f 93       	push	r25
    16be:	af 93       	push	r26
    16c0:	bf 93       	push	r27
    16c2:	ef 93       	push	r30
    16c4:	ff 93       	push	r31
    16c6:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    16ca:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    16ce:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16d2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16d6:	c9 01       	movw	r24, r18
    16d8:	03 2e       	mov	r0, r19
    16da:	00 0c       	add	r0, r0
    16dc:	aa 0b       	sbc	r26, r26
    16de:	bb 0b       	sbc	r27, r27
    16e0:	dc 01       	movw	r26, r24
    16e2:	99 27       	eor	r25, r25
    16e4:	88 27       	eor	r24, r24
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	84 2b       	or	r24, r20
    16ec:	95 2b       	or	r25, r21
    16ee:	a6 2b       	or	r26, r22
    16f0:	b7 2b       	or	r27, r23
    16f2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    16f6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    16fa:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    16fe:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1702:	b0 9b       	sbis	0x16, 0	; 22
    1704:	1b c0       	rjmp	.+54     	; 0x173c <__vector_20+0x98>
    1706:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    170a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    170e:	c9 01       	movw	r24, r18
    1710:	01 96       	adiw	r24, 0x01	; 1
    1712:	09 2e       	mov	r0, r25
    1714:	00 0c       	add	r0, r0
    1716:	aa 0b       	sbc	r26, r26
    1718:	bb 0b       	sbc	r27, r27
    171a:	dc 01       	movw	r26, r24
    171c:	99 27       	eor	r25, r25
    171e:	88 27       	eor	r24, r24
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	84 2b       	or	r24, r20
    1726:	95 2b       	or	r25, r21
    1728:	a6 2b       	or	r26, r22
    172a:	b7 2b       	or	r27, r23
    172c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1730:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1734:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1738:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    173c:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x1e>
    1740:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x1f>
    1744:	30 97       	sbiw	r30, 0x00	; 0
    1746:	39 f0       	breq	.+14     	; 0x1756 <__vector_20+0xb2>
    1748:	6f e0       	ldi	r22, 0x0F	; 15
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x1e>
    1750:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x1f>
    1754:	09 95       	icall
    1756:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    175a:	ff 91       	pop	r31
    175c:	ef 91       	pop	r30
    175e:	bf 91       	pop	r27
    1760:	af 91       	pop	r26
    1762:	9f 91       	pop	r25
    1764:	8f 91       	pop	r24
    1766:	7f 91       	pop	r23
    1768:	6f 91       	pop	r22
    176a:	5f 91       	pop	r21
    176c:	4f 91       	pop	r20
    176e:	3f 91       	pop	r19
    1770:	2f 91       	pop	r18
    1772:	0f 90       	pop	r0
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	0f 90       	pop	r0
    1778:	1f 90       	pop	r1
    177a:	18 95       	reti

0000177c <__vector_21>:
    177c:	1f 92       	push	r1
    177e:	0f 92       	push	r0
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	0f 92       	push	r0
    1784:	11 24       	eor	r1, r1
    1786:	2f 93       	push	r18
    1788:	3f 93       	push	r19
    178a:	4f 93       	push	r20
    178c:	5f 93       	push	r21
    178e:	6f 93       	push	r22
    1790:	7f 93       	push	r23
    1792:	8f 93       	push	r24
    1794:	9f 93       	push	r25
    1796:	af 93       	push	r26
    1798:	bf 93       	push	r27
    179a:	ef 93       	push	r30
    179c:	ff 93       	push	r31
    179e:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    17a2:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    17a6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17aa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17ae:	c9 01       	movw	r24, r18
    17b0:	03 2e       	mov	r0, r19
    17b2:	00 0c       	add	r0, r0
    17b4:	aa 0b       	sbc	r26, r26
    17b6:	bb 0b       	sbc	r27, r27
    17b8:	dc 01       	movw	r26, r24
    17ba:	99 27       	eor	r25, r25
    17bc:	88 27       	eor	r24, r24
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	84 2b       	or	r24, r20
    17c4:	95 2b       	or	r25, r21
    17c6:	a6 2b       	or	r26, r22
    17c8:	b7 2b       	or	r27, r23
    17ca:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    17ce:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    17d2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    17d6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    17da:	b0 9b       	sbis	0x16, 0	; 22
    17dc:	1b c0       	rjmp	.+54     	; 0x1814 <__vector_21+0x98>
    17de:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17e2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17e6:	c9 01       	movw	r24, r18
    17e8:	01 96       	adiw	r24, 0x01	; 1
    17ea:	09 2e       	mov	r0, r25
    17ec:	00 0c       	add	r0, r0
    17ee:	aa 0b       	sbc	r26, r26
    17f0:	bb 0b       	sbc	r27, r27
    17f2:	dc 01       	movw	r26, r24
    17f4:	99 27       	eor	r25, r25
    17f6:	88 27       	eor	r24, r24
    17f8:	60 e0       	ldi	r22, 0x00	; 0
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	84 2b       	or	r24, r20
    17fe:	95 2b       	or	r25, r21
    1800:	a6 2b       	or	r26, r22
    1802:	b7 2b       	or	r27, r23
    1804:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1808:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    180c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1810:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1814:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x20>
    1818:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x21>
    181c:	30 97       	sbiw	r30, 0x00	; 0
    181e:	39 f0       	breq	.+14     	; 0x182e <__vector_21+0xb2>
    1820:	60 e1       	ldi	r22, 0x10	; 16
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x20>
    1828:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x21>
    182c:	09 95       	icall
    182e:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    1832:	ff 91       	pop	r31
    1834:	ef 91       	pop	r30
    1836:	bf 91       	pop	r27
    1838:	af 91       	pop	r26
    183a:	9f 91       	pop	r25
    183c:	8f 91       	pop	r24
    183e:	7f 91       	pop	r23
    1840:	6f 91       	pop	r22
    1842:	5f 91       	pop	r21
    1844:	4f 91       	pop	r20
    1846:	3f 91       	pop	r19
    1848:	2f 91       	pop	r18
    184a:	0f 90       	pop	r0
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	0f 90       	pop	r0
    1850:	1f 90       	pop	r1
    1852:	18 95       	reti

00001854 <__vector_22>:
    1854:	1f 92       	push	r1
    1856:	0f 92       	push	r0
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	0f 92       	push	r0
    185c:	11 24       	eor	r1, r1
    185e:	2f 93       	push	r18
    1860:	3f 93       	push	r19
    1862:	4f 93       	push	r20
    1864:	5f 93       	push	r21
    1866:	6f 93       	push	r22
    1868:	7f 93       	push	r23
    186a:	8f 93       	push	r24
    186c:	9f 93       	push	r25
    186e:	af 93       	push	r26
    1870:	bf 93       	push	r27
    1872:	ef 93       	push	r30
    1874:	ff 93       	push	r31
    1876:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    187a:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    187e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1882:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1886:	c9 01       	movw	r24, r18
    1888:	03 2e       	mov	r0, r19
    188a:	00 0c       	add	r0, r0
    188c:	aa 0b       	sbc	r26, r26
    188e:	bb 0b       	sbc	r27, r27
    1890:	dc 01       	movw	r26, r24
    1892:	99 27       	eor	r25, r25
    1894:	88 27       	eor	r24, r24
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	84 2b       	or	r24, r20
    189c:	95 2b       	or	r25, r21
    189e:	a6 2b       	or	r26, r22
    18a0:	b7 2b       	or	r27, r23
    18a2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    18a6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    18aa:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    18ae:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    18b2:	b0 9b       	sbis	0x16, 0	; 22
    18b4:	1b c0       	rjmp	.+54     	; 0x18ec <__vector_22+0x98>
    18b6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18ba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18be:	c9 01       	movw	r24, r18
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	09 2e       	mov	r0, r25
    18c4:	00 0c       	add	r0, r0
    18c6:	aa 0b       	sbc	r26, r26
    18c8:	bb 0b       	sbc	r27, r27
    18ca:	dc 01       	movw	r26, r24
    18cc:	99 27       	eor	r25, r25
    18ce:	88 27       	eor	r24, r24
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	84 2b       	or	r24, r20
    18d6:	95 2b       	or	r25, r21
    18d8:	a6 2b       	or	r26, r22
    18da:	b7 2b       	or	r27, r23
    18dc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    18e0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    18e4:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    18e8:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    18ec:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x22>
    18f0:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x23>
    18f4:	30 97       	sbiw	r30, 0x00	; 0
    18f6:	39 f0       	breq	.+14     	; 0x1906 <__vector_22+0xb2>
    18f8:	61 e1       	ldi	r22, 0x11	; 17
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x22>
    1900:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x23>
    1904:	09 95       	icall
    1906:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    190a:	ff 91       	pop	r31
    190c:	ef 91       	pop	r30
    190e:	bf 91       	pop	r27
    1910:	af 91       	pop	r26
    1912:	9f 91       	pop	r25
    1914:	8f 91       	pop	r24
    1916:	7f 91       	pop	r23
    1918:	6f 91       	pop	r22
    191a:	5f 91       	pop	r21
    191c:	4f 91       	pop	r20
    191e:	3f 91       	pop	r19
    1920:	2f 91       	pop	r18
    1922:	0f 90       	pop	r0
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	0f 90       	pop	r0
    1928:	1f 90       	pop	r1
    192a:	18 95       	reti

0000192c <__vector_9>:
    192c:	1f 92       	push	r1
    192e:	0f 92       	push	r0
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	0f 92       	push	r0
    1934:	11 24       	eor	r1, r1
    1936:	2f 93       	push	r18
    1938:	3f 93       	push	r19
    193a:	4f 93       	push	r20
    193c:	5f 93       	push	r21
    193e:	6f 93       	push	r22
    1940:	7f 93       	push	r23
    1942:	8f 93       	push	r24
    1944:	9f 93       	push	r25
    1946:	ef 93       	push	r30
    1948:	ff 93       	push	r31
    194a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    194e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1952:	01 96       	adiw	r24, 0x01	; 1
    1954:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
    1958:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
    195c:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timerQ>
    1960:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timerQ+0x1>
    1964:	30 97       	sbiw	r30, 0x00	; 0
    1966:	39 f0       	breq	.+14     	; 0x1976 <__vector_9+0x4a>
    1968:	42 81       	ldd	r20, Z+2	; 0x02
    196a:	53 81       	ldd	r21, Z+3	; 0x03
    196c:	64 81       	ldd	r22, Z+4	; 0x04
    196e:	75 81       	ldd	r23, Z+5	; 0x05
    1970:	86 17       	cp	r24, r22
    1972:	97 07       	cpc	r25, r23
    1974:	a1 f0       	breq	.+40     	; 0x199e <__vector_9+0x72>
    1976:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    197a:	8d 7f       	andi	r24, 0xFD	; 253
    197c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1980:	ff 91       	pop	r31
    1982:	ef 91       	pop	r30
    1984:	9f 91       	pop	r25
    1986:	8f 91       	pop	r24
    1988:	7f 91       	pop	r23
    198a:	6f 91       	pop	r22
    198c:	5f 91       	pop	r21
    198e:	4f 91       	pop	r20
    1990:	3f 91       	pop	r19
    1992:	2f 91       	pop	r18
    1994:	0f 90       	pop	r0
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	0f 90       	pop	r0
    199a:	1f 90       	pop	r1
    199c:	18 95       	reti
    199e:	ca 01       	movw	r24, r20
    19a0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19a4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19a8:	42 1b       	sub	r20, r18
    19aa:	53 0b       	sbc	r21, r19
    19ac:	41 30       	cpi	r20, 0x01	; 1
    19ae:	51 05       	cpc	r21, r1
    19b0:	51 f0       	breq	.+20     	; 0x19c6 <__vector_9+0x9a>
    19b2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    19b6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    19ba:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    19be:	82 60       	ori	r24, 0x02	; 2
    19c0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    19c4:	dd cf       	rjmp	.-70     	; 0x1980 <__vector_9+0x54>
    19c6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19ca:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19ce:	01 96       	adiw	r24, 0x01	; 1
    19d0:	f0 cf       	rjmp	.-32     	; 0x19b2 <__vector_9+0x86>

000019d2 <__vector_7>:
    19d2:	1f 92       	push	r1
    19d4:	0f 92       	push	r0
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	0f 92       	push	r0
    19da:	11 24       	eor	r1, r1
    19dc:	8f 92       	push	r8
    19de:	9f 92       	push	r9
    19e0:	af 92       	push	r10
    19e2:	bf 92       	push	r11
    19e4:	cf 92       	push	r12
    19e6:	df 92       	push	r13
    19e8:	ef 92       	push	r14
    19ea:	ff 92       	push	r15
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	2f 93       	push	r18
    19f2:	3f 93       	push	r19
    19f4:	4f 93       	push	r20
    19f6:	5f 93       	push	r21
    19f8:	6f 93       	push	r22
    19fa:	7f 93       	push	r23
    19fc:	8f 93       	push	r24
    19fe:	9f 93       	push	r25
    1a00:	af 93       	push	r26
    1a02:	bf 93       	push	r27
    1a04:	cf 93       	push	r28
    1a06:	df 93       	push	r29
    1a08:	ef 93       	push	r30
    1a0a:	ff 93       	push	r31
    1a0c:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <__data_end>
    1a10:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <__data_end+0x1>
    1a14:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a18:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a1c:	b0 99       	sbic	0x16, 0	; 22
    1a1e:	98 c0       	rjmp	.+304    	; 0x1b50 <__vector_7+0x17e>
    1a20:	47 01       	movw	r8, r14
    1a22:	0f 2c       	mov	r0, r15
    1a24:	00 0c       	add	r0, r0
    1a26:	aa 08       	sbc	r10, r10
    1a28:	bb 08       	sbc	r11, r11
    1a2a:	54 01       	movw	r10, r8
    1a2c:	99 24       	eor	r9, r9
    1a2e:	88 24       	eor	r8, r8
    1a30:	a0 e0       	ldi	r26, 0x00	; 0
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	88 2a       	or	r8, r24
    1a36:	99 2a       	or	r9, r25
    1a38:	aa 2a       	or	r10, r26
    1a3a:	bb 2a       	or	r11, r27
    1a3c:	c0 91 22 01 	lds	r28, 0x0122	; 0x800122 <timerQ>
    1a40:	d0 91 23 01 	lds	r29, 0x0123	; 0x800123 <timerQ+0x1>
    1a44:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <msgQ>
    1a48:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <msgQ+0x1>
    1a4c:	20 97       	sbiw	r28, 0x00	; 0
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <__vector_7+0x80>
    1a50:	3f c0       	rjmp	.+126    	; 0x1ad0 <__vector_7+0xfe>
    1a52:	4a 81       	ldd	r20, Y+2	; 0x02
    1a54:	5b 81       	ldd	r21, Y+3	; 0x03
    1a56:	6c 81       	ldd	r22, Y+4	; 0x04
    1a58:	7d 81       	ldd	r23, Y+5	; 0x05
    1a5a:	8a 01       	movw	r16, r20
    1a5c:	9b 01       	movw	r18, r22
    1a5e:	08 19       	sub	r16, r8
    1a60:	19 09       	sbc	r17, r9
    1a62:	2a 09       	sbc	r18, r10
    1a64:	3b 09       	sbc	r19, r11
    1a66:	10 16       	cp	r1, r16
    1a68:	11 06       	cpc	r1, r17
    1a6a:	12 06       	cpc	r1, r18
    1a6c:	13 06       	cpc	r1, r19
    1a6e:	0c f4       	brge	.+2      	; 0x1a72 <__vector_7+0xa0>
    1a70:	40 c0       	rjmp	.+128    	; 0x1af2 <__vector_7+0x120>
    1a72:	d8 80       	ld	r13, Y
    1a74:	c9 80       	ldd	r12, Y+1	; 0x01
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	b9 f1       	breq	.+110    	; 0x1ae8 <__vector_7+0x116>
    1a7a:	0e 81       	ldd	r16, Y+6	; 0x06
    1a7c:	1f 81       	ldd	r17, Y+7	; 0x07
    1a7e:	28 85       	ldd	r18, Y+8	; 0x08
    1a80:	39 85       	ldd	r19, Y+9	; 0x09
    1a82:	fc 01       	movw	r30, r24
    1a84:	46 81       	ldd	r20, Z+6	; 0x06
    1a86:	57 81       	ldd	r21, Z+7	; 0x07
    1a88:	60 85       	ldd	r22, Z+8	; 0x08
    1a8a:	71 85       	ldd	r23, Z+9	; 0x09
    1a8c:	04 17       	cp	r16, r20
    1a8e:	15 07       	cpc	r17, r21
    1a90:	26 07       	cpc	r18, r22
    1a92:	37 07       	cpc	r19, r23
    1a94:	4c f1       	brlt	.+82     	; 0x1ae8 <__vector_7+0x116>
    1a96:	dc 01       	movw	r26, r24
    1a98:	0a c0       	rjmp	.+20     	; 0x1aae <__vector_7+0xdc>
    1a9a:	46 81       	ldd	r20, Z+6	; 0x06
    1a9c:	57 81       	ldd	r21, Z+7	; 0x07
    1a9e:	60 85       	ldd	r22, Z+8	; 0x08
    1aa0:	71 85       	ldd	r23, Z+9	; 0x09
    1aa2:	04 17       	cp	r16, r20
    1aa4:	15 07       	cpc	r17, r21
    1aa6:	26 07       	cpc	r18, r22
    1aa8:	37 07       	cpc	r19, r23
    1aaa:	dc f0       	brlt	.+54     	; 0x1ae2 <__vector_7+0x110>
    1aac:	df 01       	movw	r26, r30
    1aae:	ed 91       	ld	r30, X+
    1ab0:	fc 91       	ld	r31, X
    1ab2:	11 97       	sbiw	r26, 0x01	; 1
    1ab4:	30 97       	sbiw	r30, 0x00	; 0
    1ab6:	89 f7       	brne	.-30     	; 0x1a9a <__vector_7+0xc8>
    1ab8:	19 82       	std	Y+1, r1	; 0x01
    1aba:	18 82       	st	Y, r1
    1abc:	cd 93       	st	X+, r28
    1abe:	dc 93       	st	X, r29
    1ac0:	38 2f       	mov	r19, r24
    1ac2:	29 2f       	mov	r18, r25
    1ac4:	cd 2d       	mov	r28, r13
    1ac6:	dc 2d       	mov	r29, r12
    1ac8:	83 2f       	mov	r24, r19
    1aca:	92 2f       	mov	r25, r18
    1acc:	20 97       	sbiw	r28, 0x00	; 0
    1ace:	09 f6       	brne	.-126    	; 0x1a52 <__vector_7+0x80>
    1ad0:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <timerQ+0x1>
    1ad4:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <timerQ>
    1ad8:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <msgQ+0x1>
    1adc:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <msgQ>
    1ae0:	13 c0       	rjmp	.+38     	; 0x1b08 <__vector_7+0x136>
    1ae2:	f9 83       	std	Y+1, r31	; 0x01
    1ae4:	e8 83       	st	Y, r30
    1ae6:	ea cf       	rjmp	.-44     	; 0x1abc <__vector_7+0xea>
    1ae8:	99 83       	std	Y+1, r25	; 0x01
    1aea:	88 83       	st	Y, r24
    1aec:	3c 2f       	mov	r19, r28
    1aee:	2d 2f       	mov	r18, r29
    1af0:	e9 cf       	rjmp	.-46     	; 0x1ac4 <__vector_7+0xf2>
    1af2:	d0 93 23 01 	sts	0x0123, r29	; 0x800123 <timerQ+0x1>
    1af6:	c0 93 22 01 	sts	0x0122, r28	; 0x800122 <timerQ>
    1afa:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <msgQ+0x1>
    1afe:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <msgQ>
    1b02:	e6 16       	cp	r14, r22
    1b04:	f7 06       	cpc	r15, r23
    1b06:	d9 f1       	breq	.+118    	; 0x1b7e <__vector_7+0x1ac>
    1b08:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1b0c:	8d 7f       	andi	r24, 0xFD	; 253
    1b0e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1b12:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    1b16:	ff 91       	pop	r31
    1b18:	ef 91       	pop	r30
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	bf 91       	pop	r27
    1b20:	af 91       	pop	r26
    1b22:	9f 91       	pop	r25
    1b24:	8f 91       	pop	r24
    1b26:	7f 91       	pop	r23
    1b28:	6f 91       	pop	r22
    1b2a:	5f 91       	pop	r21
    1b2c:	4f 91       	pop	r20
    1b2e:	3f 91       	pop	r19
    1b30:	2f 91       	pop	r18
    1b32:	1f 91       	pop	r17
    1b34:	0f 91       	pop	r16
    1b36:	ff 90       	pop	r15
    1b38:	ef 90       	pop	r14
    1b3a:	df 90       	pop	r13
    1b3c:	cf 90       	pop	r12
    1b3e:	bf 90       	pop	r11
    1b40:	af 90       	pop	r10
    1b42:	9f 90       	pop	r9
    1b44:	8f 90       	pop	r8
    1b46:	0f 90       	pop	r0
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	0f 90       	pop	r0
    1b4c:	1f 90       	pop	r1
    1b4e:	18 95       	reti
    1b50:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b54:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b58:	47 01       	movw	r8, r14
    1b5a:	8f ef       	ldi	r24, 0xFF	; 255
    1b5c:	88 1a       	sub	r8, r24
    1b5e:	98 0a       	sbc	r9, r24
    1b60:	09 2c       	mov	r0, r9
    1b62:	00 0c       	add	r0, r0
    1b64:	aa 08       	sbc	r10, r10
    1b66:	bb 08       	sbc	r11, r11
    1b68:	d4 01       	movw	r26, r8
    1b6a:	99 27       	eor	r25, r25
    1b6c:	88 27       	eor	r24, r24
    1b6e:	49 01       	movw	r8, r18
    1b70:	a1 2c       	mov	r10, r1
    1b72:	b1 2c       	mov	r11, r1
    1b74:	88 2a       	or	r8, r24
    1b76:	99 2a       	or	r9, r25
    1b78:	aa 2a       	or	r10, r26
    1b7a:	bb 2a       	or	r11, r27
    1b7c:	5f cf       	rjmp	.-322    	; 0x1a3c <__vector_7+0x6a>
    1b7e:	ca 01       	movw	r24, r20
    1b80:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b84:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b88:	42 1b       	sub	r20, r18
    1b8a:	53 0b       	sbc	r21, r19
    1b8c:	41 30       	cpi	r20, 0x01	; 1
    1b8e:	51 05       	cpc	r21, r1
    1b90:	51 f0       	breq	.+20     	; 0x1ba6 <__vector_7+0x1d4>
    1b92:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1b96:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1b9a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1b9e:	82 60       	ori	r24, 0x02	; 2
    1ba0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1ba4:	b6 cf       	rjmp	.-148    	; 0x1b12 <__vector_7+0x140>
    1ba6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1baa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bae:	01 96       	adiw	r24, 0x01	; 1
    1bb0:	f0 cf       	rjmp	.-32     	; 0x1b92 <__vector_7+0x1c0>

00001bb2 <async>:
    1bb2:	3f 92       	push	r3
    1bb4:	4f 92       	push	r4
    1bb6:	5f 92       	push	r5
    1bb8:	6f 92       	push	r6
    1bba:	7f 92       	push	r7
    1bbc:	8f 92       	push	r8
    1bbe:	9f 92       	push	r9
    1bc0:	af 92       	push	r10
    1bc2:	bf 92       	push	r11
    1bc4:	cf 92       	push	r12
    1bc6:	df 92       	push	r13
    1bc8:	ef 92       	push	r14
    1bca:	ff 92       	push	r15
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	ef b7       	in	r30, 0x3f	; 63
    1bd6:	e0 78       	andi	r30, 0x80	; 128
    1bd8:	3e 2e       	mov	r3, r30
    1bda:	f8 94       	cli
    1bdc:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <msgPool>
    1be0:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <msgPool+0x1>
    1be4:	20 97       	sbiw	r28, 0x00	; 0
    1be6:	09 f4       	brne	.+2      	; 0x1bea <async+0x38>
    1be8:	52 c1       	rjmp	.+676    	; 0x1e8e <async+0x2dc>
    1bea:	e8 81       	ld	r30, Y
    1bec:	f9 81       	ldd	r31, Y+1	; 0x01
    1bee:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <msgPool+0x1>
    1bf2:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <msgPool>
    1bf6:	1b 87       	std	Y+11, r17	; 0x0b
    1bf8:	0a 87       	std	Y+10, r16	; 0x0a
    1bfa:	fd 86       	std	Y+13, r15	; 0x0d
    1bfc:	ec 86       	std	Y+12, r14	; 0x0c
    1bfe:	df 86       	std	Y+15, r13	; 0x0f
    1c00:	ce 86       	std	Y+14, r12	; 0x0e
    1c02:	33 20       	and	r3, r3
    1c04:	09 f4       	brne	.+2      	; 0x1c08 <async+0x56>
    1c06:	6f c0       	rjmp	.+222    	; 0x1ce6 <async+0x134>
    1c08:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1c0c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1c10:	02 80       	ldd	r0, Z+2	; 0x02
    1c12:	f3 81       	ldd	r31, Z+3	; 0x03
    1c14:	e0 2d       	mov	r30, r0
    1c16:	c2 80       	ldd	r12, Z+2	; 0x02
    1c18:	d3 80       	ldd	r13, Z+3	; 0x03
    1c1a:	e4 80       	ldd	r14, Z+4	; 0x04
    1c1c:	f5 80       	ldd	r15, Z+5	; 0x05
    1c1e:	c6 0e       	add	r12, r22
    1c20:	d7 1e       	adc	r13, r23
    1c22:	e8 1e       	adc	r14, r24
    1c24:	f9 1e       	adc	r15, r25
    1c26:	ca 82       	std	Y+2, r12	; 0x02
    1c28:	db 82       	std	Y+3, r13	; 0x03
    1c2a:	ec 82       	std	Y+4, r14	; 0x04
    1c2c:	fd 82       	std	Y+5, r15	; 0x05
    1c2e:	12 16       	cp	r1, r18
    1c30:	13 06       	cpc	r1, r19
    1c32:	14 06       	cpc	r1, r20
    1c34:	15 06       	cpc	r1, r21
    1c36:	0c f0       	brlt	.+2      	; 0x1c3a <async+0x88>
    1c38:	f8 c0       	rjmp	.+496    	; 0x1e2a <async+0x278>
    1c3a:	da 01       	movw	r26, r20
    1c3c:	c9 01       	movw	r24, r18
    1c3e:	8c 01       	movw	r16, r24
    1c40:	9d 01       	movw	r18, r26
    1c42:	0c 0d       	add	r16, r12
    1c44:	1d 1d       	adc	r17, r13
    1c46:	2e 1d       	adc	r18, r14
    1c48:	3f 1d       	adc	r19, r15
    1c4a:	0e 83       	std	Y+6, r16	; 0x06
    1c4c:	1f 83       	std	Y+7, r17	; 0x07
    1c4e:	28 87       	std	Y+8, r18	; 0x08
    1c50:	39 87       	std	Y+9, r19	; 0x09
    1c52:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1c56:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1c5a:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c5e:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c62:	b0 99       	sbic	0x16, 0	; 22
    1c64:	49 c0       	rjmp	.+146    	; 0x1cf8 <async+0x146>
    1c66:	2c 01       	movw	r4, r24
    1c68:	09 2e       	mov	r0, r25
    1c6a:	00 0c       	add	r0, r0
    1c6c:	66 08       	sbc	r6, r6
    1c6e:	77 08       	sbc	r7, r7
    1c70:	52 01       	movw	r10, r4
    1c72:	99 24       	eor	r9, r9
    1c74:	88 24       	eor	r8, r8
    1c76:	2b 01       	movw	r4, r22
    1c78:	61 2c       	mov	r6, r1
    1c7a:	71 2c       	mov	r7, r1
    1c7c:	48 28       	or	r4, r8
    1c7e:	59 28       	or	r5, r9
    1c80:	6a 28       	or	r6, r10
    1c82:	7b 28       	or	r7, r11
    1c84:	b7 01       	movw	r22, r14
    1c86:	a6 01       	movw	r20, r12
    1c88:	44 19       	sub	r20, r4
    1c8a:	55 09       	sbc	r21, r5
    1c8c:	66 09       	sbc	r22, r6
    1c8e:	77 09       	sbc	r23, r7
    1c90:	14 16       	cp	r1, r20
    1c92:	15 06       	cpc	r1, r21
    1c94:	16 06       	cpc	r1, r22
    1c96:	17 06       	cpc	r1, r23
    1c98:	0c f0       	brlt	.+2      	; 0x1c9c <async+0xea>
    1c9a:	68 c0       	rjmp	.+208    	; 0x1d6c <async+0x1ba>
    1c9c:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <timerQ>
    1ca0:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <timerQ+0x1>
    1ca4:	10 97       	sbiw	r26, 0x00	; 0
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <async+0xf8>
    1ca8:	dc c0       	rjmp	.+440    	; 0x1e62 <async+0x2b0>
    1caa:	12 96       	adiw	r26, 0x02	; 2
    1cac:	0d 91       	ld	r16, X+
    1cae:	1d 91       	ld	r17, X+
    1cb0:	2d 91       	ld	r18, X+
    1cb2:	3c 91       	ld	r19, X
    1cb4:	15 97       	sbiw	r26, 0x05	; 5
    1cb6:	c0 16       	cp	r12, r16
    1cb8:	d1 06       	cpc	r13, r17
    1cba:	e2 06       	cpc	r14, r18
    1cbc:	f3 06       	cpc	r15, r19
    1cbe:	5c f4       	brge	.+22     	; 0x1cd6 <async+0x124>
    1cc0:	d0 c0       	rjmp	.+416    	; 0x1e62 <async+0x2b0>
    1cc2:	42 81       	ldd	r20, Z+2	; 0x02
    1cc4:	53 81       	ldd	r21, Z+3	; 0x03
    1cc6:	64 81       	ldd	r22, Z+4	; 0x04
    1cc8:	75 81       	ldd	r23, Z+5	; 0x05
    1cca:	c4 16       	cp	r12, r20
    1ccc:	d5 06       	cpc	r13, r21
    1cce:	e6 06       	cpc	r14, r22
    1cd0:	f7 06       	cpc	r15, r23
    1cd2:	4c f1       	brlt	.+82     	; 0x1d26 <async+0x174>
    1cd4:	df 01       	movw	r26, r30
    1cd6:	ed 91       	ld	r30, X+
    1cd8:	fc 91       	ld	r31, X
    1cda:	11 97       	sbiw	r26, 0x01	; 1
    1cdc:	30 97       	sbiw	r30, 0x00	; 0
    1cde:	89 f7       	brne	.-30     	; 0x1cc2 <async+0x110>
    1ce0:	19 82       	std	Y+1, r1	; 0x01
    1ce2:	18 82       	st	Y, r1
    1ce4:	22 c0       	rjmp	.+68     	; 0x1d2a <async+0x178>
    1ce6:	c0 90 1e 01 	lds	r12, 0x011E	; 0x80011e <timestamp>
    1cea:	d0 90 1f 01 	lds	r13, 0x011F	; 0x80011f <timestamp+0x1>
    1cee:	e0 90 20 01 	lds	r14, 0x0120	; 0x800120 <timestamp+0x2>
    1cf2:	f0 90 21 01 	lds	r15, 0x0121	; 0x800121 <timestamp+0x3>
    1cf6:	93 cf       	rjmp	.-218    	; 0x1c1e <async+0x6c>
    1cf8:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cfc:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d00:	2c 01       	movw	r4, r24
    1d02:	4f ef       	ldi	r20, 0xFF	; 255
    1d04:	44 1a       	sub	r4, r20
    1d06:	54 0a       	sbc	r5, r20
    1d08:	05 2c       	mov	r0, r5
    1d0a:	00 0c       	add	r0, r0
    1d0c:	66 08       	sbc	r6, r6
    1d0e:	77 08       	sbc	r7, r7
    1d10:	b2 01       	movw	r22, r4
    1d12:	55 27       	eor	r21, r21
    1d14:	44 27       	eor	r20, r20
    1d16:	2f 01       	movw	r4, r30
    1d18:	61 2c       	mov	r6, r1
    1d1a:	71 2c       	mov	r7, r1
    1d1c:	44 2a       	or	r4, r20
    1d1e:	55 2a       	or	r5, r21
    1d20:	66 2a       	or	r6, r22
    1d22:	77 2a       	or	r7, r23
    1d24:	af cf       	rjmp	.-162    	; 0x1c84 <async+0xd2>
    1d26:	f9 83       	std	Y+1, r31	; 0x01
    1d28:	e8 83       	st	Y, r30
    1d2a:	cd 93       	st	X+, r28
    1d2c:	dc 93       	st	X, r29
    1d2e:	82 17       	cp	r24, r18
    1d30:	93 07       	cpc	r25, r19
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <async+0x184>
    1d34:	7f c0       	rjmp	.+254    	; 0x1e34 <async+0x282>
    1d36:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1d3a:	8d 7f       	andi	r24, 0xFD	; 253
    1d3c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1d40:	33 20       	and	r3, r3
    1d42:	09 f0       	breq	.+2      	; 0x1d46 <async+0x194>
    1d44:	78 94       	sei
    1d46:	ce 01       	movw	r24, r28
    1d48:	df 91       	pop	r29
    1d4a:	cf 91       	pop	r28
    1d4c:	1f 91       	pop	r17
    1d4e:	0f 91       	pop	r16
    1d50:	ff 90       	pop	r15
    1d52:	ef 90       	pop	r14
    1d54:	df 90       	pop	r13
    1d56:	cf 90       	pop	r12
    1d58:	bf 90       	pop	r11
    1d5a:	af 90       	pop	r10
    1d5c:	9f 90       	pop	r9
    1d5e:	8f 90       	pop	r8
    1d60:	7f 90       	pop	r7
    1d62:	6f 90       	pop	r6
    1d64:	5f 90       	pop	r5
    1d66:	4f 90       	pop	r4
    1d68:	3f 90       	pop	r3
    1d6a:	08 95       	ret
    1d6c:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <msgQ>
    1d70:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <msgQ+0x1>
    1d74:	10 97       	sbiw	r26, 0x00	; 0
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <async+0x1c8>
    1d78:	83 c0       	rjmp	.+262    	; 0x1e80 <async+0x2ce>
    1d7a:	16 96       	adiw	r26, 0x06	; 6
    1d7c:	cd 90       	ld	r12, X+
    1d7e:	dd 90       	ld	r13, X+
    1d80:	ed 90       	ld	r14, X+
    1d82:	fc 90       	ld	r15, X
    1d84:	19 97       	sbiw	r26, 0x09	; 9
    1d86:	0c 15       	cp	r16, r12
    1d88:	1d 05       	cpc	r17, r13
    1d8a:	2e 05       	cpc	r18, r14
    1d8c:	3f 05       	cpc	r19, r15
    1d8e:	64 f4       	brge	.+24     	; 0x1da8 <async+0x1f6>
    1d90:	77 c0       	rjmp	.+238    	; 0x1e80 <async+0x2ce>
    1d92:	c6 80       	ldd	r12, Z+6	; 0x06
    1d94:	d7 80       	ldd	r13, Z+7	; 0x07
    1d96:	e0 84       	ldd	r14, Z+8	; 0x08
    1d98:	f1 84       	ldd	r15, Z+9	; 0x09
    1d9a:	0c 15       	cp	r16, r12
    1d9c:	1d 05       	cpc	r17, r13
    1d9e:	2e 05       	cpc	r18, r14
    1da0:	3f 05       	cpc	r19, r15
    1da2:	0c f4       	brge	.+2      	; 0x1da6 <async+0x1f4>
    1da4:	5b c0       	rjmp	.+182    	; 0x1e5c <async+0x2aa>
    1da6:	df 01       	movw	r26, r30
    1da8:	ed 91       	ld	r30, X+
    1daa:	fc 91       	ld	r31, X
    1dac:	11 97       	sbiw	r26, 0x01	; 1
    1dae:	30 97       	sbiw	r30, 0x00	; 0
    1db0:	81 f7       	brne	.-32     	; 0x1d92 <async+0x1e0>
    1db2:	19 82       	std	Y+1, r1	; 0x01
    1db4:	18 82       	st	Y, r1
    1db6:	cd 93       	st	X+, r28
    1db8:	dc 93       	st	X, r29
    1dba:	33 20       	and	r3, r3
    1dbc:	21 f2       	breq	.-120    	; 0x1d46 <async+0x194>
    1dbe:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1dc2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <async+0x21a>
    1dca:	bc cf       	rjmp	.-136    	; 0x1d44 <async+0x192>
    1dcc:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1dd0:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1dd4:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <msgQ>
    1dd8:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <msgQ+0x1>
    1ddc:	02 81       	ldd	r16, Z+2	; 0x02
    1dde:	13 81       	ldd	r17, Z+3	; 0x03
    1de0:	d9 01       	movw	r26, r18
    1de2:	16 96       	adiw	r26, 0x06	; 6
    1de4:	4d 91       	ld	r20, X+
    1de6:	5d 91       	ld	r21, X+
    1de8:	6d 91       	ld	r22, X+
    1dea:	7c 91       	ld	r23, X
    1dec:	19 97       	sbiw	r26, 0x09	; 9
    1dee:	d8 01       	movw	r26, r16
    1df0:	16 96       	adiw	r26, 0x06	; 6
    1df2:	0d 91       	ld	r16, X+
    1df4:	1d 91       	ld	r17, X+
    1df6:	2d 91       	ld	r18, X+
    1df8:	3c 91       	ld	r19, X
    1dfa:	19 97       	sbiw	r26, 0x09	; 9
    1dfc:	40 1b       	sub	r20, r16
    1dfe:	51 0b       	sbc	r21, r17
    1e00:	62 0b       	sbc	r22, r18
    1e02:	73 0b       	sbc	r23, r19
    1e04:	77 ff       	sbrs	r23, 7
    1e06:	9e cf       	rjmp	.-196    	; 0x1d44 <async+0x192>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	2d 91       	ld	r18, X+
    1e0c:	3c 91       	ld	r19, X
    1e0e:	11 97       	sbiw	r26, 0x01	; 1
    1e10:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
    1e14:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
    1e18:	ed 93       	st	X+, r30
    1e1a:	fc 93       	st	X, r31
    1e1c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
    1e20:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
    1e24:	0e 94 93 04 	call	0x926	; 0x926 <dispatch>
    1e28:	8d cf       	rjmp	.-230    	; 0x1d44 <async+0x192>
    1e2a:	8f ef       	ldi	r24, 0xFF	; 255
    1e2c:	9f ef       	ldi	r25, 0xFF	; 255
    1e2e:	af ef       	ldi	r26, 0xFF	; 255
    1e30:	bf e7       	ldi	r27, 0x7F	; 127
    1e32:	05 cf       	rjmp	.-502    	; 0x1c3e <async+0x8c>
    1e34:	c8 01       	movw	r24, r16
    1e36:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e3a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e3e:	04 1b       	sub	r16, r20
    1e40:	15 0b       	sbc	r17, r21
    1e42:	01 30       	cpi	r16, 0x01	; 1
    1e44:	11 05       	cpc	r17, r1
    1e46:	b1 f0       	breq	.+44     	; 0x1e74 <async+0x2c2>
    1e48:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1e4c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1e50:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1e54:	82 60       	ori	r24, 0x02	; 2
    1e56:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1e5a:	72 cf       	rjmp	.-284    	; 0x1d40 <async+0x18e>
    1e5c:	f9 83       	std	Y+1, r31	; 0x01
    1e5e:	e8 83       	st	Y, r30
    1e60:	aa cf       	rjmp	.-172    	; 0x1db6 <async+0x204>
    1e62:	b9 83       	std	Y+1, r27	; 0x01
    1e64:	a8 83       	st	Y, r26
    1e66:	d0 93 23 01 	sts	0x0123, r29	; 0x800123 <timerQ+0x1>
    1e6a:	c0 93 22 01 	sts	0x0122, r28	; 0x800122 <timerQ>
    1e6e:	97 01       	movw	r18, r14
    1e70:	86 01       	movw	r16, r12
    1e72:	5d cf       	rjmp	.-326    	; 0x1d2e <async+0x17c>
    1e74:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e78:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e7c:	01 96       	adiw	r24, 0x01	; 1
    1e7e:	e4 cf       	rjmp	.-56     	; 0x1e48 <async+0x296>
    1e80:	b9 83       	std	Y+1, r27	; 0x01
    1e82:	a8 83       	st	Y, r26
    1e84:	d0 93 25 01 	sts	0x0125, r29	; 0x800125 <msgQ+0x1>
    1e88:	c0 93 24 01 	sts	0x0124, r28	; 0x800124 <msgQ>
    1e8c:	96 cf       	rjmp	.-212    	; 0x1dba <async+0x208>
    1e8e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <dequeue.part.0>

00001e92 <sync>:
    1e92:	cf 92       	push	r12
    1e94:	df 92       	push	r13
    1e96:	ef 92       	push	r14
    1e98:	ff 92       	push	r15
    1e9a:	0f 93       	push	r16
    1e9c:	1f 93       	push	r17
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	ec 01       	movw	r28, r24
    1ea4:	7b 01       	movw	r14, r22
    1ea6:	6a 01       	movw	r12, r20
    1ea8:	1f b7       	in	r17, 0x3f	; 63
    1eaa:	10 78       	andi	r17, 0x80	; 128
    1eac:	f8 94       	cli
    1eae:	a8 81       	ld	r26, Y
    1eb0:	b9 81       	ldd	r27, Y+1	; 0x01
    1eb2:	10 97       	sbiw	r26, 0x00	; 0
    1eb4:	19 f4       	brne	.+6      	; 0x1ebc <sync+0x2a>
    1eb6:	62 c0       	rjmp	.+196    	; 0x1f7c <sync+0xea>
    1eb8:	a0 81       	ld	r26, Z
    1eba:	b1 81       	ldd	r27, Z+1	; 0x01
    1ebc:	14 96       	adiw	r26, 0x04	; 4
    1ebe:	ed 91       	ld	r30, X+
    1ec0:	fc 91       	ld	r31, X
    1ec2:	15 97       	sbiw	r26, 0x05	; 5
    1ec4:	30 97       	sbiw	r30, 0x00	; 0
    1ec6:	c1 f7       	brne	.-16     	; 0x1eb8 <sync+0x26>
    1ec8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1ecc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1ed0:	2a 17       	cp	r18, r26
    1ed2:	3b 07       	cpc	r19, r27
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <sync+0x46>
    1ed6:	4c c0       	rjmp	.+152    	; 0x1f70 <sync+0xde>
    1ed8:	11 23       	and	r17, r17
    1eda:	a1 f1       	breq	.+104    	; 0x1f44 <sync+0xb2>
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	19 f0       	breq	.+6      	; 0x1eea <sync+0x58>
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	15 82       	std	Z+5, r1	; 0x05
    1ee8:	14 82       	std	Z+4, r1	; 0x04
    1eea:	3b 83       	std	Y+3, r19	; 0x03
    1eec:	2a 83       	std	Y+2, r18	; 0x02
    1eee:	f9 01       	movw	r30, r18
    1ef0:	d5 83       	std	Z+5, r29	; 0x05
    1ef2:	c4 83       	std	Z+4, r28	; 0x04
    1ef4:	cd 01       	movw	r24, r26
    1ef6:	0e 94 93 04 	call	0x926	; 0x926 <dispatch>
    1efa:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1efe:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1f02:	82 81       	ldd	r24, Z+2	; 0x02
    1f04:	93 81       	ldd	r25, Z+3	; 0x03
    1f06:	89 2b       	or	r24, r25
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <sync+0x7a>
    1f0a:	41 c0       	rjmp	.+130    	; 0x1f8e <sync+0xfc>
    1f0c:	f9 83       	std	Y+1, r31	; 0x01
    1f0e:	e8 83       	st	Y, r30
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	9b 81       	ldd	r25, Y+3	; 0x03
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	09 f0       	breq	.+2      	; 0x1f1a <sync+0x88>
    1f18:	78 94       	sei
    1f1a:	b6 01       	movw	r22, r12
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	f7 01       	movw	r30, r14
    1f20:	09 95       	icall
    1f22:	f8 2e       	mov	r15, r24
    1f24:	09 2f       	mov	r16, r25
    1f26:	8f b7       	in	r24, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	19 82       	std	Y+1, r1	; 0x01
    1f2c:	18 82       	st	Y, r1
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	9b 81       	ldd	r25, Y+3	; 0x03
    1f32:	82 30       	cpi	r24, 0x02	; 2
    1f34:	91 05       	cpc	r25, r1
    1f36:	a0 f4       	brcc	.+40     	; 0x1f60 <sync+0xce>
    1f38:	11 23       	and	r17, r17
    1f3a:	79 f0       	breq	.+30     	; 0x1f5a <sync+0xc8>
    1f3c:	78 94       	sei
    1f3e:	8f 2d       	mov	r24, r15
    1f40:	90 2f       	mov	r25, r16
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <sync+0xb6>
    1f44:	8f ef       	ldi	r24, 0xFF	; 255
    1f46:	9f ef       	ldi	r25, 0xFF	; 255
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 91       	pop	r16
    1f50:	ff 90       	pop	r15
    1f52:	ef 90       	pop	r14
    1f54:	df 90       	pop	r13
    1f56:	cf 90       	pop	r12
    1f58:	08 95       	ret
    1f5a:	8f 2d       	mov	r24, r15
    1f5c:	90 2f       	mov	r25, r16
    1f5e:	f4 cf       	rjmp	.-24     	; 0x1f48 <sync+0xb6>
    1f60:	1b 82       	std	Y+3, r1	; 0x03
    1f62:	1a 82       	std	Y+2, r1	; 0x02
    1f64:	fc 01       	movw	r30, r24
    1f66:	15 82       	std	Z+5, r1	; 0x05
    1f68:	14 82       	std	Z+4, r1	; 0x04
    1f6a:	0e 94 93 04 	call	0x926	; 0x926 <dispatch>
    1f6e:	e4 cf       	rjmp	.-56     	; 0x1f38 <sync+0xa6>
    1f70:	11 23       	and	r17, r17
    1f72:	41 f3       	breq	.-48     	; 0x1f44 <sync+0xb2>
    1f74:	78 94       	sei
    1f76:	8f ef       	ldi	r24, 0xFF	; 255
    1f78:	9f ef       	ldi	r25, 0xFF	; 255
    1f7a:	e6 cf       	rjmp	.-52     	; 0x1f48 <sync+0xb6>
    1f7c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1f80:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1f84:	99 83       	std	Y+1, r25	; 0x01
    1f86:	88 83       	st	Y, r24
    1f88:	11 23       	and	r17, r17
    1f8a:	39 f2       	breq	.-114    	; 0x1f1a <sync+0x88>
    1f8c:	c1 cf       	rjmp	.-126    	; 0x1f10 <sync+0x7e>
    1f8e:	78 94       	sei
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	d9 cf       	rjmp	.-78     	; 0x1f48 <sync+0xb6>

00001f96 <run>:
    1f96:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <msgQ>
    1f9a:	d0 91 25 01 	lds	r29, 0x0125	; 0x800125 <msgQ+0x1>
    1f9e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1fa2:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1fa6:	20 97       	sbiw	r28, 0x00	; 0
    1fa8:	09 f4       	brne	.+2      	; 0x1fac <run+0x16>
    1faa:	6e c0       	rjmp	.+220    	; 0x2088 <run+0xf2>
    1fac:	88 81       	ld	r24, Y
    1fae:	99 81       	ldd	r25, Y+1	; 0x01
    1fb0:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <msgQ+0x1>
    1fb4:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <msgQ>
    1fb8:	d3 83       	std	Z+3, r29	; 0x03
    1fba:	c2 83       	std	Z+2, r28	; 0x02
    1fbc:	78 94       	sei
    1fbe:	4e 85       	ldd	r20, Y+14	; 0x0e
    1fc0:	5f 85       	ldd	r21, Y+15	; 0x0f
    1fc2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fc4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fc6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fc8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fca:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <sync>
    1fce:	8f b7       	in	r24, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <msgPool>
    1fd6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <msgPool+0x1>
    1fda:	99 83       	std	Y+1, r25	; 0x01
    1fdc:	88 83       	st	Y, r24
    1fde:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <msgPool+0x1>
    1fe2:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <msgPool>
    1fe6:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <activeStack>
    1fea:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <activeStack+0x1>
    1fee:	f7 01       	movw	r30, r14
    1ff0:	a0 81       	ld	r26, Z
    1ff2:	b1 81       	ldd	r27, Z+1	; 0x01
    1ff4:	12 96       	adiw	r26, 0x02	; 2
    1ff6:	8d 91       	ld	r24, X+
    1ff8:	9c 91       	ld	r25, X
    1ffa:	13 97       	sbiw	r26, 0x03	; 3
    1ffc:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <msgQ>
    2000:	d0 91 25 01 	lds	r29, 0x0125	; 0x800125 <msgQ+0x1>
    2004:	20 97       	sbiw	r28, 0x00	; 0
    2006:	a9 f0       	breq	.+42     	; 0x2032 <run+0x9c>
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	49 f2       	breq	.-110    	; 0x1f9e <run+0x8>
    200c:	4e 81       	ldd	r20, Y+6	; 0x06
    200e:	5f 81       	ldd	r21, Y+7	; 0x07
    2010:	68 85       	ldd	r22, Y+8	; 0x08
    2012:	79 85       	ldd	r23, Y+9	; 0x09
    2014:	fc 01       	movw	r30, r24
    2016:	06 81       	ldd	r16, Z+6	; 0x06
    2018:	17 81       	ldd	r17, Z+7	; 0x07
    201a:	20 85       	ldd	r18, Z+8	; 0x08
    201c:	31 85       	ldd	r19, Z+9	; 0x09
    201e:	40 1b       	sub	r20, r16
    2020:	51 0b       	sbc	r21, r17
    2022:	62 0b       	sbc	r22, r18
    2024:	73 0b       	sbc	r23, r19
    2026:	14 16       	cp	r1, r20
    2028:	15 06       	cpc	r1, r21
    202a:	16 06       	cpc	r1, r22
    202c:	17 06       	cpc	r1, r23
    202e:	0c f0       	brlt	.+2      	; 0x2032 <run+0x9c>
    2030:	b6 cf       	rjmp	.-148    	; 0x1f9e <run+0x8>
    2032:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <activeStack+0x1>
    2036:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <activeStack>
    203a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    203e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    2042:	f7 01       	movw	r30, r14
    2044:	91 83       	std	Z+1, r25	; 0x01
    2046:	80 83       	st	Z, r24
    2048:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <threadPool+0x1>
    204c:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <threadPool>
    2050:	14 96       	adiw	r26, 0x04	; 4
    2052:	ed 91       	ld	r30, X+
    2054:	fc 91       	ld	r31, X
    2056:	15 97       	sbiw	r26, 0x05	; 5
    2058:	30 97       	sbiw	r30, 0x00	; 0
    205a:	41 f0       	breq	.+16     	; 0x206c <run+0xd6>
    205c:	a0 81       	ld	r26, Z
    205e:	b1 81       	ldd	r27, Z+1	; 0x01
    2060:	14 96       	adiw	r26, 0x04	; 4
    2062:	ed 91       	ld	r30, X+
    2064:	fc 91       	ld	r31, X
    2066:	15 97       	sbiw	r26, 0x05	; 5
    2068:	30 97       	sbiw	r30, 0x00	; 0
    206a:	c1 f7       	brne	.-16     	; 0x205c <run+0xc6>
    206c:	cd 01       	movw	r24, r26
    206e:	0e 94 93 04 	call	0x926	; 0x926 <dispatch>
    2072:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <msgQ>
    2076:	d0 91 25 01 	lds	r29, 0x0125	; 0x800125 <msgQ+0x1>
    207a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    207e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2082:	20 97       	sbiw	r28, 0x00	; 0
    2084:	09 f0       	breq	.+2      	; 0x2088 <run+0xf2>
    2086:	92 cf       	rjmp	.-220    	; 0x1fac <run+0x16>
    2088:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <dequeue.part.0>

0000208c <install>:
    208c:	42 31       	cpi	r20, 0x12	; 18
    208e:	b8 f4       	brcc	.+46     	; 0x20be <install+0x32>
    2090:	2f b7       	in	r18, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	50 e0       	ldi	r21, 0x00	; 0
    2096:	44 0f       	add	r20, r20
    2098:	55 1f       	adc	r21, r21
    209a:	fa 01       	movw	r30, r20
    209c:	ea 5d       	subi	r30, 0xDA	; 218
    209e:	fe 4f       	sbci	r31, 0xFE	; 254
    20a0:	91 83       	std	Z+1, r25	; 0x01
    20a2:	80 83       	st	Z, r24
    20a4:	fa 01       	movw	r30, r20
    20a6:	e2 54       	subi	r30, 0x42	; 66
    20a8:	fe 4f       	sbci	r31, 0xFE	; 254
    20aa:	71 83       	std	Z+1, r23	; 0x01
    20ac:	60 83       	st	Z, r22
    20ae:	41 e0       	ldi	r20, 0x01	; 1
    20b0:	50 e0       	ldi	r21, 0x00	; 0
    20b2:	fc 01       	movw	r30, r24
    20b4:	53 83       	std	Z+3, r21	; 0x03
    20b6:	42 83       	std	Z+2, r20	; 0x02
    20b8:	27 ff       	sbrs	r18, 7
    20ba:	01 c0       	rjmp	.+2      	; 0x20be <install+0x32>
    20bc:	78 94       	sei
    20be:	08 95       	ret

000020c0 <tinytimber>:
    20c0:	8c 01       	movw	r16, r24
    20c2:	7b 01       	movw	r14, r22
    20c4:	6a 01       	movw	r12, r20
    20c6:	8f b7       	in	r24, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	0e 94 28 04 	call	0x850	; 0x850 <initialize>
    20ce:	78 94       	sei
    20d0:	e1 14       	cp	r14, r1
    20d2:	f1 04       	cpc	r15, r1
    20d4:	41 f0       	breq	.+16     	; 0x20e6 <tinytimber+0x26>
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	a9 01       	movw	r20, r18
    20dc:	60 e0       	ldi	r22, 0x00	; 0
    20de:	70 e0       	ldi	r23, 0x00	; 0
    20e0:	cb 01       	movw	r24, r22
    20e2:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <async>
    20e6:	8f b7       	in	r24, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    20ee:	78 94       	sei
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	83 bf       	out	0x33, r24	; 51
    20f4:	88 95       	sleep
    20f6:	fd cf       	rjmp	.-6      	; 0x20f2 <tinytimber+0x32>

000020f8 <__divmodsi4>:
    20f8:	05 2e       	mov	r0, r21
    20fa:	97 fb       	bst	r25, 7
    20fc:	1e f4       	brtc	.+6      	; 0x2104 <__divmodsi4+0xc>
    20fe:	00 94       	com	r0
    2100:	0e 94 93 10 	call	0x2126	; 0x2126 <__negsi2>
    2104:	57 fd       	sbrc	r21, 7
    2106:	07 d0       	rcall	.+14     	; 0x2116 <__divmodsi4_neg2>
    2108:	0e 94 9b 10 	call	0x2136	; 0x2136 <__udivmodsi4>
    210c:	07 fc       	sbrc	r0, 7
    210e:	03 d0       	rcall	.+6      	; 0x2116 <__divmodsi4_neg2>
    2110:	4e f4       	brtc	.+18     	; 0x2124 <__divmodsi4_exit>
    2112:	0c 94 93 10 	jmp	0x2126	; 0x2126 <__negsi2>

00002116 <__divmodsi4_neg2>:
    2116:	50 95       	com	r21
    2118:	40 95       	com	r20
    211a:	30 95       	com	r19
    211c:	21 95       	neg	r18
    211e:	3f 4f       	sbci	r19, 0xFF	; 255
    2120:	4f 4f       	sbci	r20, 0xFF	; 255
    2122:	5f 4f       	sbci	r21, 0xFF	; 255

00002124 <__divmodsi4_exit>:
    2124:	08 95       	ret

00002126 <__negsi2>:
    2126:	90 95       	com	r25
    2128:	80 95       	com	r24
    212a:	70 95       	com	r23
    212c:	61 95       	neg	r22
    212e:	7f 4f       	sbci	r23, 0xFF	; 255
    2130:	8f 4f       	sbci	r24, 0xFF	; 255
    2132:	9f 4f       	sbci	r25, 0xFF	; 255
    2134:	08 95       	ret

00002136 <__udivmodsi4>:
    2136:	a1 e2       	ldi	r26, 0x21	; 33
    2138:	1a 2e       	mov	r1, r26
    213a:	aa 1b       	sub	r26, r26
    213c:	bb 1b       	sub	r27, r27
    213e:	fd 01       	movw	r30, r26
    2140:	0d c0       	rjmp	.+26     	; 0x215c <__udivmodsi4_ep>

00002142 <__udivmodsi4_loop>:
    2142:	aa 1f       	adc	r26, r26
    2144:	bb 1f       	adc	r27, r27
    2146:	ee 1f       	adc	r30, r30
    2148:	ff 1f       	adc	r31, r31
    214a:	a2 17       	cp	r26, r18
    214c:	b3 07       	cpc	r27, r19
    214e:	e4 07       	cpc	r30, r20
    2150:	f5 07       	cpc	r31, r21
    2152:	20 f0       	brcs	.+8      	; 0x215c <__udivmodsi4_ep>
    2154:	a2 1b       	sub	r26, r18
    2156:	b3 0b       	sbc	r27, r19
    2158:	e4 0b       	sbc	r30, r20
    215a:	f5 0b       	sbc	r31, r21

0000215c <__udivmodsi4_ep>:
    215c:	66 1f       	adc	r22, r22
    215e:	77 1f       	adc	r23, r23
    2160:	88 1f       	adc	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	1a 94       	dec	r1
    2166:	69 f7       	brne	.-38     	; 0x2142 <__udivmodsi4_loop>
    2168:	60 95       	com	r22
    216a:	70 95       	com	r23
    216c:	80 95       	com	r24
    216e:	90 95       	com	r25
    2170:	9b 01       	movw	r18, r22
    2172:	ac 01       	movw	r20, r24
    2174:	bd 01       	movw	r22, r26
    2176:	cf 01       	movw	r24, r30
    2178:	08 95       	ret

0000217a <setjmp>:
    217a:	dc 01       	movw	r26, r24
    217c:	2d 92       	st	X+, r2
    217e:	3d 92       	st	X+, r3
    2180:	4d 92       	st	X+, r4
    2182:	5d 92       	st	X+, r5
    2184:	6d 92       	st	X+, r6
    2186:	7d 92       	st	X+, r7
    2188:	8d 92       	st	X+, r8
    218a:	9d 92       	st	X+, r9
    218c:	ad 92       	st	X+, r10
    218e:	bd 92       	st	X+, r11
    2190:	cd 92       	st	X+, r12
    2192:	dd 92       	st	X+, r13
    2194:	ed 92       	st	X+, r14
    2196:	fd 92       	st	X+, r15
    2198:	0d 93       	st	X+, r16
    219a:	1d 93       	st	X+, r17
    219c:	cd 93       	st	X+, r28
    219e:	dd 93       	st	X+, r29
    21a0:	ff 91       	pop	r31
    21a2:	ef 91       	pop	r30
    21a4:	8d b7       	in	r24, 0x3d	; 61
    21a6:	8d 93       	st	X+, r24
    21a8:	8e b7       	in	r24, 0x3e	; 62
    21aa:	8d 93       	st	X+, r24
    21ac:	8f b7       	in	r24, 0x3f	; 63
    21ae:	8d 93       	st	X+, r24
    21b0:	ed 93       	st	X+, r30
    21b2:	fd 93       	st	X+, r31
    21b4:	88 27       	eor	r24, r24
    21b6:	99 27       	eor	r25, r25
    21b8:	09 94       	ijmp

000021ba <longjmp>:
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	81 30       	cpi	r24, 0x01	; 1
    21c0:	91 05       	cpc	r25, r1
    21c2:	81 1d       	adc	r24, r1
    21c4:	2d 90       	ld	r2, X+
    21c6:	3d 90       	ld	r3, X+
    21c8:	4d 90       	ld	r4, X+
    21ca:	5d 90       	ld	r5, X+
    21cc:	6d 90       	ld	r6, X+
    21ce:	7d 90       	ld	r7, X+
    21d0:	8d 90       	ld	r8, X+
    21d2:	9d 90       	ld	r9, X+
    21d4:	ad 90       	ld	r10, X+
    21d6:	bd 90       	ld	r11, X+
    21d8:	cd 90       	ld	r12, X+
    21da:	dd 90       	ld	r13, X+
    21dc:	ed 90       	ld	r14, X+
    21de:	fd 90       	ld	r15, X+
    21e0:	0d 91       	ld	r16, X+
    21e2:	1d 91       	ld	r17, X+
    21e4:	cd 91       	ld	r28, X+
    21e6:	dd 91       	ld	r29, X+
    21e8:	ed 91       	ld	r30, X+
    21ea:	fd 91       	ld	r31, X+
    21ec:	0d 90       	ld	r0, X+
    21ee:	f8 94       	cli
    21f0:	fe bf       	out	0x3e, r31	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	ed bf       	out	0x3d, r30	; 61
    21f6:	ed 91       	ld	r30, X+
    21f8:	fd 91       	ld	r31, X+
    21fa:	09 94       	ijmp

000021fc <_exit>:
    21fc:	f8 94       	cli

000021fe <__stop_program>:
    21fe:	ff cf       	rjmp	.-2      	; 0x21fe <__stop_program>
